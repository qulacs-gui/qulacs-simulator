/* Bar */

/* BarChart */

/* CartesianGrid */

/* Cell */

/* ComposedChart */

/* DefaultValue */

/* DndProvider */

/* HTML5Backend */

/* Label */

/* Line */

/* QulacsGUISimulator.BrowserUIClient */

/* RecoilRoot */

/* ReferenceLine */

/* ResponsiveContainer */

/* Scatter */

/* SnackbarProvider */

/* Tooltip */

/* XAxis */

/* YAxis */

/* atom */

/* binding */

/* default */

/* import() */

/* nanoid */

/* selector */

/* useDrag */

/* useDrop */

/* useRecoilState */

/* useRecoilValueLoadable */

/* useSetRecoilState */

/* useSnackbar */

/*#__PURE__*/

/******/

/***/

/*require.resolve*/

// CONCATENATED MODULE: ./src/ts/constants/Form.ts

// CONCATENATED MODULE: ./src/ts/constants/GateType.ts

// CONCATENATED MODULE: ./src/ts/expectationValueTab/templates/index.tsx

// CONCATENATED MODULE: ./src/ts/observableTab/molecules/EmptyGate/index.tsx

// CONCATENATED MODULE: ./src/ts/observableTab/organisms/EditObservableCodeDialog/index.tsx

// CONCATENATED MODULE: ./src/ts/observableTab/organisms/FormulaView/index.tsx

// CONCATENATED MODULE: ./src/ts/observableTab/organisms/GateInput/DebouncedInput/index.tsx

// CONCATENATED MODULE: ./src/ts/probabilityDistributionTab/organisms/RunButton/index.tsx

// CONCATENATED MODULE: ./src/ts/quantumCircuitTab/molecules/DroppableMultiGate/index.tsx

// CONCATENATED MODULE: ./src/ts/quantumCircuitTab/molecules/EmptyGate/index.tsx

// CONCATENATED MODULE: ./src/ts/quantumCircuitTab/molecules/QubitGate/index.tsx

// CONCATENATED MODULE: ./src/ts/quantumCircuitTab/organisms/EditCircuitCodeDialog/index.tsx

// CONCATENATED MODULE: ./src/ts/quantumCircuitTab/organisms/EditGateDialog/index.tsx

// CONCATENATED MODULE: ./src/ts/shared/atoms/Gate/index.tsx

// CONCATENATED MODULE: ./src/ts/shared/molecules/DroppableGate/index.tsx

// CONCATENATED MODULE: ./src/ts/shared/molecules/GateLabels/index.tsx

// CONCATENATED MODULE: ./src/ts/shared/providers/CircuitStateProvider/index.tsx

// CONCATENATED MODULE: ./src/ts/shared/providers/ErrorBoudary/index.tsx

// CONCATENATED MODULE: ./src/ts/shared/providers/ObservableStateProvider/index.tsx

// CONCATENATED MODULE: ./src/ts/shared/providers/SimulatorResultProvider/index.tsx

// CONCATENATED MODULE: ./src/ts/stores/appUIState.ts

// CONCATENATED MODULE: ./src/ts/stores/clientState.ts

// CONCATENATED MODULE: ./src/ts/utils/assertion.ts

// CONCATENATED MODULE: ./src/ts/utils/circuiteGateItemsHelper.ts

// CONCATENATED MODULE: ./src/ts/utils/formHelper.ts

// CONCATENATED MODULE: ./src/ts/utils/gateHelper.ts

// CONCATENATED MODULE: ./src/ts/utils/matrixHelper.ts

// CONCATENATED MODULE: ./src/ts/utils/observableGateItemsHelper.ts

// CONCATENATED MODULE: ./src/ts/utils/position.ts

// CONCATENATED MODULE: ./src/ts/utils/react/useDraggableGate.ts

// CONCATENATED MODULE: ./src/ts/utils/react/useDroppableGate.ts

// ESM COMPAT FLAG

// EXPORTS

// EXTERNAL MODULE: ../../node_modules/@mui/icons-material/Add.js

// EXTERNAL MODULE: ../../node_modules/@mui/material/Menu/Menu.js + 7 modules

// EXTERNAL MODULE: ../../node_modules/react/index.js

// EXTERNAL MODULE: ../../node_modules/react/jsx-runtime.js

// EXTERNAL MODULE: ./src/ts/observableTab/organisms/GateComposer/GateComposer.module.scss

// EXTERNAL MODULE: ./src/ts/quantumCircuitTab/molecules/DroppableParametricGate/DroppableParametricGate.module.scss

// EXTERNAL MODULE: ./src/ts/quantumCircuitTab/molecules/EmptyGate/EmptyGate.module.scss

// EXTERNAL MODULE: ./src/ts/templates/Home/Home.module.scss

// NOTE: MultiGateとControllQubitの間には置けない

// NOTE: ciruict側の量子ビット数を合わせる（減算はuseEffectで行われる）

// NOTE: controllQubitの始点から終点までを消す

// NOTE: observable側の量子ビット数を合わせる（減算はuseEffectで行われる）

// NOTE: qubitを消す場合、再帰的にmultigateを消す

// NOTE: 上/下方向（ccnotは両方向）のいずれかに配置できるか確認する

// NOTE: 同列以外はdropできない

// eslint-disable-next-line @typescript-eslint/no-explicit-any

// eslint-disable-next-line no-param-reassign

// eslint-disable-next-line react-hooks/exhaustive-deps

// eslint-disable-next-line react/no-array-index-key

// extracted by mini-css-extract-plugin

// q_xの数が変化したらCircuit側も変更する

// q_xの数が変化したらObservable側も変更する

// 最終列に何らかのGateが配置されていれば列を増やす

// 最終列の１つ前列にすべてEmptyが配置されていれば再帰的に列を減らす
