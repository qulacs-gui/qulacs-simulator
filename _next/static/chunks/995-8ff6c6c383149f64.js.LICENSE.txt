/*
     * The Decimal constructor and exported function.
     * Return a new Decimal instance.
     *
     * value {number|string|Decimal} A numeric value.
     *
     */

/*
     * The `isNumber` check is needed because the user could also provide strings like "dataMin" via the domain props.
     * In such case, we have to compute the domain from the data.
     */

/*
     * This is a hack to short-circuit the domain creation here to enhance performance.
     * Usually, the data is used to determine the domain, but when the user specifies
     * a domain upfront (via props), there is no need to calculate the domain start and end,
     * which is very expensive for a larger amount of data.
     * The only thing that would prohibit short-circuiting is when the user doesn't allow data overflow,
     * because the axis is supposed to ignore the specified domain that way.
     */

/*
   *  absoluteValue                       abs
   *  comparedTo                          cmp
   *  decimalPlaces                       dp
   *  dividedBy                           div
   *  dividedToIntegerBy                  idiv
   *  equals                              eq
   *  exponent
   *  greaterThan                         gt
   *  greaterThanOrEqualTo                gte
   *  isInteger                           isint
   *  isNegative                          isneg
   *  isPositive                          ispos
   *  isZero
   *  lessThan                            lt
   *  lessThanOrEqualTo                   lte
   *  logarithm                           log
   *  minus                               sub
   *  modulo                              mod
   *  naturalExponential                  exp
   *  naturalLogarithm                    ln
   *  negated                             neg
   *  plus                                add
   *  precision                           sd
   *  squareRoot                          sqrt
   *  times                               mul
   *  toDecimalPlaces                     todp
   *  toExponential
   *  toFixed
   *  toInteger                           toint
   *  toNumber
   *  toPower                             pow
   *  toPrecision
   *  toSignificantDigits                 tosd
   *  toString
   *  valueOf                             val
   */

/*
   *  add                 P.minus, P.plus
   *  checkInt32          P.todp, P.toExponential, P.toFixed, P.toPrecision, P.tosd
   *  digitsToString      P.log, P.sqrt, P.pow, toString, exp, ln
   *  divide              P.div, P.idiv, P.log, P.mod, P.sqrt, exp, ln
   *  exp                 P.exp, P.pow
   *  getBase10Exponent   P.exponent, P.sd, P.toint, P.sqrt, P.todp, P.toFixed, P.toPrecision,
   *                      P.toString, divide, round, toString, exp, ln
   *  getLn10             P.log, ln
   *  getZeroString       digitsToString, toString
   *  ln                  P.log, P.ln, P.pow, exp
   *  parseDecimal        Decimal
   *  round               P.abs, P.idiv, P.log, P.minus, P.mod, P.neg, P.plus, P.toint, P.sqrt,
   *                      P.times, P.todp, P.toExponential, P.toFixed, P.pow, P.toPrecision, P.tosd,
   *                      divide, getLn10, exp, ln
   *  subtract            P.minus, P.plus
   *  toString            P.toExponential, P.toFixed, P.toPrecision, P.toString, P.valueOf
   *  truncate            P.pow
   *
   *  Throws:             P.log, P.mod, P.sd, P.sqrt, P.pow,  checkInt32, divide, round,
   *                      getLn10, exp, ln, parseDecimal, Decimal, config
   */

/*
   *  clone
   *  config/set
   */

/*
   *  decimal.js-light v2.5.1
   *  An arbitrary-precision Decimal type for JavaScript.
   *  https://github.com/MikeMcl/decimal.js-light
   *  Copyright (c) 2020 Michael Mclaughlin <M8ch88l@gmail.com>
   *  MIT Expat Licence
   */

/*
   * Configure global settings for a Decimal constructor.
   *
   * `obj` is an object with one or more of the following properties,
   *
   *   precision  {number}
   *   rounding   {number}
   *   toExpNeg   {number}
   *   toExpPos   {number}
   *
   * E.g. Decimal.config({ precision: 20, rounding: 4 })
   *
   */

/*
   * Create and return a Decimal constructor with the same configuration properties as this Decimal
   * constructor.
   *
   */

/*
   * Parse the value of a new Decimal `x` from string `str`.
   */

/*
   * Return
   *   1    if the value of this Decimal is greater than the value of `y`,
   *  -1    if the value of this Decimal is less than the value of `y`,
   *   0    if they have the same value
   *
   */

/*
   * Return a new Decimal whose value is the absolute value of this Decimal.
   *
   */

/*
   * Return a new Decimal whose value is the integer part of dividing the value of this Decimal
   * by the value of `y`, truncated to `precision` significant digits.
   *
   */

/*
   * Return a new Decimal whose value is the natural exponential of `x` truncated to `sd`
   * significant digits.
   *
   * Taylor/Maclaurin series.
   *
   * exp(x) = x^0/0! + x^1/1! + x^2/2! + x^3/3! + ...
   *
   * Argument reduction:
   *   Repeat x = x / 32, k += 5, until |x| < 0.1
   *   exp(x) = exp(x / 2^k)^(2^k)
   *
   * Previously, the argument was initially reduced by
   * exp(x) = exp(r) * 10^k  where r = x - k * ln10, k = floor(x / ln10)
   * to first put r in the range [0, ln10], before dividing by 32 until |x| < 0.1, but this was
   * found to be slower than just dividing repeatedly by 32 as above.
   *
   * (Math object integer min/max: Math.exp(709) = 8.2e+307, Math.exp(-745) = 5e-324)
   *
   *  exp(x) is non-terminating for any finite, non-zero x.
   *
   */

/*
   * Return a new Decimal whose value is the natural exponential of the value of this Decimal,
   * i.e. the base e raised to the power the value of this Decimal, truncated to `precision`
   * significant digits.
   *
   */

/*
   * Return a new Decimal whose value is the natural logarithm of `x` truncated to `sd` significant
   * digits.
   *
   *  ln(n) is non-terminating (n != 1)
   *
   */

/*
   * Return a new Decimal whose value is the natural logarithm of the value of this Decimal,
   * truncated to `precision` significant digits.
   *
   */

/*
   * Return a new Decimal whose value is the square root of this Decimal, truncated to `precision`
   * significant digits.
   *
   */

/*
   * Return a new Decimal whose value is the value of this Decimal divided by `y`, truncated to
   * `precision` significant digits.
   *
   */

/*
   * Return a new Decimal whose value is the value of this Decimal minus `y`, truncated to
   * `precision` significant digits.
   *
   */

/*
   * Return a new Decimal whose value is the value of this Decimal modulo `y`, truncated to
   * `precision` significant digits.
   *
   */

/*
   * Return a new Decimal whose value is the value of this Decimal negated, i.e. as if multiplied by
   * -1.
   *
   */

/*
   * Return a new Decimal whose value is the value of this Decimal plus `y`, truncated to
   * `precision` significant digits.
   *
   */

/*
   * Return a new Decimal whose value is the value of this Decimal raised to the power `y`,
   * truncated to `precision` significant digits.
   *
   * For non-integer or very large exponents pow(x, y) is calculated using
   *
   *   x^y = exp(y*ln(x))
   *
   * The maximum error is 1 ulp (unit in last place).
   *
   * y {number|string|Decimal} The power to which to raise this Decimal.
   *
   */

/*
   * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `dp`
   * decimal places using rounding mode `rm` or `rounding` if `rm` is omitted.
   *
   * If `dp` is omitted, return a new Decimal whose value is the value of this Decimal.
   *
   * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.
   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
   *
   */

/*
   * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `sd`
   * significant digits using rounding mode `rm`, or to `precision` and `rounding` respectively if
   * omitted.
   *
   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.
   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
   *
   */

/*
   * Return a new Decimal whose value is the value of this Decimal rounded to a whole number using
   * rounding mode `rounding`.
   *
   */

/*
   * Return a new Decimal whose value is the value of this Decimal times `y`, truncated to
   * `precision` significant digits.
   *
   */

/*
   * Return a string representing the value of this Decimal in exponential notation rounded to
   * `dp` fixed decimal places using rounding mode `rounding`.
   *
   * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.
   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
   *
   */

/*
   * Return a string representing the value of this Decimal in normal (fixed-point) notation to
   * `dp` fixed decimal places and rounded using rounding mode `rm` or `rounding` if `rm` is
   * omitted.
   *
   * As with JavaScript numbers, (-0).toFixed(0) is '0', but e.g. (-0.00001).toFixed(0) is '-0'.
   *
   * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.
   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
   *
   * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.
   * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.
   * (-0).toFixed(3) is '0.000'.
   * (-0.5).toFixed(0) is '-0'.
   *
   */

/*
   * Return a string representing the value of this Decimal rounded to `sd` significant digits
   * using rounding mode `rounding`.
   *
   * Return exponential notation if `sd` is less than the number of digits necessary to represent
   * the integer part of the value in normal notation.
   *
   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.
   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
   *
   */

/*
   * Return a string representing the value of this Decimal.
   *
   * Return exponential notation if this Decimal has a positive exponent equal to or greater than
   * `toExpPos`, or a negative exponent equal to or less than `toExpNeg`.
   *
   */

/*
   * Return the (base 10) exponent value of this Decimal (this.e is the base 10000000 exponent).
   *
   */

/*
   * Return the logarithm of the value of this Decimal to the specified base, truncated to
   * `precision` significant digits.
   *
   * If no base is specified, return log[10](x).
   *
   * log[base](x) = ln(x) / ln(base)
   *
   * The maximum error of the result is 1 ulp (unit in the last place).
   *
   * [base] {number|string|Decimal} The base of the logarithm.
   *
   */

/*
   * Return the number of decimal places of the value of this Decimal.
   *
   */

/*
   * Return the number of significant digits of the value of this Decimal.
   *
   * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.
   *
   */

/*
   * Return the value of this Decimal converted to a number primitive.
   *
   */

/*
   * Return true if the value of this Decimal is 0, otherwise return false.
   *
   */

/*
   * Return true if the value of this Decimal is an integer, otherwise return false.
   *
   */

/*
   * Return true if the value of this Decimal is equal to the value of `y`, otherwise return false.
   *
   */

/*
   * Return true if the value of this Decimal is greater than or equal to the value of `y`,
   * otherwise return false.
   *
   */

/*
   * Return true if the value of this Decimal is greater than the value of `y`, otherwise return
   * false.
   *
   */

/*
   * Return true if the value of this Decimal is less than `y`, otherwise return false.
   *
   */

/*
   * Return true if the value of this Decimal is less than or equal to `y`, otherwise return false.
   *
   */

/*
   * Return true if the value of this Decimal is negative, otherwise return false.
   *
   */

/*
   * Return true if the value of this Decimal is positive, otherwise return false.
   *
   */

/*
   * Round `x` to `sd` significant digits, using rounding mode `rm` if present (truncate otherwise).
   */

/*
 * Create a new array of children excluding the ones matched the type
 */

/*
 * Find and return all matched children by type.
 * `type` must be a React.ComponentType
 */

/*
 * Return the first matched child by type, return null otherwise.
 * `type` must be a React.ComponentType
 */

/*
 * Returns a Lexer object of the following structure:
 *
 *  Lexer: {
 *    yy: {}     The so-called "shared state" or rather the *source* of it;
 *               the real "shared state" `yy` passed around to
 *               the rule actions, etc. is a direct reference!
 *
 *               This "shared context" object was passed to the lexer by way of 
 *               the `lexer.setInput(str, yy)` API before you may use it.
 *
 *               This "shared context" object is passed to the lexer action code in `performAction()`
 *               so userland code in the lexer actions may communicate with the outside world 
 *               and/or other lexer rules' actions in more or less complex ways.
 *
 *  }
 *
 *  Lexer.prototype: {
 *    EOF: 1,
 *    ERROR: 2,
 *
 *    yy:        The overall "shared context" object reference.
 *
 *    JisonLexerError: function(msg, hash),
 *
 *    performAction: function lexer__performAction(yy, yyrulenumber, YY_START),
 *
 *               The function parameters and `this` have the following value/meaning:
 *               - `this`    : reference to the `lexer` instance. 
 *                               `yy_` is an alias for `this` lexer instance reference used internally.
 *
 *               - `yy`      : a reference to the `yy` "shared state" object which was passed to the lexer
 *                             by way of the `lexer.setInput(str, yy)` API before.
 *
 *                             Note:
 *                             The extra arguments you specified in the `%parse-param` statement in your
 *                             **parser** grammar definition file are passed to the lexer via this object
 *                             reference as member variables.
 *
 *               - `yyrulenumber`   : index of the matched lexer rule (regex), used internally.
 *
 *               - `YY_START`: the current lexer "start condition" state.
 *
 *    parseError: function(str, hash, ExceptionClass),
 *
 *    constructLexErrorInfo: function(error_message, is_recoverable),
 *               Helper function.
 *               Produces a new errorInfo 'hash object' which can be passed into `parseError()`.
 *               See it's use in this lexer kernel in many places; example usage:
 *
 *                   var infoObj = lexer.constructParseErrorInfo('fail!', true);
 *                   var retVal = lexer.parseError(infoObj.errStr, infoObj, lexer.JisonLexerError);
 *
 *    options: { ... lexer %options ... },
 *
 *    lex: function(),
 *               Produce one token of lexed input, which was passed in earlier via the `lexer.setInput()` API.
 *               You MAY use the additional `args...` parameters as per `%parse-param` spec of the **lexer** grammar:
 *               these extra `args...` are added verbatim to the `yy` object reference as member variables.
 *
 *               WARNING:
 *               Lexer's additional `args...` parameters (via lexer's `%parse-param`) MAY conflict with
 *               any attributes already added to `yy` by the **parser** or the jison run-time; 
 *               when such a collision is detected an exception is thrown to prevent the generated run-time 
 *               from silently accepting this confusing and potentially hazardous situation! 
 *
 *    cleanupAfterLex: function(do_not_nuke_errorinfos),
 *               Helper function.
 *
 *               This helper API is invoked when the **parse process** has completed: it is the responsibility
 *               of the **parser** (or the calling userland code) to invoke this method once cleanup is desired. 
 *
 *               This helper may be invoked by user code to ensure the internal lexer gets properly garbage collected.
 *
 *    setInput: function(input, [yy]),
 *
 *
 *    input: function(),
 *
 *
 *    unput: function(str),
 *
 *
 *    more: function(),
 *
 *
 *    reject: function(),
 *
 *
 *    less: function(n),
 *
 *
 *    pastInput: function(n),
 *
 *
 *    upcomingInput: function(n),
 *
 *
 *    showPosition: function(),
 *
 *
 *    test_match: function(regex_match_array, rule_index),
 *
 *
 *    next: function(),
 *
 *
 *    begin: function(condition),
 *
 *
 *    pushState: function(condition),
 *
 *
 *    popState: function(),
 *
 *
 *    topState: function(),
 *
 *
 *    _currentRules: function(),
 *
 *
 *    stateStackSize: function(),
 *
 *
 *    performAction: function(yy, yy_, yyrulenumber, YY_START),
 *
 *
 *    rules: [...],
 *
 *
 *    conditions: {associative list: name ==> set},
 *  }
 *
 *
 *  token location info (`yylloc`): {
 *    first_line: n,
 *    last_line: n,
 *    first_column: n,
 *    last_column: n,
 *    range: [start_number, end_number]
 *               (where the numbers are indexes into the input string, zero-based)
 *  }
 *
 * ---
 *
 * The `parseError` function receives a 'hash' object with these members for lexer errors:
 *
 *  {
 *    text:        (matched text)
 *    token:       (the produced terminal token, if any)
 *    token_id:    (the produced terminal token numeric ID, if any)
 *    line:        (yylineno)
 *    loc:         (yylloc)
 *    recoverable: (boolean: TRUE when the parser MAY have an error recovery rule
 *                  available for this particular error)
 *    yy:          (object: the current parser internal "shared state" `yy`
 *                  as is also available in the rule actions; this can be used,
 *                  for instance, for advanced error analysis and reporting)
 *    lexer:       (reference to the current lexer instance used by the parser)
 *  }
 *
 * while `this` will reference the current lexer instance.
 *
 * When `parseError` is invoked by the lexer, the default implementation will
 * attempt to invoke `yy.parser.parseError()`; when this callback is not provided
 * it will try to invoke `yy.parseError()` instead. When that callback is also not
 * provided, a `JisonLexerError` exception will be thrown containing the error
 * message and `hash`, as constructed by the `constructLexErrorInfo()` API.
 *
 * Note that the lexer's `JisonLexerError` error class is passed via the
 * `ExceptionClass` argument, which is invoked to construct the exception
 * instance to be thrown, so technically `parseError` will throw the object
 * produced by the `new ExceptionClass(str, hash)` JavaScript expression.
 *
 * ---
 *
 * You can specify lexer options by setting / modifying the `.options` object of your Lexer instance.
 * These options are available:
 *
 * (Options are permanent.)
 *  
 *  yy: {
 *      parseError: function(str, hash, ExceptionClass)
 *                 optional: overrides the default `parseError` function.
 *  }
 *
 *  lexer.options: {
 *      pre_lex:  function()
 *                 optional: is invoked before the lexer is invoked to produce another token.
 *                 `this` refers to the Lexer object.
 *      post_lex: function(token) { return token; }
 *                 optional: is invoked when the lexer has produced a token `token`;
 *                 this function can override the returned token value by returning another.
 *                 When it does not return any (truthy) value, the lexer will return
 *                 the original `token`.
 *                 `this` refers to the Lexer object.
 *
 * WARNING: the next set of options are not meant to be changed. They echo the abilities of
 * the lexer as per when it was compiled!
 *
 *      ranges: boolean
 *                 optional: `true` ==> token location info will include a .range[] member.
 *      flex: boolean
 *                 optional: `true` ==> flex-like lexing behaviour where the rules are tested
 *                 exhaustively to find the longest match.
 *      backtrack_lexer: boolean
 *                 optional: `true` ==> lexer regexes are tested in order and for invoked;
 *                 the lexer terminates the scan when a token is returned by the action code.
 *      xregexp: boolean
 *                 optional: `true` ==> lexer rule regexes are "extended regex format" requiring the
 *                 `XRegExp` library. When this %option has not been specified at compile time, all lexer
 *                 rule regexes have been written as standard JavaScript RegExp expressions.
 *  }
 */

/*
 * Returns a Parser object of the following structure:
 *
 *  Parser: {
 *    yy: {}     The so-called "shared state" or rather the *source* of it;
 *               the real "shared state" `yy` passed around to
 *               the rule actions, etc. is a derivative/copy of this one,
 *               not a direct reference!
 *  }
 *
 *  Parser.prototype: {
 *    yy: {},
 *    EOF: 1,
 *    TERROR: 2,
 *
 *    trace: function(errorMessage, ...),
 *
 *    JisonParserError: function(msg, hash),
 *
 *    quoteName: function(name),
 *               Helper function which can be overridden by user code later on: put suitable
 *               quotes around literal IDs in a description string.
 *
 *    originalQuoteName: function(name),
 *               The basic quoteName handler provided by JISON.
 *               `cleanupAfterParse()` will clean up and reset `quoteName()` to reference this function
 *               at the end of the `parse()`.
 *
 *    describeSymbol: function(symbol),
 *               Return a more-or-less human-readable description of the given symbol, when
 *               available, or the symbol itself, serving as its own 'description' for lack
 *               of something better to serve up.
 *
 *               Return NULL when the symbol is unknown to the parser.
 *
 *    symbols_: {associative list: name ==> number},
 *    terminals_: {associative list: number ==> name},
 *    nonterminals: {associative list: rule-name ==> {associative list: number ==> rule-alt}},
 *    terminal_descriptions_: (if there are any) {associative list: number ==> description},
 *    productions_: [...],
 *
 *    performAction: function parser__performAction(yytext, yyleng, yylineno, yyloc, yystate, yysp, yyvstack, yylstack, yystack, yysstack),
 *
 *               The function parameters and `this` have the following value/meaning:
 *               - `this`    : reference to the `yyval` internal object, which has members (`$` and `_$`)
 *                             to store/reference the rule value `$$` and location info `@$`.
 *
 *                 One important thing to note about `this` a.k.a. `yyval`: every *reduce* action gets
 *                 to see the same object via the `this` reference, i.e. if you wish to carry custom
 *                 data from one reduce action through to the next within a single parse run, then you
 *                 may get nasty and use `yyval` a.k.a. `this` for storing you own semi-permanent data.
 *
 *                 `this.yy` is a direct reference to the `yy` shared state object.
 *
 *                 `%parse-param`-specified additional `parse()` arguments have been added to this `yy`
 *                 object at `parse()` start and are therefore available to the action code via the
 *                 same named `yy.xxxx` attributes (where `xxxx` represents a identifier name from
 *                 the %parse-param` list.
 *
 *               - `yytext`  : reference to the lexer value which belongs to the last lexer token used
 *                             to match this rule. This is *not* the look-ahead token, but the last token
 *                             that's actually part of this rule.
 *
 *                 Formulated another way, `yytext` is the value of the token immediately preceeding
 *                 the current look-ahead token.
 *                 Caveats apply for rules which don't require look-ahead, such as epsilon rules.
 *
 *               - `yyleng`  : ditto as `yytext`, only now for the lexer.yyleng value.
 *
 *               - `yylineno`: ditto as `yytext`, only now for the lexer.yylineno value.
 *
 *               - `yyloc`   : ditto as `yytext`, only now for the lexer.yylloc lexer token location info.
 *
 *                               WARNING: since jison 0.4.18-186 this entry may be NULL/UNDEFINED instead
 *                               of an empty object when no suitable location info can be provided.
 *
 *               - `yystate` : the current parser state number, used internally for dispatching and
 *                               executing the action code chunk matching the rule currently being reduced.
 *
 *               - `yysp`    : the current state stack position (a.k.a. 'stack pointer')
 *
 *                 This one comes in handy when you are going to do advanced things to the parser
 *                 stacks, all of which are accessible from your action code (see the next entries below).
 *
 *                 Also note that you can access this and other stack index values using the new double-hash
 *                 syntax, i.e. `##$ === ##0 === yysp`, while `##1` is the stack index for all things
 *                 related to the first rule term, just like you have `$1`, `@1` and `#1`.
 *                 This is made available to write very advanced grammar action rules, e.g. when you want
 *                 to investigate the parse state stack in your action code, which would, for example,
 *                 be relevant when you wish to implement error diagnostics and reporting schemes similar
 *                 to the work described here:
 *
 *                 + Pottier, F., 2016. Reachability and error diagnosis in LR(1) automata.
 *                   In Journées Francophones des Languages Applicatifs.
 *
 *                 + Jeffery, C.L., 2003. Generating LR syntax error messages from examples.
 *                   ACM Transactions on Programming Languages and Systems (TOPLAS), 25(5), pp.631–640.
 *
 *               - `yyrulelength`: the current rule's term count, i.e. the number of entries occupied on the stack.
 *
 *                 This one comes in handy when you are going to do advanced things to the parser
 *                 stacks, all of which are accessible from your action code (see the next entries below).
 *
 *               - `yyvstack`: reference to the parser value stack. Also accessed via the `$1` etc.
 *                             constructs.
 *
 *               - `yylstack`: reference to the parser token location stack. Also accessed via
 *                             the `@1` etc. constructs.
 *
 *                             WARNING: since jison 0.4.18-186 this array MAY contain slots which are
 *                             UNDEFINED rather than an empty (location) object, when the lexer/parser
 *                             action code did not provide a suitable location info object when such a
 *                             slot was filled!
 *
 *               - `yystack` : reference to the parser token id stack. Also accessed via the
 *                             `#1` etc. constructs.
 *
 *                 Note: this is a bit of a **white lie** as we can statically decode any `#n` reference to
 *                 its numeric token id value, hence that code wouldn't need the `yystack` but *you* might
 *                 want access this array for your own purposes, such as error analysis as mentioned above!
 *
 *                 Note that this stack stores the current stack of *tokens*, that is the sequence of
 *                 already parsed=reduced *nonterminals* (tokens representing rules) and *terminals*
 *                 (lexer tokens *shifted* onto the stack until the rule they belong to is found and
 *                 *reduced*.
 *
 *               - `yysstack`: reference to the parser state stack. This one carries the internal parser
 *                             *states* such as the one in `yystate`, which are used to represent
 *                             the parser state machine in the *parse table*. *Very* *internal* stuff,
 *                             what can I say? If you access this one, you're clearly doing wicked things
 *
 *               - `...`     : the extra arguments you specified in the `%parse-param` statement in your
 *                             grammar definition file.
 *
 *    table: [...],
 *               State transition table
 *               ----------------------
 *
 *               index levels are:
 *               - `state`  --> hash table
 *               - `symbol` --> action (number or array)
 *
 *                 If the `action` is an array, these are the elements' meaning:
 *                 - index [0]: 1 = shift, 2 = reduce, 3 = accept
 *                 - index [1]: GOTO `state`
 *
 *                 If the `action` is a number, it is the GOTO `state`
 *
 *    defaultActions: {...},
 *
 *    parseError: function(str, hash, ExceptionClass),
 *    yyError: function(str, ...),
 *    yyRecovering: function(),
 *    yyErrOk: function(),
 *    yyClearIn: function(),
 *
 *    constructParseErrorInfo: function(error_message, exception_object, expected_token_set, is_recoverable),
 *               Helper function **which will be set up during the first invocation of the `parse()` method**.
 *               Produces a new errorInfo 'hash object' which can be passed into `parseError()`.
 *               See it's use in this parser kernel in many places; example usage:
 *
 *                   var infoObj = parser.constructParseErrorInfo('fail!', null,
 *                                     parser.collect_expected_token_set(state), true);
 *                   var retVal = parser.parseError(infoObj.errStr, infoObj, parser.JisonParserError);
 *
 *    originalParseError: function(str, hash, ExceptionClass),
 *               The basic `parseError` handler provided by JISON.
 *               `cleanupAfterParse()` will clean up and reset `parseError()` to reference this function
 *               at the end of the `parse()`.
 *
 *    options: { ... parser %options ... },
 *
 *    parse: function(input[, args...]),
 *               Parse the given `input` and return the parsed value (or `true` when none was provided by
 *               the root action, in which case the parser is acting as a *matcher*).
 *               You MAY use the additional `args...` parameters as per `%parse-param` spec of this grammar:
 *               these extra `args...` are added verbatim to the `yy` object reference as member variables.
 *
 *               WARNING:
 *               Parser's additional `args...` parameters (via `%parse-param`) MAY conflict with
 *               any attributes already added to `yy` by the jison run-time;
 *               when such a collision is detected an exception is thrown to prevent the generated run-time
 *               from silently accepting this confusing and potentially hazardous situation!
 *
 *               The lexer MAY add its own set of additional parameters (via the `%parse-param` line in
 *               the lexer section of the grammar spec): these will be inserted in the `yy` shared state
 *               object and any collision with those will be reported by the lexer via a thrown exception.
 *
 *    cleanupAfterParse: function(resultValue, invoke_post_methods, do_not_nuke_errorinfos),
 *               Helper function **which will be set up during the first invocation of the `parse()` method**.
 *               This helper API is invoked at the end of the `parse()` call, unless an exception was thrown
 *               and `%options no-try-catch` has been defined for this grammar: in that case this helper MAY
 *               be invoked by calling user code to ensure the `post_parse` callbacks are invoked and
 *               the internal parser gets properly garbage collected under these particular circumstances.
 *
 *    yyMergeLocationInfo: function(first_index, last_index, first_yylloc, last_yylloc, dont_look_back),
 *               Helper function **which will be set up during the first invocation of the `parse()` method**.
 *               This helper API can be invoked to calculate a spanning `yylloc` location info object.
 *
 *               Note: %epsilon rules MAY specify no `first_index` and `first_yylloc`, in which case
 *               this function will attempt to obtain a suitable location marker by inspecting the location stack
 *               backwards.
 *
 *               For more info see the documentation comment further below, immediately above this function's
 *               implementation.
 *
 *    lexer: {
 *        yy: {...},           A reference to the so-called "shared state" `yy` once
 *                             received via a call to the `.setInput(input, yy)` lexer API.
 *        EOF: 1,
 *        ERROR: 2,
 *        JisonLexerError: function(msg, hash),
 *        parseError: function(str, hash, ExceptionClass),
 *        setInput: function(input, [yy]),
 *        input: function(),
 *        unput: function(str),
 *        more: function(),
 *        reject: function(),
 *        less: function(n),
 *        pastInput: function(n),
 *        upcomingInput: function(n),
 *        showPosition: function(),
 *        test_match: function(regex_match_array, rule_index, ...),
 *        next: function(...),
 *        lex: function(...),
 *        begin: function(condition),
 *        pushState: function(condition),
 *        popState: function(),
 *        topState: function(),
 *        _currentRules: function(),
 *        stateStackSize: function(),
 *        cleanupAfterLex: function()
 *
 *        options: { ... lexer %options ... },
 *
 *        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START, ...),
 *        rules: [...],
 *        conditions: {associative list: name ==> set},
 *    }
 *  }
 *
 *
 *  token location info (@$, _$, etc.): {
 *    first_line: n,
 *    last_line: n,
 *    first_column: n,
 *    last_column: n,
 *    range: [start_number, end_number]
 *               (where the numbers are indexes into the input string, zero-based)
 *  }
 *
 * ---
 *
 * The `parseError` function receives a 'hash' object with these members for lexer and
 * parser errors:
 *
 *  {
 *    text:        (matched text)
 *    token:       (the produced terminal token, if any)
 *    token_id:    (the produced terminal token numeric ID, if any)
 *    line:        (yylineno)
 *    loc:         (yylloc)
 *  }
 *
 * parser (grammar) errors will also provide these additional members:
 *
 *  {
 *    expected:    (array describing the set of expected tokens;
 *                  may be UNDEFINED when we cannot easily produce such a set)
 *    state:       (integer (or array when the table includes grammar collisions);
 *                  represents the current internal state of the parser kernel.
 *                  can, for example, be used to pass to the `collect_expected_token_set()`
 *                  API to obtain the expected token set)
 *    action:      (integer; represents the current internal action which will be executed)
 *    new_state:   (integer; represents the next/planned internal state, once the current
 *                  action has executed)
 *    recoverable: (boolean: TRUE when the parser MAY have an error recovery rule
 *                  available for this particular error)
 *    state_stack: (array: the current parser LALR/LR internal state stack; this can be used,
 *                  for instance, for advanced error analysis and reporting)
 *    value_stack: (array: the current parser LALR/LR internal `$$` value stack; this can be used,
 *                  for instance, for advanced error analysis and reporting)
 *    location_stack: (array: the current parser LALR/LR internal location stack; this can be used,
 *                  for instance, for advanced error analysis and reporting)
 *    yy:          (object: the current parser internal "shared state" `yy`
 *                  as is also available in the rule actions; this can be used,
 *                  for instance, for advanced error analysis and reporting)
 *    lexer:       (reference to the current lexer instance used by the parser)
 *    parser:      (reference to the current parser instance)
 *  }
 *
 * while `this` will reference the current parser instance.
 *
 * When `parseError` is invoked by the lexer, `this` will still reference the related *parser*
 * instance, while these additional `hash` fields will also be provided:
 *
 *  {
 *    lexer:       (reference to the current lexer instance which reported the error)
 *  }
 *
 * When `parseError` is invoked by the parser due to a **JavaScript exception** being fired
 * from either the parser or lexer, `this` will still reference the related *parser*
 * instance, while these additional `hash` fields will also be provided:
 *
 *  {
 *    exception:   (reference to the exception thrown)
 *  }
 *
 * Please do note that in the latter situation, the `expected` field will be omitted as
 * this type of failure is assumed not to be due to *parse errors* but rather due to user
 * action code in either parser or lexer failing unexpectedly.
 *
 * ---
 *
 * You can specify parser options by setting / modifying the `.yy` object of your Parser instance.
 * These options are available:
 *
 * ### options which are global for all parser instances
 *
 *  Parser.pre_parse: function(yy)
 *                 optional: you can specify a pre_parse() function in the chunk following
 *                 the grammar, i.e. after the last `%%`.
 *  Parser.post_parse: function(yy, retval, parseInfo) { return retval; }
 *                 optional: you can specify a post_parse() function in the chunk following
 *                 the grammar, i.e. after the last `%%`. When it does not return any value,
 *                 the parser will return the original `retval`.
 *
 * ### options which can be set up per parser instance
 *
 *  yy: {
 *      pre_parse:  function(yy)
 *                 optional: is invoked before the parse cycle starts (and before the first
 *                 invocation of `lex()`) but immediately after the invocation of
 *                 `parser.pre_parse()`).
 *      post_parse: function(yy, retval, parseInfo) { return retval; }
 *                 optional: is invoked when the parse terminates due to success ('accept')
 *                 or failure (even when exceptions are thrown).
 *                 `retval` contains the return value to be produced by `Parser.parse()`;
 *                 this function can override the return value by returning another.
 *                 When it does not return any value, the parser will return the original
 *                 `retval`.
 *                 This function is invoked immediately before `parser.post_parse()`.
 *
 *      parseError: function(str, hash, ExceptionClass)
 *                 optional: overrides the default `parseError` function.
 *      quoteName: function(name),
 *                 optional: overrides the default `quoteName` function.
 *  }
 *
 *  parser.lexer.options: {
 *      pre_lex:  function()
 *                 optional: is invoked before the lexer is invoked to produce another token.
 *                 `this` refers to the Lexer object.
 *      post_lex: function(token) { return token; }
 *                 optional: is invoked when the lexer has produced a token `token`;
 *                 this function can override the returned token value by returning another.
 *                 When it does not return any (truthy) value, the lexer will return
 *                 the original `token`.
 *                 `this` refers to the Lexer object.
 *
 *      ranges: boolean
 *                 optional: `true` ==> token location info will include a .range[] member.
 *      flex: boolean
 *                 optional: `true` ==> flex-like lexing behaviour where the rules are tested
 *                 exhaustively to find the longest match.
 *      backtrack_lexer: boolean
 *                 optional: `true` ==> lexer regexes are tested in order and for invoked;
 *                 the lexer terminates the scan when a token is returned by the action code.
 *      xregexp: boolean
 *                 optional: `true` ==> lexer rule regexes are "extended regex format" requiring the
 *                 `XRegExp` library. When this `%option` has not been specified at compile time, all lexer
 *                 rule regexes have been written as standard JavaScript RegExp expressions.
 *  }
 */

/*
 * removed 'type' SVGElementPropKey because we do not currently use any SVG elements
 * that can use it and it conflicts with the recharts prop 'type'
 * https://github.com/recharts/recharts/pull/3327
 * https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/type
 */

/*
 TODO v6: remove
 Conditionally apply a workaround for the CSS transition bug in Safari 15.4 / WebKit browsers.
 */

/*
given a DOM element, return the list of all scroll parents, up the list of ancesors
until we get to the top window object. This list is what we attach scroll listeners
to, because if any of these parent elements scroll, we'll need to re-calculate the
reference element's position.
*/

/*  0: */

/*  1: */

/*  2: */

/*  3: */

/*  4: */

/*  5: */

/*  6: */

/*  7: */

/*  8: */

/*  9: */

/* #__PURE__ */

/* . */

/* .Bar */

/* .Cell */

/* .Curve */

/* .DndContext */

/* .Dot */

/* .ErrorBar */

/* .EventKeys.includes */

/* .FilteredElementKeyMap */

/* .Global.isSsr */

/* .Label */

/* .Label.parseViewBox */

/* .Label.renderCallByParent */

/* .LabelList.renderCallByParent */

/* .Layer */

/* .Rectangle */

/* .SVGElementPropKeys.includes */

/* .Symbols */

/* .Text */

/* .XAxis */

/* .YAxis */

/* .ZAxis.defaultProps.range */

/* .adaptEventHandlers */

/* .adaptEventsOfChild */

/* .checkDomainOfScale */

/* .createLabeledScales */

/* .filterProps */

/* .findAllByType */

/* .findChildByType */

/* .findPositionOfBar */

/* .formatAxisMap */

/* .generateCategoricalChart */

/* .getBandSizeOfAxis */

/* .getBaseValueOfBar */

/* .getCateCoordinateOfBar */

/* .getCateCoordinateOfLine */

/* .getDialogTitleUtilityClass */

/* .getLinearRegression */

/* .getPercentValue */

/* .getStringSize */

/* .getTicksOfScale */

/* .getTooltipItem */

/* .getTransitionProps */

/* .getValueByDataKey */

/* .ifOverflowMatches */

/* .insertStyles */

/* .interpolateNumber */

/* .invariant */

/* .isNumOrStr */

/* .isNumber */

/* .isPercent */

/* .mathSign */

/* .parseScale */

/* .polarToCartesian */

/* .rectWithCoords */

/* .reflow */

/* .serializeStyles */

/* .shallowEqual */

/* .truncateByDomain */

/* .uniqueId */

/* .useInsertionEffectWithLayoutFallback */

/* .warn */

/* 10: */

/* 11: */

/* 12: */

/* 13: */

/* 14: */

/* 15: */

/* 16: */

/* 17: */

/* 18: */

/* 19: */

/* 20: */

/* 21: */

/* 22: */

/* 23: */

/* 24: */

/* 25: */

/* 26: */

/* 27: */

/* 28: */

/* 29: */

/* 30: */

/* 31: */

/* 32: */

/* 33: */

/* 34: */

/* 35: */

/* 36: */

/* 37: */

/* 38: */

/* 39: */

/* = YY_START */

/* = width / sqrt(2) = (length of the hypotenuse) */

/* === table.length :: ensures that anyone using this new state will fail dramatically! */

/* Bar */

/* Built-in method references for those with the same name as other `lodash` methods. */

/* Built-in method references that are verified to be native. */

/* Curve */

/* DndContext.Provider */

/* Dot */

/* ErrorBar */

/* From FvD 13.37, CSS Color Module Level 3 */

/* Global */

/* Global.isSsr */

/* InputBaseComponent */

/* InputBaseRoot */

/* Label.renderCallByParent */

/* LabelList.renderCallByParent */

/* Layer */

/* Legend */

/* Legend.getWithHeight */

/* Line */

/* Node.js helper references. */

/* RADIAN */

/* Rectangle */

/* ReferenceLine */

/* Scatter */

/* Surface */

/* Symbols */

/* Text */

/* Tooltip */

/* TouchRipple is only needed client-side, x2 boost on the server. */

/* XAxis */

/* YAxis */

/* Z+1 */

/* ZAxis */

/* ["default"] */

/* ["default"].generate */

/* ["default"].muiName */

/* action[1] */

/* adaptEventHandlers */

/* adaptEventsOfChild */

/* alpha */

/* appendOffsetOfLegend */

/* binding */

/* calculateActiveTickIndex */

/* calculateChartCoordinate */

/* combineEventHandlers */

/* createLabeledScales */

/* darken */

/* default */

/* default.Provider */

/* default.configure */

/* default.disabled */

/* default.formControl */

/* default.root */

/* duration.standard */

/* emphasize */

/* eslint no-console: 0 */

/* eslint-disable  no-underscore-dangle */

/* eslint-disable  react/no-did-mount-set-state */

/* eslint-disable consistent-return, jsx-a11y/no-noninteractive-tabindex */

/* eslint-disable import/prefer-default-export */

/* eslint-disable no-restricted-globals, @typescript-eslint/ban-ts-comment, @typescript-eslint/no-unused-vars, @typescript-eslint/no-non-null-assertion */

/* eslint-disable no-restricted-syntax */

/* eslint-disable no-underscore-dangle */

/* eslint-disable no-unused-expressions */

/* eslint-disable no-use-before-define */

/* eslint-disable prefer-destructuring */

/* eslint-disable react-hooks/rules-of-hooks, react-hooks/exhaustive-deps */

/* eslint-disable react/forbid-foreign-prop-types */

/* eslint-disable-next-line @typescript-eslint/no-this-alias */

/* eslint-enable */

/* eslint-enable no-unused-expressions */

/* eslint-enable prefer-destructuring */

/* eslint-enable react/forbid-foreign-prop-types */

/* export default binding */

/* filterProps */

/* findAllByType */

/* findChildByType */

/* findEntryInArray */

/* formatAxisMap */

/* generateCategoricalChart */

/* getAnyElementOfObject */

/* getBandSizeOfAxis */

/* getBarPosition */

/* getBarSizeList */

/* getCateCoordinateOfLine */

/* getCoordinatesOfGrid */

/* getDisplayName */

/* getDomainOfDataByKey */

/* getDomainOfItemsWithSameAxis */

/* getDomainOfStackGroups */

/* getInputBaseUtilityClass */

/* getLegendProps */

/* getMainColorOfGraphicItem */

/* getOffset */

/* getPercentValue */

/* getReactEventByType */

/* getRegisteredStyles */

/* getStackGroupsByAxisId */

/* getStackedDataOfItem */

/* getStringSize */

/* getTicksOfAxis */

/* getTooltipItem */

/* getTransitionProps */

/* getValueByDataKey */

/* global define */

/* globals self */

/* harmony default export */

/* harmony export */

/* harmony import */

/* hasDuplicate */

/* ifOverflowMatches */

/* implicit */

/* inRangeOfSector */

/* initInterpolator.apply */

/* initRange.apply */

/* inputOverridesResolver */

/* insertStyles */

/* interpolateNumber */

/* invariant */

/* isCategoricalAxis */

/* isChildrenEqual */

/* isFilled */

/* isInRectangle */

/* isNumOrStr */

/* isNumber */

/* isPercent */

/* isPlainObject */

/* isRef */

/* keyframes */

/* lexer generated by jison-lex 0.6.1-215 */

/* lighten */

/* mathSign */

/* module decorator */

/* n */

/* no error! */

/* no exception! */

/* o */

/* parseChildIndex */

/* parseDomainOfCategoryAxis */

/* parseErrorBarsOfAxis */

/* parseSpecifiedDomain */

/* parser generated by jison 0.6.1-215 */

/* point */

/* polarToCartesian */

/* provided dependency */

/* rectWithPoints */

/* reexport */

/* reflow */

/* registerSource */

/* registerStyles */

/* registerTarget */

/* renderByOrder */

/* rootOverridesResolver */

/* rootShouldForwardProp */

/* serializeStyles */

/* shallowEqual */

/* slotShouldForwardProp */

/* this == yyval */

/* translateStyle */

/* uniqueId */

/* unused harmony export ScaleHelper */

/* unused harmony export clsx */

/* unused harmony export getStyleString */

/* unused harmony export slice */

/* unused harmony export teardown */

/* unused harmony exports ClassNames, createElement, css, jsx */

/* unused harmony exports SCALE_TYPES, LEGEND_TYPES, TOOLTIP_TYPES, toArray, withoutType, isValidSpreadableProp, filterSvgElements, isSingleChildEqual */

/* unused harmony exports degreeToRadian, radianToDegree, getMaxRadius, formatAxisMap, distanceBetweenPoints, getAngleOfPoint, formatAngleOfSector */

/* unused harmony exports hasValue, isAdornedStart */

/* unused harmony exports random, customRandom, customAlphabet */

/* unused reexport */

/* useCollectedProps */

/* useDragDropManager */

/* useInsertionEffectAlwaysWithSyncFallback */

/* useIsomorphicLayoutEffect */

/* useOptionalFactory */

/* validateWidthHeight */

/* warn */

/* withPath */

/* wrapConnectorHooks */

/*!
	Copyright (c) 2018 Jed Watson.
	Licensed under the MIT License (MIT), see
	http://jedwatson.github.io/classnames
*/

/*! Conditions:: INITIAL */

/*! Production::    css_value : ANGLE */

/*! Production::    css_value : CHS */

/*! Production::    css_value : EMS */

/*! Production::    css_value : EXS */

/*! Production::    css_value : FREQ */

/*! Production::    css_value : LENGTH */

/*! Production::    css_value : PERCENTAGE */

/*! Production::    css_value : REMS */

/*! Production::    css_value : RES */

/*! Production::    css_value : SUB css_value */

/*! Production::    css_value : TIME */

/*! Production::    css_value : VHS */

/*! Production::    css_value : VMAXS */

/*! Production::    css_value : VMINS */

/*! Production::    css_value : VWS */

/*! Production::    css_variable : CSS_VAR LPAREN CSS_CPROP COMMA math_expression RPAREN */

/*! Production::    css_variable : CSS_VAR LPAREN CSS_CPROP RPAREN */

/*! Production::    expression : math_expression EOF */

/*! Production::    math_expression : LPAREN math_expression RPAREN */

/*! Production::    math_expression : NESTED_CALC LPAREN math_expression RPAREN */

/*! Production::    math_expression : SUB PREFIX SUB NESTED_CALC LPAREN math_expression RPAREN */

/*! Production::    math_expression : css_value */

/*! Production::    math_expression : css_variable */

/*! Production::    math_expression : math_expression ADD math_expression */

/*! Production::    math_expression : math_expression DIV math_expression */

/*! Production::    math_expression : math_expression MUL math_expression */

/*! Production::    math_expression : math_expression SUB math_expression */

/*! Production::    math_expression : value */

/*! Production::    value : NUMBER */

/*! Production::    value : SUB NUMBER */

/*! Rule::       $ */

/*! Rule::       (--[0-9a-z-A-Z-]*) */

/*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)% */

/*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)Hz\b */

/*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)\b */

/*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)ch\b */

/*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)cm\b */

/*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)deg\b */

/*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)dpcm\b */

/*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)dpi\b */

/*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)dppx\b */

/*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)em\b */

/*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)ex\b */

/*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)grad\b */

/*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)in\b */

/*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)kHz\b */

/*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)mm\b */

/*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)ms\b */

/*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)pc\b */

/*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)pt\b */

/*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)px\b */

/*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)rad\b */

/*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)rem\b */

/*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)s\b */

/*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)turn\b */

/*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)vh\b */

/*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)vmax\b */

/*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)vmin\b */

/*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)vw\b */

/*! Rule::       ([a-z]+) */

/*! Rule::       (calc) */

/*! Rule::       (var) */

/*! Rule::       , */

/*! Rule::       - */

/*! Rule::       \( */

/*! Rule::       \) */

/*! Rule::       \* */

/*! Rule::       \+ */

/*! Rule::       \/ */

/*! decimal.js-light v2.5.1 https://github.com/MikeMcl/decimal.js-light/LICENCE */

/*#__PURE__*/

/**
		 * If the global context was used to store the DND context
		 * then where theres no more references to it we should
		 * clean it up to avoid memory leaks
		 */

/**
	 * Generate profiling statistics for the HTML5Backend.
	 */

/**
	 * Get the root element to use for event subscriptions
	 */

/**
         * and make sure the error info doesn't stay due to potential
         * ref cycle via userland code manipulations.
         * These would otherwise all be memory leak opportunities!
         * 
         * Note that only array and object references are nuked as those
         * constitute the set of elements which can produce a cyclic ref.
         * The rest of the members is kept intact as they are harmless.
         * 
         * @public
         * @this {LexErrorInfo}
         */

/**
       * Draw axis
       * @param {Object} axisOptions The options of axis
       * @param {Object} element      The axis element
       * @param {String} displayName  The display name of axis
       * @param {Number} index        The index of element
       * @return {ReactElement}       The instance of x-axes
       */

/**
       * Draw grid
       * @param  {ReactElement} element the grid item
       * @return {ReactElement} The instance of grid
       */

/**
       * Get the information of mouse in chart, return null when the mouse is not in the chart
       * @param  {Object} event    The event object
       * @return {Object}          Mouse data
       */

/**
       * The minimal observable subscription method.
       * @param {Object} observer Any object that can be used as an observer.
       * The observer object should have a `next` method.
       * @returns {subscription} An object with an `unsubscribe` method that can
       * be used to unsubscribe the observable from the store, and prevent further
       * emission of values from the observable.
       */

/**
       * compare the value of the two objects and return true if they are equivalent in values
       *
       * @param a the value to test against
       * @param b the value to test
       * @param [meta] an optional meta object that is passed through to all equality test calls
       * @returns are a and b equivalent in value
       */

/**
     * (internal) determine the lexer rule set which is active for the
     * currently active lexer condition state
     * 
     * @public
     * @this {RegExpLexer}
     */

/**
     * @param {KeyboardEvent} nativeEvent
     */

/**
     * Adds a new snackbar to the queue to be presented.
     * Returns generated or user defined key referencing the new snackbar or null
     */

/**
     * Calculate the coordinates of endpoints in ticks
     * @param  {Object} data The data of a simple tick
     * @return {Object} (x1, y1): The coordinate of endpoint close to tick text
     *  (x2, y2): The coordinate of endpoint close to axis
     */

/**
     * Calculate the path of curve
     * @return {String} path
     */

/**
     * Close snackbar with the given key
     */

/**
     * Current highest index number.
     */

/**
     * Draw horizontal grid stripes filled by colors
     * @param {Array} horizontalPoints either passed in as props or generated from function
     * @return {Group} Horizontal stripes
     */

/**
     * Draw items of legend
     * @return {ReactElement} Items
     */

/**
     * Draw the horizontal grid lines
     * @param {Array} horizontalPoints either passed in as props or generated from function
     * @return {Group} Horizontal lines
     */

/**
     * Draw vertical grid lines
     * @param {Array} verticalPoints either passed in as props or generated from function
     * @return {Group} Vertical lines
     */

/**
     * Draw vertical grid stripes filled by colors
     * @param {Array} verticalPoints either passed in as props or generated from function
     * @return {Group} Vertical stripes
     */

/**
     * Get selector string.
     */

/**
     * Hide a snackbar after its timeout.
     */

/**
     * INTERNAL USE: construct a suitable error info hash object instance for `parseError`.
     * 
     * @public
     * @this {RegExpLexer}
     */

/**
     * Reducer: Display items (notifications) in the queue if there's space for them.
     */

/**
     * Reducer: Display snack if there's space for it. Otherwise, immediately
     * begin dismissing the oldest message to start showing the new one.
     */

/**
     * Reducer: Hide oldest snackbar on the screen because there exists a new one which we have to display.
     * (ignoring the one with 'persist' flag. i.e. explicitly told by user not to get dismissed).
     *
     * Note 1: If there is already a message leaving the screen, no new messages are dismissed.
     * Note 2: If the oldest message has not yet entered the screen, only a request to close the
     *         snackbar is made. Once it entered the screen, it will be immediately dismissed.
     */

/**
     * Render the path of icon
     * @param {Object} data Data of each legend item
     * @return {String} Path element
     */

/**
     * Set the entered state of the snackbar with the given key.
     */

/**
     * When we set open attribute of a snackbar to false (i.e. after we hide a snackbar),
     * it leaves the screen and immediately after leaving animation is done, this method
     * gets called. We remove the hidden snackbar from state and then display notifications
     * waiting in the queue (if any). If after this process the queue is not empty, the
     * oldest message is dismissed.
     */

/**
     * activates a new lexer condition state (pushes the new lexer
     * condition state onto the condition stack)
     * 
     * @public
     * @this {RegExpLexer}
     */

/**
     * backwards compatible alias for `pushState()`;
     * the latter is symmetrical with `popState()` and we advise to use
     * those APIs in any modern lexer code, rather than `begin()`.
     * 
     * @public
     * @this {RegExpLexer}
     */

/**
     * cache matched text and append it on next action
     * 
     * @public
     * @this {RegExpLexer}
     */

/**
     * clear the lexer token context; intended for internal use only
     * 
     * @public
     * @this {RegExpLexer}
     */

/**
     * consumes and returns one char from the input
     * 
     * @public
     * @this {RegExpLexer}
     */

/**
     * edit the remaining input via user-specified callback.
     * This can be used to forward-adjust the input-to-parse, 
     * e.g. inserting macro expansions and alike in the
     * input which has yet to be lexed.
     * The behaviour of this API contrasts the `unput()` et al
     * APIs as those act on the *consumed* input, while this
     * one allows one to manipulate the future, without impacting
     * the current `yyloc` cursor location or any history. 
     * 
     * Use this API to help implement C-preprocessor-like
     * `#include` statements, etc.
     * 
     * The provided callback must be synchronous and is
     * expected to return the edited input (string).
     *
     * The `cpsArg` argument value is passed to the callback
     * as-is.
     *
     * `callback` interface: 
     * `function callback(input, cpsArg)`
     * 
     * - `input` will carry the remaining-input-to-lex string
     *   from the lexer.
     * - `cpsArg` is `cpsArg` passed into this API.
     * 
     * The `this` reference for the callback will be set to
     * reference this lexer instance so that userland code
     * in the callback can easily and quickly access any lexer
     * API. 
     *
     * When the callback returns a non-string-type falsey value,
     * we assume the callback did not edit the input and we
     * will using the input as-is.
     *
     * When the callback returns a non-string-type value, it
     * is converted to a string for lexing via the `"" + retval`
     * operation. (See also why: http://2ality.com/2012/03/converting-to-string.html 
     * -- that way any returned object's `toValue()` and `toString()`
     * methods will be invoked in a proper/desirable order.)
     * 
     * @public
     * @this {RegExpLexer}
     */

/**
     * final cleanup function for when we have completed lexing the input;
     * make it an API so that external code can use this one once userland
     * code has decided it's time to destroy any lingering lexer error
     * hash object instances and the like: this function helps to clean
     * up these constructs, which *may* carry cyclic references which would
     * otherwise prevent the instances from being properly and timely
     * garbage-collected, i.e. this function helps prevent memory leaks!
     * 
     * @public
     * @this {RegExpLexer}
     */

/**
     * handler which is invoked when a lexer error occurs.
     * 
     * @public
     * @this {RegExpLexer}
     */

/**
     * helper function, used to produce a human readable description as a string, given
     * the input `yylloc` location object.
     * 
     * Set `display_range_too` to TRUE to include the string character index position(s)
     * in the description if the `yylloc.range` is available.
     * 
     * @public
     * @this {RegExpLexer}
     */

/**
     * method which implements `yyerror(str, ...args)` functionality for use inside lexer actions.
     * 
     * @public
     * @this {RegExpLexer}
     */

/**
     * pop the previously active lexer condition state off the condition
     * stack
     * 
     * @public
     * @this {RegExpLexer}
     */

/**
     * render the ticks
     * @param {Array} ticks The ticks to actually render (overrides what was passed in props)
     * @param {string} fontSize Fontsize to consider for tick spacing
     * @param {string} letterSpacing Letterspacing to consider for tick spacing
     * @return {ReactComponent} renderedTicks
     */

/**
     * resets the lexer, sets new input
     * 
     * @public
     * @this {RegExpLexer}
     */

/**
     * retain first n characters of the match
     * 
     * @public
     * @this {RegExpLexer}
     */

/**
     * return (part of the) already matched input, i.e. for error
     * messages.
     * 
     * Limit the returned string length to `maxSize` (default: 20).
     * 
     * Limit the returned string to the `maxLines` number of lines of
     * input (default: 1).
     * 
     * Negative limit values equal *unlimited*.
     * 
     * @public
     * @this {RegExpLexer}
     */

/**
     * return (part of the) upcoming input, i.e. for error messages.
     * 
     * Limit the returned string length to `maxSize` (default: 20).
     * 
     * Limit the returned string to the `maxLines` number of lines of input (default: 1).
     * 
     * Negative limit values equal *unlimited*.
     *
     * > ### NOTE ###
     * >
     * > *"upcoming input"* is defined as the whole of the both
     * > the *currently lexed* input, together with any remaining input
     * > following that. *"currently lexed"* input is the input 
     * > already recognized by the lexer but not yet returned with
     * > the lexer token. This happens when you are invoking this API
     * > from inside any lexer rule action code block. 
     * >
     * 
     * @public
     * @this {RegExpLexer}
     */

/**
     * return a string which displays the character position where the
     * lexing error occurred, i.e. for error messages
     * 
     * @public
     * @this {RegExpLexer}
     */

/**
     * return a string which displays the lines & columns of input which are referenced 
     * by the given location info range, plus a few lines of context.
     * 
     * This function pretty-prints the indicated section of the input, with line numbers 
     * and everything!
     * 
     * This function is very useful to provide highly readable error reports, while
     * the location range may be specified in various flexible ways:
     * 
     * - `loc` is the location info object which references the area which should be
     *   displayed and 'marked up': these lines & columns of text are marked up by `^`
     *   characters below each character in the entire input range.
     * 
     * - `context_loc` is the *optional* location info object which instructs this
     *   pretty-printer how much *leading* context should be displayed alongside
     *   the area referenced by `loc`. This can help provide context for the displayed
     *   error, etc.
     * 
     *   When this location info is not provided, a default context of 3 lines is
     *   used.
     * 
     * - `context_loc2` is another *optional* location info object, which serves
     *   a similar purpose to `context_loc`: it specifies the amount of *trailing*
     *   context lines to display in the pretty-print output.
     * 
     *   When this location info is not provided, a default context of 1 line only is
     *   used.
     * 
     * Special Notes:
     * 
     * - when the `loc`-indicated range is very large (about 5 lines or more), then
     *   only the first and last few lines of this block are printed while a
     *   `...continued...` message will be printed between them.
     * 
     *   This serves the purpose of not printing a huge amount of text when the `loc`
     *   range happens to be huge: this way a manageable & readable output results
     *   for arbitrary large ranges.
     * 
     * - this function can display lines of input which whave not yet been lexed.
     *   `prettyPrintRange()` can access the entire input!
     * 
     * @public
     * @this {RegExpLexer}
     */

/**
     * return an YYLLOC info object derived off the given context (actual, preceding, following, current).
     * Use this method when the given `actual` location is not guaranteed to exist (i.e. when
     * it MAY be NULL) and you MUST have a valid location info object anyway:
     * then we take the given context of the `preceding` and `following` locations, IFF those are available,
     * and reconstruct the `actual` location info from those.
     * If this fails, the heuristic is to take the `current` location, IFF available.
     * If this fails as well, we assume the sought location is at/around the current lexer position
     * and then produce that one as a response. DO NOTE that these heuristic/derived location info
     * values MAY be inaccurate!
     *
     * NOTE: `deriveLocationInfo()` ALWAYS produces a location info object *copy* of `actual`, not just
     * a *reference* hence all input location objects can be assumed to be 'constant' (function has no side-effects).
     * 
     * @public
     * @this {RegExpLexer}
     */

/**
     * return info about the lexer state that can help a parser or other lexer API user to use the
     * most efficient means available. This API is provided to aid run-time performance for larger
     * systems which employ this lexer.
     * 
     * @public
     * @this {RegExpLexer}
     */

/**
     * return next match in input
     * 
     * @public
     * @this {RegExpLexer}
     */

/**
     * return next match that has a token
     * 
     * @public
     * @this {RegExpLexer}
     */

/**
     * return next match that has a token. Identical to the `lex()` API but does not invoke any of the 
     * `pre_lex()` nor any of the `post_lex()` callbacks.
     * 
     * @public
     * @this {RegExpLexer}
     */

/**
     * return the currently active lexer condition state; when an index
     * argument is provided it produces the N-th previous condition state,
     * if available
     * 
     * @public
     * @this {RegExpLexer}
     */

/**
     * return the number of states currently on the stack
     * 
     * @public
     * @this {RegExpLexer}
     */

/**
     * signal the lexer that this rule fails to match the input, so the
     * next matching rule (regex) should be tested instead.
     * 
     * @public
     * @this {RegExpLexer}
     */

/**
     * test the lexed token: return FALSE when not a match, otherwise return token.
     * 
     * `match` is supposed to be an array coming out of a regex match, i.e. `match[0]`
     * contains the actually matched text string.
     * 
     * Also move the input cursor forward and update the match collectors:
     * 
     * - `yytext`
     * - `yyleng`
     * - `match`
     * - `matches`
     * - `yylloc`
     * - `offset`
     * 
     * @public
     * @this {RegExpLexer}
     */

/**
     * unshifts one char (or an entire string) into the input
     * 
     * @public
     * @this {RegExpLexer}
     */

/**
   * @param {React.SyntheticEvent | Event} event
   */

/**
   * Add a rule to the current stylesheet.
   * Will insert a rule also after the stylesheet has been rendered first time.
   */

/**
   * Adds a change listener. It will be called any time an action is dispatched,
   * and some part of the state tree may potentially have changed. You may then
   * call `getState()` to read the current state tree inside the callback.
   *
   * You may call `dispatch()` from a change listener, with the following
   * caveats:
   *
   * 1. The subscriptions are snapshotted just before every `dispatch()` call.
   * If you subscribe or unsubscribe while the listeners are being invoked, this
   * will not have any effect on the `dispatch()` that is currently in progress.
   * However, the next `dispatch()` call, whether nested or not, will use a more
   * recent snapshot of the subscription list.
   *
   * 2. The listener should not expect to see all state changes, as the state
   * might have been updated multiple times during a nested `dispatch()` before
   * the listener is called. It is, however, guaranteed that all subscribers
   * registered before the `dispatch()` started will be called with the latest
   * state by the time it exits.
   *
   * @param {Function} listener A callback to be invoked on every dispatch.
   * @returns {Function} A function to remove this change listener.
   */

/**
   * Apply rule to an element inline.
   */

/**
   * Attach renderable to the render tree.
   */

/**
   * Call `onChangeValue` hooks.
   */

/**
   * Call `onCreateRule` hooks and return an object if returned by a hook.
   */

/**
   * Call `onProcessRule` hooks.
   */

/**
   * Call `onProcessSheet` hooks.
   */

/**
   * Call `onProcessStyle` hooks.
   */

/**
   * Call `onUpdate` hooks.
   */

/**
   * Contains rules objects and allows adding/removing etc.
   * Is used for e.g. by `StyleSheet` or `ConditionalRule`.
   */

/**
   * Convert all attached sheets to a CSS string.
   */

/**
   * Convert rules to a CSS string.
   */

/**
   * Create a Style Sheet.
   */

/**
   * Create a rule without a Style Sheet.
   * [Deprecated] will be removed in the next major version.
   */

/**
   * Create and add rules.
   * Will render also after Style Sheet was rendered the first time.
   */

/**
   * Create and register rule, run plugins.
   */

/**
   * Create and register rule.
   *
   * Will not render after Style Sheet was rendered the first time.
   */

/**
   * Delete a rule by name.
   * Returns `true`: if rule has been deleted from the DOM.
   */

/**
   * Delete a rule.
   */

/**
   * Deploy pure CSS string to a renderable.
   */

/**
   * Detach the Style Sheet and remove it from the registry.
   */

/**
   * Dispatches an action. It is the only way to trigger a state change.
   *
   * The `reducer` function, used to create the store, will be called with the
   * current state tree and the given `action`. Its return value will
   * be considered the **next** state of the tree, and the change listeners
   * will be notified.
   *
   * The base implementation only supports plain object actions. If you want to
   * dispatch a Promise, an Observable, a thunk, or something else, you need to
   * wrap your store creating function into the corresponding middleware. For
   * example, see the documentation for the `redux-thunk` package. Even the
   * middleware will eventually dispatch plain object actions using this method.
   *
   * @param {Object} action A plain object representing “what changed”. It is
   * a good idea to keep actions serializable so you can record and replay user
   * sessions, or use the time travelling `redux-devtools`. An action must have
   * a `type` property which may not be `undefined`. It is a good idea to use
   * string constants for action types.
   *
   * @returns {Object} For convenience, the same action object you dispatched.
   *
   * Note that, if you use a custom middleware, it may wrap `dispatch()` to
   * return something else (for example, a Promise you can await).
   */

/**
   * Execute plugins, update rule props.
   */

/**
   * Generate a new CSS rule and replace the existing one.
   */

/**
   * Generates a CSS string.
   */

/**
   * Get a rule by name or selector.
   */

/**
   * Get a rule.
   */

/**
   * Get all rules elements.
   */

/**
   * Get index of a CSS Rule.
   */

/**
   * Get index of a rule.
   */

/**
   * Get or set a style property.
   */

/**
   * If the svg element type is explicitly included, check against the filtered element key map
   * to determine if there are attributes that should only exist on that element type.
   * @todo Add an internal cjs version of https://github.com/wooorm/svg-element-attributes for full coverage.
   */

/**
   * Inject CSS string into element.
   */

/**
   * Insert RuleList into an element.
   */

/**
   * Insert a rule into element.
   */

/**
   * Insert rule into the StyleSheet
   */

/**
   * Insert style element into render tree.
   */

/**
   * Interoperability point for observable/reactive libraries.
   * @returns {observable} A minimal observable of state changes.
   * For more information, see the observable proposal:
   * https://github.com/tc39/proposal-observable
   */

/**
   * Pause the timer when the user is interacting with the Snackbar
   * or when the user hide the window.
   */

/**
   * Prepares various options, applies plugins.
   * Should not be used twice on the same instance, because there is no plugins
   * deduplication logic.
   */

/**
   * Props are blindly spread onto SVG elements. This loop filters out properties that we don't want to spread.
   * Items filtered out are as follows:
   *   - functions in properties that are SVG attributes (functions are included when includeEvents is true)
   *   - props that are SVG attributes but don't matched the passed svgElementType
   *   - any prop that is not in SVGElementPropKeys (or in EventKeys if includeEvents is true)
   */

/**
   * Reads the state tree managed by the store.
   *
   * @returns {any} The current state tree of your application.
   */

/**
   * Register a Style Sheet.
   */

/**
   * Register a plugin.
   */

/**
   * Register a rule in `.map`, `.classes` and `.keyframes` maps.
   */

/**
   * Register plugin. Passed function will be invoked with a rule instance.
   */

/**
   * Remove a Style Sheet.
   */

/**
   * Remove renderable from render tree.
   */

/**
   * Remove style element from render tree.
   */

/**
   * Replace a rule in the current stylesheet.
   */

/**
   * Replace rule, run plugins.
   */

/**
   * Replace rule.
   * Create a new rule and remove old one instead of overwriting
   * because we want to invoke onCreateRule hook to make plugins work.
   */

/**
   * Replaces the reducer currently used by the store to calculate the state.
   *
   * You might need this if your app implements code splitting and you want to
   * load some of the reducers dynamically. You might also need this if you
   * implement a hot reloading mechanism for Redux.
   *
   * @param {Function} nextReducer The reducer for the store to use instead.
   * @returns {void}
   */

/**
   * Reset the registry.
   */

/**
   * Restart the timer when the user is no longer interacting with the Snackbar
   * or when the window is shown back.
   */

/**
   * Returns JSON representation of the rule.
   * Fallbacks are not supported.
   * Useful for inline styles.
   */

/**
   * Run `onProcessRule()` plugins on every rule.
   */

/**
   * See also:
   * http://stackoverflow.com/questions/1382107/whats-a-good-way-to-extend-error-in-javascript/#35881508
   * but we keep the prototype.constructor and prototype.name assignment lines too for compatibility
   * with userland code which might access the derived class in a 'classic' way.
   *
   * @public
   * @constructor
   * @nocollapse
   */

/**
   * Set selector string.
   * Attention: use this with caution. Most browsers didn't implement
   * selectorText setter, so this may result in rerendering of entire Style Sheet.
   */

/**
   * Should be called if a blur event is fired
   */

/**
   * The `<TransitionGroup>` component manages a set of transition components
   * (`<Transition>` and `<CSSTransition>`) in a list. Like with the transition
   * components, `<TransitionGroup>` is a state machine for managing the mounting
   * and unmounting of components over time.
   *
   * Consider the example below. As items are removed or added to the TodoList the
   * `in` prop is toggled automatically by the `<TransitionGroup>`.
   *
   * Note that `<TransitionGroup>`  does not define any animation behavior!
   * Exactly _how_ a list item animates is up to the individual transition
   * component. This means you can mix and match animations across different list
   * items.
   */

/**
   * This makes a shallow copy of currentListeners so we can use
   * nextListeners as a temporary list while dispatching.
   *
   * This prevents any bugs around consumers calling
   * subscribe/unsubscribe in the middle of a dispatch.
   */

/**
   * This will create a new function if the refs passed to this hook change and are all defined.
   * This means react will call the old forkRef with `null` and the new forkRef
   * with the ref. Cleanup naturally emerges from this behavior.
   */

/**
   * Unregister a rule.
   */

/**
   * Update the function values with a new data.
   */

/**
   * Updates a single rule.
   */

/**
   * are the arrays equal in value
   *
   * @param a the array to test
   * @param b the array to test against
   * @param isEqual the comparator to determine equality
   * @param meta the meta object to pass through
   * @returns are the arrays equal
   */

/**
   * are the maps equal in value
   *
   * @param a the map to test
   * @param b the map to test against
   * @param isEqual the comparator to determine equality
   * @param meta the meta map to pass through
   * @returns are the maps equal
   */

/**
   * are the objects equal in value
   *
   * @param a the object to test
   * @param b the object to test against
   * @param isEqual the comparator to determine equality
   * @param meta the meta object to pass through
   * @returns are the objects equal
   */

/**
   * are the regExps equal in value
   *
   * @param a the regExp to test
   * @param b the regExp to test agains
   * @returns are the regExps equal
   */

/**
   * are the sets equal in value
   *
   * @param a the set to test
   * @param b the set to test against
   * @param isEqual the comparator to determine equality
   * @param meta the meta set to pass through
   * @returns are the sets equal
   */

/**
   * are the values passed strictly equal or both NaN
   *
   * @param a the value to compare against
   * @param b the value to test
   * @returns are the values equal by the SameValueZero principle
   */

/**
   * create a custom isEqual handler specific to circular objects
   *
   * @param [isEqual] the isEqual comparator to use instead of isDeepEqual
   * @returns the method to create the `isEqual` function
   */

/**
   * get a new cache object to prevent circular references
   *
   * @returns the new cache object
   */

/**
   * in cases where WeakSet is not supported, creates a new custom
   * object that mimics the necessary API aspects for cache purposes
   *
   * @returns the new cache object
   */

/**
   * is the value a plain object
   *
   * @param value the value to test
   * @returns is the value a plain object
   */

/**
   * is the value passed a react element
   *
   * @param value the value to test
   * @returns is the value a react element
   */

/**
   * is the value promise-like (meaning it is thenable)
   *
   * @param value the value to test
   * @returns is the value promise-like
   */

/**
   * placement initialized from prop but can change during lifetime if modifiers.flip.
   * modifiers.flip is essentially a flip for controlled/uncontrolled behavior
   */

/**
   * the index of the item should receive focus
   * in a `variant="selectedMenu"` it's the first `selected` item
   * otherwise it's the very first item.
   */

/**
 *
 * @example <div id={useId()} />
 * @param idOverride
 * @returns {string}
 */

/**
 *
 * @param monitor The monitor to collect state from
 * @param collect The collecting function
 * @param onUpdate A method to invoke when updates occur
 */

/**
 *
 * Creates an array cache object to store unique values.
 *
 * @private
 * @constructor
 * @param {Array} [values] The values to cache.
 */

/**
 *
 * Demos:
 *
 * - [Unstyled Slider](https://mui.com/base/react-slider/#hook)
 *
 * API:
 *
 * - [useSlider API](https://mui.com/base/api/use-slider/)
 */

/**
 * @deprecated
 *
 * **We recommend using the `configureStore` method
 * of the `@reduxjs/toolkit` package**, which replaces `createStore`.
 *
 * Redux Toolkit is our recommended approach for writing Redux logic today,
 * including store setup, reducers, data fetching, and more.
 *
 * **For more details, please read this Redux docs page:**
 * **https://redux.js.org/introduction/why-rtk-is-redux-today**
 *
 * `configureStore` from Redux Toolkit is an improved version of `createStore` that
 * simplifies setup and helps avoid common bugs.
 *
 * You should not be using the `redux` core package by itself today, except for learning purposes.
 * The `createStore` method from the core `redux` package will not be removed, but we encourage
 * all users to migrate to using Redux Toolkit for all Redux code.
 *
 * If you want to use `createStore` without this visual deprecation warning, use
 * the `legacy_createStore` import instead:
 *
 * `import { legacy_createStore as createStore} from 'redux'`
 *
 */

/**
 * @fileOverview Area
 */

/**
 * @fileOverview Brush
 */

/**
 * @fileOverview Cartesian Axis
 */

/**
 * @fileOverview Cartesian Grid
 */

/**
 * @fileOverview Cross
 */

/**
 * @fileOverview Curve
 */

/**
 * @fileOverview Default Legend Content
 */

/**
 * @fileOverview Dot
 */

/**
 * @fileOverview Layer
 */

/**
 * @fileOverview Legend
 */

/**
 * @fileOverview Line
 */

/**
 * @fileOverview Rectangle
 */

/**
 * @fileOverview Reference Dot
 */

/**
 * @fileOverview Reference Line
 */

/**
 * @fileOverview Render a group of bar
 */

/**
 * @fileOverview Render a group of error bar
 */

/**
 * @fileOverview Render a group of scatters
 */

/**
 * @fileOverview Sector
 */

/**
 * @fileOverview Surface
 */

/**
 * @fileOverview Tooltip
 */

/**
 * @fileOverview Wrapper component to make charts adapt to the size of parent * DOM
 */

/**
 * @fileOverview X Axis
 */

/**
 * @fileOverview Y Axis
 */

/**
 * @fileOverview Z Axis
 */

/**
 * @fileOverview calculate tick values of scale
 * @author xile611, arcthur
 * @date 2015-09-17
 */

/**
 * @fileOverview 一些公用的运算方法
 * @author xile611
 * @date 2015-09-17
 */

/**
 * @ignore - do not document.
 *
 * Proper state management for containers and the modals in those containers.
 * Simplified, but inspired by react-overlay's ModalManager class.
 * Used by the Modal to ensure proper styling of containers.
 */

/**
 * @ignore - do not document.
 * Builds the props to be passed into the slot of an unstyled component.
 * It merges the internal props of the component with the ones supplied by the user, allowing to customize the behavior.
 * If the slot component is not a host component, it also merges in the `ownerState`.
 *
 * @param parameters.getSlotProps - A function that returns the props to be passed to the slot component.
 */

/**
 * @ignore - internal component.
 */

/**
 * @license React
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/**
 * @link https://github.com/mui-org/material-ui/blob/master/packages/material-ui/src/utils/createChainedFunction.js
 */

/**
 * @link https://github.com/mui-org/material-ui/blob/master/packages/material-ui/src/utils/useEventCallback.js
 */

/**
 * @mui/styled-engine v5.11.8
 *
 * @license MIT
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/**
 * @param {any} obj The object to inspect.
 * @returns {boolean} True if the argument appears to be a plain object.
 */

/**
 * A React component that provides the React-DnD context
 */

/**
 * A better abstraction over CSS.
 *
 * @copyright Oleg Isonen (Slobodskoi) / Isonen 2014-present
 * @website https://github.com/cssinjs/jss
 * @license MIT
 */

/**
 * A faster alternative to `Function#apply`, this function invokes `func`
 * with the `this` binding of `thisArg` and the arguments of `args`.
 *
 * @private
 * @param {Function} func The function to invoke.
 * @param {*} thisArg The `this` binding of `func`.
 * @param {Array} args The arguments to invoke `func` with.
 * @returns {*} Returns the result of `func`.
 */

/**
 * A hook to retrieve the DragDropManager from Context
 */

/**
 * A permanently displayed menu following https://www.w3.org/WAI/ARIA/apg/patterns/menu-button/.
 * It's exposed to help customization of the [`Menu`](/material-ui/api/menu/) component if you
 * use it separately you need to move focus into the component manually. Once
 * the focus is placed inside the component it is fully keyboard accessible.
 */

/**
 * A specialized version of `_.every` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {boolean} Returns `true` if all elements pass the predicate check,
 *  else `false`.
 */

/**
 * A specialized version of `_.filter` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {Array} Returns the new filtered array.
 */

/**
 * A specialized version of `_.includes` for arrays without support for
 * specifying an index to search from.
 *
 * @private
 * @param {Array} [array] The array to inspect.
 * @param {*} target The value to search for.
 * @returns {boolean} Returns `true` if `target` is found, else `false`.
 */

/**
 * A specialized version of `_.indexOf` which performs strict equality
 * comparisons of values, i.e. `===`.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} value The value to search for.
 * @param {number} fromIndex The index to search from.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */

/**
 * A specialized version of `_.map` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 */

/**
 * A specialized version of `_.memoize` which clears the memoized function's
 * cache when it exceeds `MAX_MEMOIZE_SIZE`.
 *
 * @private
 * @param {Function} func The function to have its output memoized.
 * @returns {Function} Returns the new memoized function.
 */

/**
 * A specialized version of `_.some` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {boolean} Returns `true` if any element passes the predicate check,
 *  else `false`.
 */

/**
 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the raw `toStringTag`.
 */

/**
 * A specialized version of `baseIsEqualDeep` for arrays with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Array} array The array to compare.
 * @param {Array} other The other array to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `array` and `other` objects.
 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
 */

/**
 * A specialized version of `baseIsEqualDeep` for comparing objects of
 * the same `toStringTag`.
 *
 * **Note:** This function only supports comparing values with tags of
 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {string} tag The `toStringTag` of the objects to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */

/**
 * A specialized version of `baseIsEqualDeep` for objects with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */

/**
 * A specialized version of `baseIsEqual` for arrays and objects which performs
 * deep comparisons and tracks traversed objects enabling objects with circular
 * references to be compared.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} [stack] Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */

/**
 * A specialized version of `baseProperty` which supports deep paths.
 *
 * @private
 * @param {Array|string} path The path of the property to get.
 * @returns {Function} Returns the new accessor function.
 */

/**
 * A specialized version of `baseRest` which transforms the rest array.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @param {number} [start=func.length-1] The start position of the rest parameter.
 * @param {Function} transform The rest array transform.
 * @returns {Function} Returns the new function.
 */

/**
 * A specialized version of `matchesProperty` for source values suitable
 * for strict equality comparisons, i.e. `===`.
 *
 * @private
 * @param {string} key The key of the property to get.
 * @param {*} srcValue The value to match.
 * @returns {Function} Returns the new spec function.
 */

/**
 * Adapted from React: https://github.com/facebook/react/blob/master/packages/shared/formatProdErrorMessage.js
 *
 * Do not require this module directly! Use normal throw error calls. These messages will be replaced with error codes
 * during build.
 * @param {number} code
 */

/**
 * Add a listener for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn The listener function.
 * @param {*} [context=this] The context to invoke the listener with.
 * @returns {EventEmitter} `this`.
 * @public
 */

/**
 * Add a listener for a given event.
 *
 * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn The listener function.
 * @param {*} context The context to invoke the listener with.
 * @param {Boolean} once Specify if the listener is a one-time listener.
 * @returns {EventEmitter}
 * @private
 */

/**
 * Add a one-time listener for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn The listener function.
 * @param {*} [context=this] The context to invoke the listener with.
 * @returns {EventEmitter} `this`.
 * @public
 */

/**
 * Add keys, values of `defaultProps` that does not exist in `props`
 * @param {object} defaultProps
 * @param {object} props
 * @returns {object} resolved props
 */

/**
 * Add unit to numeric values.
 */

/**
 * Add vendor prefix to a property name when needed.
 */

/**
 * Adds `value` to the array cache.
 *
 * @private
 * @name add
 * @memberOf SetCache
 * @alias push
 * @param {*} value The value to cache.
 * @returns {Object} Returns the cache instance.
 */

/**
 * Allow camel cased property names by converting them back to dasherized.
 */

/**
 * Appends the elements of `values` to `array`.
 *
 * @private
 * @param {Array} array The array to modify.
 * @param {Array} values The values to append.
 * @returns {Array} Returns `array`.
 */

/**
 * Appends the ownerState object to the props, merging with the existing one if necessary.
 *
 * @param elementType Type of the element that owns the `existingProps`. If the element is a DOM node or undefined, `ownerState` is not applied.
 * @param otherProps Props of the element.
 * @param ownerState
 */

/**
 * Calculate a interval of a minimum value and a maximum value
 *
 * @param  {Number} min       The minimum value
 * @param  {Number} max       The maximum value
 * @return {Array} An interval
 */

/**
 * Calculate the scale function, position, width, height of axes
 * @param  {Object} props     Latest props
 * @param  {Object} axisMap   The configuration of axes
 * @param  {Object} offset    The offset of main part in the svg element
 * @param  {String} axisType  The type of axes, x-axis or y-axis
 * @param  {String} chartName The name of chart
 * @return {Object} Configuration
 */

/**
 * Calculate the step
 *
 * @param  {Number}  min              The minimum value of an interval
 * @param  {Number}  max              The maximum value of an interval
 * @param  {Integer} tickCount        The count of ticks
 * @param  {Boolean} allowDecimals    Allow the ticks to be decimals or not
 * @param  {Number}  correctionFactor A correction factor
 * @return {Object}  The step, minimum value of ticks, maximum value of ticks
 */

/**
 * Calculate the step which is easy to understand between ticks, like 10, 20, 25
 *
 * @param  {Decimal} roughStep        The rough step calculated by deviding the
 * difference by the tickCount
 * @param  {Boolean} allowDecimals    Allow the ticks to be decimals or not
 * @param  {Integer} correctionFactor A correction factor
 * @return {Decimal} The step which is easy to understand between two ticks
 */

/**
 * Calculate the ticks of an interval, the count of ticks will be guraranteed
 *
 * @param  {Number}  min, max      min: The minimum value, max: The maximum value
 * @param  {Integer} tickCount     The count of ticks
 * @param  {Boolean} allowDecimals Allow the ticks to be decimals or not
 * @return {Array}   ticks
 */

/**
 * Calculate the ticks of an interval, the count of ticks won't be guraranteed
 *
 * @param  {Number}  min, max      min: The minimum value, max: The maximum value
 * @param  {Integer} tickCount     The count of ticks
 * @param  {Boolean} allowDecimals Allow the ticks to be decimals or not
 * @return {Array}   ticks
 */

/**
 * Calculate the ticks of an interval, the count of ticks won't be guraranteed,
 * but the domain will be guaranteed
 *
 * @param  {Number}  min, max      min: The minimum value, max: The maximum value
 * @param  {Integer} tickCount     The count of ticks
 * @param  {Boolean} allowDecimals Allow the ticks to be decimals or not
 * @return {Array}   ticks
 */

/**
 * Calls a task as soon as possible after returning, in its own event, with priority
 * over other events like animation, reflow, and repaint. An error thrown from an
 * event will not interrupt, nor even substantially slow down the processing of
 * other events, but will be rather postponed to a lower priority event.
 * @param {{call}} task A callable object, typically a function that takes no
 * arguments.
 */

/**
 * Calls each of the listeners registered for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @returns {Boolean} `true` if the event had listeners, else `false`.
 * @public
 */

/**
 * Casts `array` to a slice if it's needed.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {number} start The start position.
 * @param {number} [end=array.length] The end position.
 * @returns {Array} Returns the cast slice.
 */

/**
 * Casts `value` to a path array if it's not one.
 *
 * @private
 * @param {*} value The value to inspect.
 * @param {Object} [object] The object to query keys on.
 * @returns {Array} Returns the cast property path array.
 */

/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */

/**
 * Checks if `n` is between `start` and up to, but not including, `end`. If
 * `end` is not specified, it's set to `start` with `start` then set to `0`.
 * If `start` is greater than `end` the params are swapped to support
 * negative ranges.
 *
 * @static
 * @memberOf _
 * @since 3.3.0
 * @category Number
 * @param {number} number The number to check.
 * @param {number} [start=0] The start of the range.
 * @param {number} end The end of the range.
 * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
 * @see _.range, _.rangeRight
 * @example
 *
 * _.inRange(3, 2, 4);
 * // => true
 *
 * _.inRange(4, 8);
 * // => true
 *
 * _.inRange(4, 2);
 * // => false
 *
 * _.inRange(2, 2);
 * // => false
 *
 * _.inRange(1.2, 2);
 * // => true
 *
 * _.inRange(5.2, 4);
 * // => false
 *
 * _.inRange(-3, -2, -6);
 * // => true
 */

/**
 * Checks if `path` exists on `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @param {Function} hasFunc The function to check properties.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 */

/**
 * Checks if `path` is a direct or inherited property of `object`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 * @example
 *
 * var object = _.create({ 'a': _.create({ 'b': 2 }) });
 *
 * _.hasIn(object, 'a');
 * // => true
 *
 * _.hasIn(object, 'a.b');
 * // => true
 *
 * _.hasIn(object, ['a', 'b']);
 * // => true
 *
 * _.hasIn(object, 'b');
 * // => false
 */

/**
 * Checks if `predicate` returns truthy for **all** elements of `collection`.
 * Iteration is stopped once `predicate` returns falsey. The predicate is
 * invoked with three arguments: (value, index|key, collection).
 *
 * **Note:** This method returns `true` for
 * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
 * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
 * elements of empty collections.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} [predicate=_.identity] The function invoked per iteration.
 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
 * @returns {boolean} Returns `true` if all elements pass the predicate check,
 *  else `false`.
 * @example
 *
 * _.every([true, 1, null, 'yes'], Boolean);
 * // => false
 *
 * var users = [
 *   { 'user': 'barney', 'age': 36, 'active': false },
 *   { 'user': 'fred',   'age': 40, 'active': false }
 * ];
 *
 * // The `_.matches` iteratee shorthand.
 * _.every(users, { 'user': 'barney', 'active': false });
 * // => false
 *
 * // The `_.matchesProperty` iteratee shorthand.
 * _.every(users, ['active', false]);
 * // => true
 *
 * // The `_.property` iteratee shorthand.
 * _.every(users, 'active');
 * // => false
 */

/**
 * Checks if `predicate` returns truthy for **any** element of `collection`.
 * Iteration is stopped once `predicate` returns truthy. The predicate is
 * invoked with three arguments: (value, index|key, collection).
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} [predicate=_.identity] The function invoked per iteration.
 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
 * @returns {boolean} Returns `true` if any element passes the predicate check,
 *  else `false`.
 * @example
 *
 * _.some([null, 0, 'yes', false], Boolean);
 * // => true
 *
 * var users = [
 *   { 'user': 'barney', 'active': true },
 *   { 'user': 'fred',   'active': false }
 * ];
 *
 * // The `_.matches` iteratee shorthand.
 * _.some(users, { 'user': 'barney', 'active': false });
 * // => false
 *
 * // The `_.matchesProperty` iteratee shorthand.
 * _.some(users, ['active', false]);
 * // => true
 *
 * // The `_.property` iteratee shorthand.
 * _.some(users, 'active');
 * // => true
 */

/**
 * Checks if `string` contains Unicode symbols.
 *
 * @private
 * @param {string} string The string to inspect.
 * @returns {boolean} Returns `true` if a symbol is found, else `false`.
 */

/**
 * Checks if `value` is `NaN`.
 *
 * **Note:** This method is based on
 * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
 * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
 * `undefined` and other non-number values.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
 * @example
 *
 * _.isNaN(NaN);
 * // => true
 *
 * _.isNaN(new Number(NaN));
 * // => true
 *
 * isNaN(undefined);
 * // => true
 *
 * _.isNaN(undefined);
 * // => false
 */

/**
 * Checks if `value` is `null` or `undefined`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
 * @example
 *
 * _.isNil(null);
 * // => true
 *
 * _.isNil(void 0);
 * // => true
 *
 * _.isNil(NaN);
 * // => false
 */

/**
 * Checks if `value` is a flattenable `arguments` object or array.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
 */

/**
 * Checks if `value` is a property name and not a property path.
 *
 * @private
 * @param {*} value The value to check.
 * @param {Object} [object] The object to query keys on.
 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
 */

/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */

/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */

/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */

/**
 * Checks if `value` is classified as a `Number` primitive or object.
 *
 * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
 * classified as numbers, use the `_.isFinite` method.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a number, else `false`.
 * @example
 *
 * _.isNumber(3);
 * // => true
 *
 * _.isNumber(Number.MIN_VALUE);
 * // => true
 *
 * _.isNumber(Infinity);
 * // => true
 *
 * _.isNumber('3');
 * // => false
 */

/**
 * Checks if `value` is classified as a `String` primitive or object.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a string, else `false`.
 * @example
 *
 * _.isString('abc');
 * // => true
 *
 * _.isString(1);
 * // => false
 */

/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */

/**
 * Checks if `value` is classified as a boolean primitive or object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
 * @example
 *
 * _.isBoolean(false);
 * // => true
 *
 * _.isBoolean(null);
 * // => false
 */

/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */

/**
 * Checks if `value` is in the array cache.
 *
 * @private
 * @name has
 * @memberOf SetCache
 * @param {*} value The value to search for.
 * @returns {number} Returns `true` if `value` is found, else `false`.
 */

/**
 * Checks if `value` is likely a prototype object.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
 */

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */

/**
 * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` if suitable for strict
 *  equality comparisons, else `false`.
 */

/**
 * Checks if `value` is suitable for use as unique object key.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
 */

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */

/**
 * Checks if a `cache` value for `key` exists.
 *
 * @private
 * @param {Object} cache The cache to query.
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */

/**
 * Checks if a hash value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Hash
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */

/**
 * Checks if a list cache value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf ListCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */

/**
 * Checks if a map value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf MapCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */

/**
 * Checks if a stack value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Stack
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */

/**
 * Checks if the given arguments are from an iteratee call.
 *
 * @private
 * @param {*} value The potential iteratee value argument.
 * @param {*} index The potential iteratee index or key argument.
 * @param {*} object The potential iteratee object argument.
 * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
 *  else `false`.
 */

/**
 * Clear event by name.
 *
 * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
 * @param {(String|Symbol)} evt The Event name.
 * @private
 */

/**
 * Clones the object and adds a camel cased property version.
 */

/**
 * Compares values to sort them in ascending order.
 *
 * @private
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {number} Returns the sort order indicator for `value`.
 */

/**
 * Computes the maximum value of `array`. If `array` is empty or falsey,
 * `undefined` is returned.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Math
 * @param {Array} array The array to iterate over.
 * @returns {*} Returns the maximum value.
 * @example
 *
 * _.max([4, 2, 8, 6]);
 * // => 8
 *
 * _.max([]);
 * // => undefined
 */

/**
 * Computes the minimum value of `array`. If `array` is empty or falsey,
 * `undefined` is returned.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Math
 * @param {Array} array The array to iterate over.
 * @returns {*} Returns the minimum value.
 * @example
 *
 * _.min([4, 2, 8, 6]);
 * // => 2
 *
 * _.min([]);
 * // => undefined
 */

/**
 * Computes whether the given element should automatically trigger the
 * `focus-visible` class being added, i.e. whether it should always match
 * `:focus-visible` when focused.
 * @param {Element} node
 * @returns {boolean}
 */

/**
 * Constructor to create a storage for our `EE` objects.
 * An `Events` instance is a plain object whose properties are event names.
 *
 * @constructor
 * @private
 */

/**
 * Convert camel cased property names to dash separated.
 */

/**
 * Convert dash separated strings to camel-cased.
 *
 * @param {String} str
 * @return {String}
 * @api private
 */

/**
 * Convert dash separated strings to pascal cased.
 *
 * @param {String} str
 * @return {String}
 * @api private
 */

/**
 * Convert nested rules to separate, remove them from original styles.
 */

/**
 * Converts JSS array value to a CSS string.
 *
 * `margin: [['5px', '10px']]` > `margin: 5px 10px;`
 * `border: ['1px', '2px']` > `border: 1px, 2px;`
 * `margin: [['5px', '10px'], '!important']` > `margin: 5px 10px !important;`
 * `color: ['red', !important]` > `color: red !important;`
 */

/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to convert.
 * @returns {string} Returns the source code.
 */

/**
 * Converts `map` to its key-value pairs.
 *
 * @private
 * @param {Object} map The map to convert.
 * @returns {Array} Returns the key-value pairs.
 */

/**
 * Converts `set` to an array of its values.
 *
 * @private
 * @param {Object} set The set to convert.
 * @returns {Array} Returns the values.
 */

/**
 * Converts `string` to an array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the converted array.
 */

/**
 * Converts `value` to a finite number.
 *
 * @static
 * @memberOf _
 * @since 4.12.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {number} Returns the converted number.
 * @example
 *
 * _.toFinite(3.2);
 * // => 3.2
 *
 * _.toFinite(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toFinite(Infinity);
 * // => 1.7976931348623157e+308
 *
 * _.toFinite('3.2');
 * // => 3.2
 */

/**
 * Converts `value` to a number.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to process.
 * @returns {number} Returns the number.
 * @example
 *
 * _.toNumber(3.2);
 * // => 3.2
 *
 * _.toNumber(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toNumber(Infinity);
 * // => Infinity
 *
 * _.toNumber('3.2');
 * // => 3.2
 */

/**
 * Converts `value` to a string key if it's not a string or symbol.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {string|symbol} Returns the key.
 */

/**
 * Converts `value` to a string using `Object.prototype.toString`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */

/**
 * Converts `value` to a string. An empty string is returned for `null`
 * and `undefined` values. The sign of `-0` is preserved.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 * @example
 *
 * _.toString(null);
 * // => ''
 *
 * _.toString(-0);
 * // => '-0'
 *
 * _.toString([1, 2, 3]);
 * // => '1,2,3'
 */

/**
 * Converts `value` to an integer.
 *
 * **Note:** This method is loosely based on
 * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {number} Returns the converted integer.
 * @example
 *
 * _.toInteger(3.2);
 * // => 3
 *
 * _.toInteger(Number.MIN_VALUE);
 * // => 0
 *
 * _.toInteger(Infinity);
 * // => 1.7976931348623157e+308
 *
 * _.toInteger('3.2');
 * // => 3
 */

/**
 * Converts a Rule to CSS string.
 */

/**
 * Converts a Unicode `string` to an array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the converted array.
 */

/**
 * Converts an ASCII `string` to an array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the converted array.
 */

/**
 * Converts the first character of `string` to upper case.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category String
 * @param {string} [string=''] The string to convert.
 * @returns {string} Returns the converted string.
 * @example
 *
 * _.upperFirst('fred');
 * // => 'Fred'
 *
 * _.upperFirst('FRED');
 * // => 'FRED'
 */

/**
 * Coordinate addition
 * @param a The first coordinate
 * @param b The second coordinate
 */

/**
 * Coordinate subtraction
 * @param a The first coordinate
 * @param b The second coordinate
 */

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/**
 * Copyright 2015, Yahoo! Inc.
 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
 */

/**
 * Create a rule instance.
 */

/**
 * Create the React Context
 */

/**
 * Creates a Redux store that holds the state tree.
 *
 * **We recommend using `configureStore` from the
 * `@reduxjs/toolkit` package**, which replaces `createStore`:
 * **https://redux.js.org/introduction/why-rtk-is-redux-today**
 *
 * The only way to change the data in the store is to call `dispatch()` on it.
 *
 * There should only be a single store in your app. To specify how different
 * parts of the state tree respond to actions, you may combine several reducers
 * into a single reducer function by using `combineReducers`.
 *
 * @param {Function} reducer A function that returns the next state tree, given
 * the current state tree and the action to handle.
 *
 * @param {any} [preloadedState] The initial state. You may optionally specify it
 * to hydrate the state from the server in universal apps, or to restore a
 * previously serialized user session.
 * If you use `combineReducers` to produce the root reducer function, this must be
 * an object with the same shape as `combineReducers` keys.
 *
 * @param {Function} [enhancer] The store enhancer. You may optionally specify it
 * to enhance the store with third-party capabilities such as middleware,
 * time travel, persistence, etc. The only store enhancer that ships with Redux
 * is `applyMiddleware()`.
 *
 * @returns {Store} A Redux store that lets you read the state, dispatch actions
 * and subscribe to changes.
 */

/**
 * Creates a `_.find` or `_.findLast` function.
 *
 * @private
 * @param {Function} findIndexFunc The function to find the collection index.
 * @returns {Function} Returns the new find function.
 */

/**
 * Creates a `_.range` or `_.rangeRight` function.
 *
 * @private
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new range function.
 */

/**
 * Creates a `baseEach` or `baseEachRight` function.
 *
 * @private
 * @param {Function} eachFunc The function to iterate over a collection.
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new base function.
 */

/**
 * Creates a base function for methods like `_.forIn` and `_.forOwn`.
 *
 * @private
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new base function.
 */

/**
 * Creates a debounced function that delays invoking `func` until after `wait`
 * milliseconds have elapsed since the last time the debounced function was
 * invoked. The debounced function comes with a `cancel` method to cancel
 * delayed `func` invocations and a `flush` method to immediately invoke them.
 * Provide `options` to indicate whether `func` should be invoked on the
 * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
 * with the last arguments provided to the debounced function. Subsequent
 * calls to the debounced function return the result of the last `func`
 * invocation.
 *
 * **Note:** If `leading` and `trailing` options are `true`, `func` is
 * invoked on the trailing edge of the timeout only if the debounced function
 * is invoked more than once during the `wait` timeout.
 *
 * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
 * until to the next tick, similar to `setTimeout` with a timeout of `0`.
 *
 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
 * for details over the differences between `_.debounce` and `_.throttle`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to debounce.
 * @param {number} [wait=0] The number of milliseconds to delay.
 * @param {Object} [options={}] The options object.
 * @param {boolean} [options.leading=false]
 *  Specify invoking on the leading edge of the timeout.
 * @param {number} [options.maxWait]
 *  The maximum time `func` is allowed to be delayed before it's invoked.
 * @param {boolean} [options.trailing=true]
 *  Specify invoking on the trailing edge of the timeout.
 * @returns {Function} Returns the new debounced function.
 * @example
 *
 * // Avoid costly calculations while the window size is in flux.
 * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
 *
 * // Invoke `sendMail` when clicked, debouncing subsequent calls.
 * jQuery(element).on('click', _.debounce(sendMail, 300, {
 *   'leading': true,
 *   'trailing': false
 * }));
 *
 * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
 * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
 * var source = new EventSource('/stream');
 * jQuery(source).on('message', debounced);
 *
 * // Cancel the trailing debounced invocation.
 * jQuery(window).on('popstate', debounced.cancel);
 */

/**
 * Creates a flattened array of values by running each element in `collection`
 * thru `iteratee` and flattening the mapped results. The iteratee is invoked
 * with three arguments: (value, index|key, collection).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
 * @returns {Array} Returns the new flattened array.
 * @example
 *
 * function duplicate(n) {
 *   return [n, n];
 * }
 *
 * _.flatMap([1, 2], duplicate);
 * // => [1, 1, 2, 2]
 */

/**
 * Creates a function like `_.lowerFirst`.
 *
 * @private
 * @param {string} methodName The name of the `String` case method to use.
 * @returns {Function} Returns the new case function.
 */

/**
 * Creates a function that memoizes the result of `func`. If `resolver` is
 * provided, it determines the cache key for storing the result based on the
 * arguments provided to the memoized function. By default, the first argument
 * provided to the memoized function is used as the map cache key. The `func`
 * is invoked with the `this` binding of the memoized function.
 *
 * **Note:** The cache is exposed as the `cache` property on the memoized
 * function. Its creation may be customized by replacing the `_.memoize.Cache`
 * constructor with one whose instances implement the
 * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
 * method interface of `clear`, `delete`, `get`, `has`, and `set`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to have its output memoized.
 * @param {Function} [resolver] The function to resolve the cache key.
 * @returns {Function} Returns the new memoized function.
 * @example
 *
 * var object = { 'a': 1, 'b': 2 };
 * var other = { 'c': 3, 'd': 4 };
 *
 * var values = _.memoize(_.values);
 * values(object);
 * // => [1, 2]
 *
 * values(other);
 * // => [3, 4]
 *
 * object.a = 2;
 * values(object);
 * // => [1, 2]
 *
 * // Modify the result cache.
 * values.cache.set(object, ['a', 'b']);
 * values(object);
 * // => ['a', 'b']
 *
 * // Replace `_.memoize.Cache`.
 * _.memoize.Cache = WeakMap;
 */

/**
 * Creates a function that returns `value`.
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Util
 * @param {*} value The value to return from the new function.
 * @returns {Function} Returns the new constant function.
 * @example
 *
 * var objects = _.times(2, _.constant({ 'a': 1 }));
 *
 * console.log(objects);
 * // => [{ 'a': 1 }, { 'a': 1 }]
 *
 * console.log(objects[0] === objects[1]);
 * // => true
 */

/**
 * Creates a function that returns the value at `path` of a given object.
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Util
 * @param {Array|string} path The path of the property to get.
 * @returns {Function} Returns the new accessor function.
 * @example
 *
 * var objects = [
 *   { 'a': { 'b': 2 } },
 *   { 'a': { 'b': 1 } }
 * ];
 *
 * _.map(objects, _.property('a.b'));
 * // => [2, 1]
 *
 * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
 * // => [1, 2]
 */

/**
 * Creates a function that'll short out and invoke `identity` instead
 * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
 * milliseconds.
 *
 * @private
 * @param {Function} func The function to restrict.
 * @returns {Function} Returns the new shortable function.
 */

/**
 * Creates a hash object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */

/**
 * Creates a map cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */

/**
 * Creates a stack cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */

/**
 * Creates a throttled function that only invokes `func` at most once per
 * every `wait` milliseconds. The throttled function comes with a `cancel`
 * method to cancel delayed `func` invocations and a `flush` method to
 * immediately invoke them. Provide `options` to indicate whether `func`
 * should be invoked on the leading and/or trailing edge of the `wait`
 * timeout. The `func` is invoked with the last arguments provided to the
 * throttled function. Subsequent calls to the throttled function return the
 * result of the last `func` invocation.
 *
 * **Note:** If `leading` and `trailing` options are `true`, `func` is
 * invoked on the trailing edge of the timeout only if the throttled function
 * is invoked more than once during the `wait` timeout.
 *
 * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
 * until to the next tick, similar to `setTimeout` with a timeout of `0`.
 *
 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
 * for details over the differences between `_.throttle` and `_.debounce`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to throttle.
 * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
 * @param {Object} [options={}] The options object.
 * @param {boolean} [options.leading=true]
 *  Specify invoking on the leading edge of the timeout.
 * @param {boolean} [options.trailing=true]
 *  Specify invoking on the trailing edge of the timeout.
 * @returns {Function} Returns the new throttled function.
 * @example
 *
 * // Avoid excessively updating the position while scrolling.
 * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
 *
 * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
 * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
 * jQuery(element).on('click', throttled);
 *
 * // Cancel the trailing throttled invocation.
 * jQuery(window).on('popstate', throttled.cancel);
 */

/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */

/**
 * Creates an array of elements, sorted in ascending order by the results of
 * running each element in a collection thru each iteratee. This method
 * performs a stable sort, that is, it preserves the original sort order of
 * equal elements. The iteratees are invoked with one argument: (value).
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {...(Function|Function[])} [iteratees=[_.identity]]
 *  The iteratees to sort by.
 * @returns {Array} Returns the new sorted array.
 * @example
 *
 * var users = [
 *   { 'user': 'fred',   'age': 48 },
 *   { 'user': 'barney', 'age': 36 },
 *   { 'user': 'fred',   'age': 30 },
 *   { 'user': 'barney', 'age': 34 }
 * ];
 *
 * _.sortBy(users, [function(o) { return o.user; }]);
 * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 30]]
 *
 * _.sortBy(users, ['user', 'age']);
 * // => objects for [['barney', 34], ['barney', 36], ['fred', 30], ['fred', 48]]
 */

/**
 * Creates an array of numbers (positive and/or negative) progressing from
 * `start` up to, but not including, `end`. A step of `-1` is used if a negative
 * `start` is specified without an `end` or `step`. If `end` is not specified,
 * it's set to `start` with `start` then set to `0`.
 *
 * **Note:** JavaScript follows the IEEE-754 standard for resolving
 * floating-point values which can produce unexpected results.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Util
 * @param {number} [start=0] The start of the range.
 * @param {number} end The end of the range.
 * @param {number} [step=1] The value to increment or decrement by.
 * @returns {Array} Returns the range of numbers.
 * @see _.inRange, _.rangeRight
 * @example
 *
 * _.range(4);
 * // => [0, 1, 2, 3]
 *
 * _.range(-4);
 * // => [0, -1, -2, -3]
 *
 * _.range(1, 5);
 * // => [1, 2, 3, 4]
 *
 * _.range(0, 20, 5);
 * // => [0, 5, 10, 15]
 *
 * _.range(0, -4, -1);
 * // => [0, -1, -2, -3]
 *
 * _.range(1, 4, 0);
 * // => [1, 1, 1]
 *
 * _.range(0);
 * // => []
 */

/**
 * Creates an array of own enumerable property names and symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names and symbols.
 */

/**
 * Creates an array of the enumerable property names of the array-like `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @param {boolean} inherited Specify returning inherited property names.
 * @returns {Array} Returns the array of property names.
 */

/**
 * Creates an array of the own enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects. See the
 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * for more details.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keys(new Foo);
 * // => ['a', 'b'] (iteration order is not guaranteed)
 *
 * _.keys('hi');
 * // => ['0', '1']
 */

/**
 * Creates an array of values by running each element in `collection` thru
 * `iteratee`. The iteratee is invoked with three arguments:
 * (value, index|key, collection).
 *
 * Many lodash methods are guarded to work as iteratees for methods like
 * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
 *
 * The guarded methods are:
 * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
 * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
 * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
 * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 * @example
 *
 * function square(n) {
 *   return n * n;
 * }
 *
 * _.map([4, 8], square);
 * // => [16, 64]
 *
 * _.map({ 'a': 4, 'b': 8 }, square);
 * // => [16, 64] (iteration order is not guaranteed)
 *
 * var users = [
 *   { 'user': 'barney' },
 *   { 'user': 'fred' }
 * ];
 *
 * // The `_.property` iteratee shorthand.
 * _.map(users, 'user');
 * // => ['barney', 'fred']
 */

/**
 * Creates an list cache object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */

/**
 * Creates an object with the same keys as `object` and values generated
 * by running each own enumerable string keyed property of `object` thru
 * `iteratee`. The iteratee is invoked with three arguments:
 * (value, key, object).
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Object
 * @param {Object} object The object to iterate over.
 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
 * @returns {Object} Returns the new mapped object.
 * @see _.mapKeys
 * @example
 *
 * var users = {
 *   'fred':    { 'user': 'fred',    'age': 40 },
 *   'pebbles': { 'user': 'pebbles', 'age': 1 }
 * };
 *
 * _.mapValues(users, function(o) { return o.age; });
 * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
 *
 * // The `_.property` iteratee shorthand.
 * _.mapValues(users, 'age');
 * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
 */

/**
 * Determine if two cartesian coordinate offsets are equal
 * @param offsetA
 * @param offsetB
 */

/**
 * Determines if a given element is a DOM element name (i.e. not a React component).
 */

/**
 * Determines if the given handler IDs are dirty or not.
 *
 * @param dirtyIds The set of dirty handler ids
 * @param handlerIds The set of handler ids to check
 */

/**
 * Determines if two arrays of items are equal
 * @param a The first array of items
 * @param b The second array of items
 */

/**
 * Determines the x,y offset between the client offset and the initial client offset
 *
 * @param state The offset state to compute from
 */

/**
 * Extracts a styles object with only props that contain function values.
 */

/**
 * Extracts event handlers from a given object.
 * A prop is considered an event handler if it is a function and its name starts with `on`.
 *
 * @param object An object to extract event handlers from.
 * @param excludeKeys An array of keys to exclude from the returned object.
 */

/**
 * Find a comment with "jss" inside.
 */

/**
 * Find a node before which we can insert the sheet.
 */

/**
 * Find attached sheet with an index higher than the passed one.
 */

/**
 * Find attached sheet with the highest index.
 */

/**
 * Generates string classKey based on the properties provided. It starts with the
 * variant if defined, and then it appends all other properties in alphabetical order.
 * @param {object} props - the properties for which the classKey should be created
 */

/**
 * Generates string classKey based on the properties provided. It starts with the
 * variant if defined, and then it appends all other properties in alphabetical order.
 * @param {object} props - the properties for which the classKey should be created.
 */

/**
 * Get domain of data by key
 * @param  {Array}   data      The data displayed in the chart
 * @param  {String}  key       The unique key of a group of data
 * @param  {String}  type      The type of axis
 * @param  {Boolean} filterNil Whether or not filter nil values
 * @return {Array} Domain of data
 */

/**
 * Get the content to be displayed in the tooltip
 * @param  {Object} state          Current state
 * @param  {Array}  chartData      The data defined in chart
 * @param  {Number} activeIndex    Active index of data
 * @param  {String} activeLabel    Active label of data
 * @return {Array}                 The content of tooltip
 */

/**
 * Get the main color of each graphic item
 * @param  {ReactElement} item A graphic item
 * @return {String}            Color
 */

/**
 * Gets the data for `map`.
 *
 * @private
 * @param {Object} map The map to query.
 * @param {string} key The reference key.
 * @returns {*} Returns the map data.
 */

/**
 * Gets the hash value for `key`.
 *
 * @private
 * @name get
 * @memberOf Hash
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */

/**
 * Gets the index at which the `key` is found in `array` of key-value pairs.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} key The key to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */

/**
 * Gets the last element of `array`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Array
 * @param {Array} array The array to query.
 * @returns {*} Returns the last element of `array`.
 * @example
 *
 * _.last([1, 2, 3]);
 * // => 3
 */

/**
 * Gets the list cache value for `key`.
 *
 * @private
 * @name get
 * @memberOf ListCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */

/**
 * Gets the map value for `key`.
 *
 * @private
 * @name get
 * @memberOf MapCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */

/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */

/**
 * Gets the property names, values, and compare flags of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the match data of `object`.
 */

/**
 * Gets the stack value for `key`.
 *
 * @private
 * @name get
 * @memberOf Stack
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */

/**
 * Gets the timestamp of the number of milliseconds that have elapsed since
 * the Unix epoch (1 January 1970 00:00:00 UTC).
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Date
 * @returns {number} Returns the timestamp.
 * @example
 *
 * _.defer(function(stamp) {
 *   console.log(_.now() - stamp);
 * }, _.now());
 * // => Logs the number of milliseconds it took for the deferred invocation.
 */

/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */

/**
 * Gets the value at `path` of `object`. If the resolved value is
 * `undefined`, the `defaultValue` is returned in its place.
 *
 * @static
 * @memberOf _
 * @since 3.7.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @param {*} [defaultValue] The value returned for `undefined` resolved values.
 * @returns {*} Returns the resolved value.
 * @example
 *
 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
 *
 * _.get(object, 'a[0].b.c');
 * // => 3
 *
 * _.get(object, ['a', '0', 'b', 'c']);
 * // => 3
 *
 * _.get(object, 'a.b.c', 'default');
 * // => 'default'
 */

/**
 * Given `this.props.children`, return an object mapping key to child.
 *
 * @param {*} children `this.props.children`
 * @return {object} Mapping of key to child
 */

/**
 * If `componentProps` is a function, calls it with the provided `ownerState`.
 * Otherwise, just returns `componentProps`.
 */

/**
 * If at any point a user clicks with a pointing device, ensure that we change
 * the modality away from keyboard.
 * This avoids the situation where a user presses a key on an already focused
 * element, and then clicks on a different element, focusing it with a
 * pointing device, while we still think we're in keyboard modality.
 */

/**
 * Indent a string.
 * http://jsperf.com/array-join-vs-for
 */

/**
 * Insert style element into the DOM.
 */

/**
 * Internal utility hook to get an array-version of spec.accept.
 * The main utility here is that we aren't creating a new array on every render if a non-array spec.accept is passed in.
 * @param spec
 */

/**
 * Iterates over elements of `collection`, returning the first element
 * `predicate` returns truthy for. The predicate is invoked with three
 * arguments: (value, index|key, collection).
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Collection
 * @param {Array|Object} collection The collection to inspect.
 * @param {Function} [predicate=_.identity] The function invoked per iteration.
 * @param {number} [fromIndex=0] The index to search from.
 * @returns {*} Returns the matched element, else `undefined`.
 * @example
 *
 * var users = [
 *   { 'user': 'barney',  'age': 36, 'active': true },
 *   { 'user': 'fred',    'age': 40, 'active': false },
 *   { 'user': 'pebbles', 'age': 1,  'active': true }
 * ];
 *
 * _.find(users, function(o) { return o.age < 40; });
 * // => object for 'barney'
 *
 * // The `_.matches` iteratee shorthand.
 * _.find(users, { 'age': 1, 'active': true });
 * // => object for 'pebbles'
 *
 * // The `_.matchesProperty` iteratee shorthand.
 * _.find(users, ['active', false]);
 * // => object for 'fred'
 *
 * // The `_.property` iteratee shorthand.
 * _.find(users, 'active');
 * // => object for 'barney'
 */

/**
 * Keep track of our keyboard modality state with `hadKeyboardEvent`.
 * If the most recent user interaction was via the keyboard;
 * and the key press did not include a meta, alt/option, or control key;
 * then the modality is keyboard. Otherwise, the modality is not keyboard.
 * @param {KeyboardEvent} event
 */

/**
 * Listen for click events that occur somewhere in the document, outside of the element itself.
 * For instance, if you need to hide a menu when people click anywhere else on your page.
 *
 * Demos:
 *
 * - [Click-Away Listener](https://mui.com/base/react-click-away-listener/)
 *
 * API:
 *
 * - [ClickAwayListener API](https://mui.com/base/api/click-away-listener/)
 */

/**
 * Merges the slot component internal props (usually coming from a hook)
 * with the externally provided ones.
 *
 * The merge order is (the latter overrides the former):
 * 1. The internal props (specified as a getter function to work with get*Props hook result)
 * 2. Additional props (specified internally on an unstyled component)
 * 3. External props specified on the owner component. These should only be used on a root slot.
 * 4. External props specified in the `slotProps.*` prop.
 * 5. The `className` prop - combined from all the above.
 * @param parameters
 * @returns
 */

/**
 * Minimal `EventEmitter` interface that is molded against the Node.js
 * `EventEmitter` interface.
 *
 * @constructor
 * @public
 */

/**
 * Modal is a lower-level construct that is leveraged by the following components:
 *
 * *   [Dialog](https://mui.com/material-ui/api/dialog/)
 * *   [Drawer](https://mui.com/material-ui/api/drawer/)
 * *   [Menu](https://mui.com/material-ui/api/menu/)
 * *   [Popover](https://mui.com/material-ui/api/popover/)
 *
 * If you are creating a modal dialog, you probably want to use the [Dialog](https://mui.com/material-ui/api/dialog/) component
 * rather than directly using Modal.
 *
 * This component shares many concepts with [react-overlays](https://react-bootstrap.github.io/react-overlays/#modals).
 *
 * Demos:
 *
 * - [Unstyled Modal](https://mui.com/base/react-modal/)
 *
 * API:
 *
 * - [ModalUnstyled API](https://mui.com/base/api/modal-unstyled/)
 */

/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */

/**
 * Performs a deep comparison between two values to determine if they are
 * equivalent.
 *
 * **Note:** This method supports comparing arrays, array buffers, booleans,
 * date objects, error objects, maps, numbers, `Object` objects, regexes,
 * sets, strings, symbols, and typed arrays. `Object` objects are compared
 * by their own, not inherited, enumerable properties. Functions and DOM
 * nodes are compared by strict equality, i.e. `===`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.isEqual(object, other);
 * // => true
 *
 * object === other;
 * // => false
 */

/**
 * Portals provide a first-class way to render children into a DOM node
 * that exists outside the DOM hierarchy of the parent component.
 *
 * Demos:
 *
 * - [Portal](https://mui.com/base/react-portal/)
 *
 * API:
 *
 * - [Portal API](https://mui.com/base/api/portal/)
 */

/**
 * Private module reserved for @mui packages.
 */

/**
 * Read jss nonce setting from the page if the user has set it.
 */

/**
 * Recursive deep style passing function
 */

/**
 * Remove all listeners, or those of the specified event.
 *
 * @param {(String|Symbol)} [event] The event name.
 * @returns {EventEmitter} `this`.
 * @public
 */

/**
 * Remove the listeners of a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn Only remove the listeners that match this function.
 * @param {*} context Only remove the listeners that have this context.
 * @param {Boolean} once Only remove one-time listeners.
 * @returns {EventEmitter} `this`.
 * @public
 */

/**
 * Removes `key` and its value from the hash.
 *
 * @private
 * @name delete
 * @memberOf Hash
 * @param {Object} hash The hash to modify.
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */

/**
 * Removes `key` and its value from the list cache.
 *
 * @private
 * @name delete
 * @memberOf ListCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */

/**
 * Removes `key` and its value from the map.
 *
 * @private
 * @name delete
 * @memberOf MapCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */

/**
 * Removes `key` and its value from the stack.
 *
 * @private
 * @name delete
 * @memberOf Stack
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */

/**
 * Removes all key-value entries from the hash.
 *
 * @private
 * @name clear
 * @memberOf Hash
 */

/**
 * Removes all key-value entries from the list cache.
 *
 * @private
 * @name clear
 * @memberOf ListCache
 */

/**
 * Removes all key-value entries from the map.
 *
 * @private
 * @name clear
 * @memberOf MapCache
 */

/**
 * Removes all key-value entries from the stack.
 *
 * @private
 * @name clear
 * @memberOf Stack
 */

/**
 * Removes event handlers from the given object.
 * A field is considered an event handler if it is a function with a name beginning with `on`.
 *
 * @param object Object to remove event handlers from.
 * @returns Object with event handlers removed.
 */

/**
 * Replaces the letter with the capital letter
 *
 * @param {String} match
 * @param {String} c
 * @return {String}
 * @api private
 */

/**
 * Representation of a single event listener.
 *
 * @param {Function} fn The listener function.
 * @param {*} context The context to invoke the listener with.
 * @param {Boolean} [once=false] Specify if the listener is a one-time listener.
 * @constructor
 * @private
 */

/**
 * Return an array listing the events for which the emitter has registered
 * listeners.
 *
 * @returns {Array}
 * @public
 */

/**
 * Return the listeners registered for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @returns {Array} The registered listeners.
 * @public
 */

/**
 * Return the number of listeners listening to a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @returns {Number} The number of listeners.
 * @public
 */

/**
 * Returns prefixed value if needed. Returns `false` if value is not supported.
 *
 * @param {String} property
 * @param {String} value
 * @return {String|Boolean}
 * @api public
 */

/**
 * Returns prefixed value transition/transform if needed.
 *
 * @param {String} match
 * @param {String} p1
 * @param {String} p2
 * @return {String}
 * @api private
 */

/**
 * Returns the cartesian distance of the drag source component's position, based on its position
 * at the time when the current drag operation has started, and the movement difference.
 *
 * Returns null if no item is being dragged.
 *
 * @param state The offset state to compute from
 */

/**
 * Returns tooltip data based on a mouse position (as a parameter or in state)
 * @param  {Object} state     current state
 * @param  {Array}  chartData the data defined in chart
 * @param  {String} layout     The layout type of chart
 * @param  {Object} rangeObj  { x, y } coordinates
 * @return {Object}           Tooltip data data
 */

/**
 * Safe chained function.
 *
 * Will only create a new function if needed,
 * otherwise will pass back existing functions or null.
 */

/**
 * Sets the `toString` method of `func` to return `string`.
 *
 * @private
 * @param {Function} func The function to modify.
 * @param {Function} string The `toString` result.
 * @returns {Function} Returns `func`.
 */

/**
 * Sets the hash `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Hash
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the hash instance.
 */

/**
 * Sets the list cache `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf ListCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the list cache instance.
 */

/**
 * Sets the map `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf MapCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the map cache instance.
 */

/**
 * Sets the stack `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Stack
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the stack cache instance.
 */

/**
 * Sort props by length.
 */

/**
 * TODO v5: consider making it private
 *
 * passes {value} to {ref}
 *
 * WARNING: Be sure to only call this inside a callback that is passed as a ref.
 * Otherwise, make sure to cleanup the previous {ref} if it changes. See
 * https://github.com/mui/material-ui/issues/13539
 *
 * Useful if you want to expose the ref of an inner component to the public API
 * while still using it inside the component.
 * @param ref A ref callback or ref object. If anything falsy, this is a no-op.
 */

/**
 * Takes a domain and user props to determine whether he provided the domain via props or if we need to calculate it.
 * @param   {AxisDomain}  domain              The potential domain from props
 * @param   {Boolean}     allowDataOverflow   from props
 * @param   {String}      axisType            from props
 * @returns {Boolean}                         `true` if domain is specified by user
 */

/**
 * Test if a keyframe at-rule should be prefixed or not
 *
 * @param {String} vendor prefix string for the current browser.
 * @return {String}
 * @api public
 */

/**
 * Test if a property is supported, returns supported property with vendor
 * prefix if required. Returns `false` if not supported.
 *
 * @param {String} prop dash separated
 * @param {Object} [options]
 * @return {String|Boolean}
 * @api public
 */

/**
 * The Slide transition is used by the [Drawer](/material-ui/react-drawer/) component.
 * It uses [react-transition-group](https://github.com/reactjs/react-transition-group) internally.
 */

/**
 * The Transition component lets you describe a transition from one component
 * state to another _over time_ with a simple declarative API. Most commonly
 * it's used to animate the mounting and unmounting of a component, but can also
 * be used to describe in-place transition states as well.
 *
 * ---
 *
 * **Note**: `Transition` is a platform-agnostic base component. If you're using
 * transitions in CSS, you'll probably want to use
 * [`CSSTransition`](https://reactcommunity.org/react-transition-group/css-transition)
 * instead. It inherits all the features of `Transition`, but contains
 * additional features necessary to play nice with CSS transitions (hence the
 * name of the component).
 *
 * ---
 *
 * By default the `Transition` component does not alter the behavior of the
 * component it renders, it only tracks "enter" and "exit" states for the
 * components. It's up to you to give meaning and effect to those states. For
 * example we can add styles to a component when it enters or exits:
 *
 * ```jsx
 * import { Transition } from 'react-transition-group';
 *
 * const duration = 300;
 *
 * const defaultStyle = {
 *   transition: `opacity ${duration}ms ease-in-out`,
 *   opacity: 0,
 * }
 *
 * const transitionStyles = {
 *   entering: { opacity: 0 },
 *   entered:  { opacity: 1 },
 * };
 *
 * const Fade = ({ in: inProp }) => (
 *   <Transition in={inProp} timeout={duration}>
 *     {state => (
 *       <div style={{
 *         ...defaultStyle,
 *         ...transitionStyles[state]
 *       }}>
 *         I'm a fade Transition!
 *       </div>
 *     )}
 *   </Transition>
 * );
 * ```
 *
 * There are 4 main states a Transition can be in:
 *  - `'entering'`
 *  - `'entered'`
 *  - `'exiting'`
 *  - `'exited'`
 *
 * Transition state is toggled via the `in` prop. When `true` the component
 * begins the "Enter" stage. During this stage, the component will shift from
 * its current transition state, to `'entering'` for the duration of the
 * transition and then to the `'entered'` stage once it's complete. Let's take
 * the following example (we'll use the
 * [useState](https://reactjs.org/docs/hooks-reference.html#usestate) hook):
 *
 * ```jsx
 * function App() {
 *   const [inProp, setInProp] = useState(false);
 *   return (
 *     <div>
 *       <Transition in={inProp} timeout={500}>
 *         {state => (
 *           // ...
 *         )}
 *       </Transition>
 *       <button onClick={() => setInProp(true)}>
 *         Click to Enter
 *       </button>
 *     </div>
 *   );
 * }
 * ```
 *
 * When the button is clicked the component will shift to the `'entering'` state
 * and stay there for 500ms (the value of `timeout`) before it finally switches
 * to `'entered'`.
 *
 * When `in` is `false` the same thing happens except the state moves from
 * `'exiting'` to `'exited'`.
 */

/**
 * The `<ReplaceTransition>` component is a specialized `Transition` component
 * that animates between two children.
 *
 * ```jsx
 * <ReplaceTransition in>
 *   <Fade><div>I appear first</div></Fade>
 *   <Fade><div>I replace the above</div></Fade>
 * </ReplaceTransition>
 * ```
 */

/**
 * The base implementation of `_.every` without support for iteratee shorthands.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {boolean} Returns `true` if all elements pass the predicate check,
 *  else `false`
 */

/**
 * The base implementation of `_.findIndex` and `_.findLastIndex` without
 * support for iteratee shorthands.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {Function} predicate The function invoked per iteration.
 * @param {number} fromIndex The index to search from.
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */

/**
 * The base implementation of `_.flatten` with support for restricting flattening.
 *
 * @private
 * @param {Array} array The array to flatten.
 * @param {number} depth The maximum recursion depth.
 * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
 * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
 * @param {Array} [result=[]] The initial result value.
 * @returns {Array} Returns the new flattened array.
 */

/**
 * The base implementation of `_.forEach` without support for iteratee shorthands.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array|Object} Returns `collection`.
 */

/**
 * The base implementation of `_.forOwn` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Object} Returns `object`.
 */

/**
 * The base implementation of `_.get` without support for default values.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @returns {*} Returns the resolved value.
 */

/**
 * The base implementation of `_.gt` which doesn't coerce arguments.
 *
 * @private
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if `value` is greater than `other`,
 *  else `false`.
 */

/**
 * The base implementation of `_.hasIn` without support for deep paths.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {Array|string} key The key to check.
 * @returns {boolean} Returns `true` if `key` exists, else `false`.
 */

/**
 * The base implementation of `_.inRange` which doesn't coerce arguments.
 *
 * @private
 * @param {number} number The number to check.
 * @param {number} start The start of the range.
 * @param {number} end The end of the range.
 * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
 */

/**
 * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} value The value to search for.
 * @param {number} fromIndex The index to search from.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */

/**
 * The base implementation of `_.isArguments`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 */

/**
 * The base implementation of `_.isEqual` which supports partial comparisons
 * and tracks traversed objects.
 *
 * @private
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @param {boolean} bitmask The bitmask flags.
 *  1 - Unordered comparison
 *  2 - Partial comparison
 * @param {Function} [customizer] The function to customize comparisons.
 * @param {Object} [stack] Tracks traversed `value` and `other` objects.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 */

/**
 * The base implementation of `_.isMatch` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The object to inspect.
 * @param {Object} source The object of property values to match.
 * @param {Array} matchData The property names, values, and compare flags to match.
 * @param {Function} [customizer] The function to customize comparisons.
 * @returns {boolean} Returns `true` if `object` is a match, else `false`.
 */

/**
 * The base implementation of `_.isNaN` without support for number objects.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
 */

/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */

/**
 * The base implementation of `_.isTypedArray` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 */

/**
 * The base implementation of `_.iteratee`.
 *
 * @private
 * @param {*} [value=_.identity] The value to convert to an iteratee.
 * @returns {Function} Returns the iteratee.
 */

/**
 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */

/**
 * The base implementation of `_.lt` which doesn't coerce arguments.
 *
 * @private
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if `value` is less than `other`,
 *  else `false`.
 */

/**
 * The base implementation of `_.map` without support for iteratee shorthands.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 */

/**
 * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
 *
 * @private
 * @param {string} path The path of the property to get.
 * @param {*} srcValue The value to match.
 * @returns {Function} Returns the new spec function.
 */

/**
 * The base implementation of `_.matches` which doesn't clone `source`.
 *
 * @private
 * @param {Object} source The object of property values to match.
 * @returns {Function} Returns the new spec function.
 */

/**
 * The base implementation of `_.orderBy` without param guards.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
 * @param {string[]} orders The sort orders of `iteratees`.
 * @returns {Array} Returns the new sorted array.
 */

/**
 * The base implementation of `_.property` without support for deep paths.
 *
 * @private
 * @param {string} key The key of the property to get.
 * @returns {Function} Returns the new accessor function.
 */

/**
 * The base implementation of `_.range` and `_.rangeRight` which doesn't
 * coerce arguments.
 *
 * @private
 * @param {number} start The start of the range.
 * @param {number} end The end of the range.
 * @param {number} step The value to increment or decrement by.
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Array} Returns the range of numbers.
 */

/**
 * The base implementation of `_.rest` which doesn't validate or coerce arguments.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @param {number} [start=func.length-1] The start position of the rest parameter.
 * @returns {Function} Returns the new function.
 */

/**
 * The base implementation of `_.slice` without an iteratee call guard.
 *
 * @private
 * @param {Array} array The array to slice.
 * @param {number} [start=0] The start position.
 * @param {number} [end=array.length] The end position.
 * @returns {Array} Returns the slice of `array`.
 */

/**
 * The base implementation of `_.some` without support for iteratee shorthands.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {boolean} Returns `true` if any element passes the predicate check,
 *  else `false`.
 */

/**
 * The base implementation of `_.sortBy` which uses `comparer` to define the
 * sort order of `array` and replaces criteria objects with their corresponding
 * values.
 *
 * @private
 * @param {Array} array The array to sort.
 * @param {Function} comparer The function to define sort order.
 * @returns {Array} Returns `array`.
 */

/**
 * The base implementation of `_.times` without support for iteratee shorthands
 * or max array length checks.
 *
 * @private
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 */

/**
 * The base implementation of `_.toString` which doesn't convert nullish
 * values to empty strings.
 *
 * @private
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 */

/**
 * The base implementation of `_.trim`.
 *
 * @private
 * @param {string} string The string to trim.
 * @returns {string} Returns the trimmed string.
 */

/**
 * The base implementation of `_.unary` without support for storing metadata.
 *
 * @private
 * @param {Function} func The function to cap arguments for.
 * @returns {Function} Returns the new capped function.
 */

/**
 * The base implementation of `_.uniqBy` without support for iteratee shorthands.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {Function} [iteratee] The iteratee invoked per element.
 * @param {Function} [comparator] The comparator invoked per element.
 * @returns {Array} Returns the new duplicate free array.
 */

/**
 * The base implementation of `assignValue` and `assignMergeValue` without
 * value checks.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */

/**
 * The base implementation of `baseForOwn` which iterates over `object`
 * properties returned by `keysFunc` and invokes `iteratee` for each property.
 * Iteratee functions may exit iteration early by explicitly returning `false`.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @returns {Object} Returns `object`.
 */

/**
 * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
 * `keysFunc` and `symbolsFunc` to get the enumerable property names and
 * symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @param {Function} symbolsFunc The function to get the symbols of `object`.
 * @returns {Array} Returns the array of property names and symbols.
 */

/**
 * The base implementation of `getTag` without fallbacks for buggy environments.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */

/**
 * The base implementation of `setToString` without support for hot loop shorting.
 *
 * @private
 * @param {Function} func The function to modify.
 * @param {Function} string The `toString` result.
 * @returns {Function} Returns `func`.
 */

/**
 * The base implementation of methods like `_.max` and `_.min` which accepts a
 * `comparator` to determine the extremum value.
 *
 * @private
 * @param {Array} array The array to iterate over.
 * @param {Function} iteratee The iteratee invoked per iteration.
 * @param {Function} comparator The comparator used to compare values.
 * @returns {*} Returns the extremum value.
 */

/**
 * The least square linear regression
 * @param {Array} data The array of points
 * @returns {Object} The domain of x, and the parameter of linear function
 */

/**
 * These are private action types reserved by Redux.
 * For any unknown actions, you must return the current state.
 * If the current state is undefined, you must return the initial state.
 * Do not reference these action types directly in your code.
 */

/**
 * This function is like `arrayIncludes` except that it accepts a comparator.
 *
 * @private
 * @param {Array} [array] The array to inspect.
 * @param {*} target The value to search for.
 * @param {Function} comparator The comparator invoked per element.
 * @returns {boolean} Returns `true` if `target` is found, else `false`.
 */

/**
 * This is the list of the style rule name we use as drop in replacement for the built-in
 * pseudo classes (:checked, :disabled, :focused, etc.).
 *
 * Why do they exist in the first place?
 * These classes are used at a specificity of 2.
 * It allows them to override previously defined styles as well as
 * being untouched by simple user overrides.
 */

/**
 * This method is like `_.find` except that it returns the index of the first
 * element `predicate` returns truthy for instead of the element itself.
 *
 * @static
 * @memberOf _
 * @since 1.1.0
 * @category Array
 * @param {Array} array The array to inspect.
 * @param {Function} [predicate=_.identity] The function invoked per iteration.
 * @param {number} [fromIndex=0] The index to search from.
 * @returns {number} Returns the index of the found element, else `-1`.
 * @example
 *
 * var users = [
 *   { 'user': 'barney',  'active': false },
 *   { 'user': 'fred',    'active': false },
 *   { 'user': 'pebbles', 'active': true }
 * ];
 *
 * _.findIndex(users, function(o) { return o.user == 'barney'; });
 * // => 0
 *
 * // The `_.matches` iteratee shorthand.
 * _.findIndex(users, { 'user': 'fred', 'active': false });
 * // => 1
 *
 * // The `_.matchesProperty` iteratee shorthand.
 * _.findIndex(users, ['active', false]);
 * // => 0
 *
 * // The `_.property` iteratee shorthand.
 * _.findIndex(users, 'active');
 * // => 2
 */

/**
 * This method is like `_.uniq` except that it accepts `iteratee` which is
 * invoked for each element in `array` to generate the criterion by which
 * uniqueness is computed. The order of result values is determined by the
 * order they occur in the array. The iteratee is invoked with one argument:
 * (value).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Array
 * @param {Array} array The array to inspect.
 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
 * @returns {Array} Returns the new duplicate free array.
 * @example
 *
 * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
 * // => [2.1, 1.2]
 *
 * // The `_.property` iteratee shorthand.
 * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
 * // => [{ 'x': 1 }, { 'x': 2 }]
 */

/**
 * This method returns `false`.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {boolean} Returns `false`.
 * @example
 *
 * _.times(2, _.stubFalse);
 * // => [false, false]
 */

/**
 * This method returns `undefined`.
 *
 * @static
 * @memberOf _
 * @since 2.3.0
 * @category Util
 * @example
 *
 * _.times(2, _.noop);
 * // => [undefined, undefined]
 */

/**
 * This method returns a new empty array.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {Array} Returns the new empty array.
 * @example
 *
 * var arrays = _.times(2, _.stubArray);
 *
 * console.log(arrays);
 * // => [[], []]
 *
 * console.log(arrays[0] === arrays[1]);
 * // => false
 */

/**
 * This method returns the first argument it receives.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Util
 * @param {*} value Any value.
 * @returns {*} Returns `value`.
 * @example
 *
 * var object = { 'a': 1 };
 *
 * console.log(_.identity(object) === object);
 * // => true
 */

/**
 * Type of the ownerState based on the type of an element it applies to.
 * This resolves to the provided OwnerState for React components and `undefined` for host components.
 * Falls back to `OwnerState | undefined` when the exact type can't be determined in development time.
 */

/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */

/**
 * Used by `_.orderBy` to compare multiple properties of a value to another
 * and stable sort them.
 *
 * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
 * specify an order of "desc" for descending or "asc" for ascending sort order
 * of corresponding values.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {boolean[]|string[]} orders The order to sort by for each property.
 * @returns {number} Returns the sort order indicator for `object`.
 */

/**
 * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace
 * character of `string`.
 *
 * @private
 * @param {string} string The string to inspect.
 * @returns {number} Returns the index of the last non-whitespace character.
 */

/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */

/**
 * Utility component that locks focus inside the component.
 *
 * Demos:
 *
 * - [Focus Trap](https://mui.com/base/react-focus-trap/)
 *
 * API:
 *
 * - [FocusTrap API](https://mui.com/base/api/focus-trap/)
 */

/**
 * Vendor prefix string for the current browser.
 *
 * @type {{js: String, css: String, vendor: String, browser: String}}
 * @api public
 */

/**
 * When you're adding or removing children some may be added or removed in the
 * same render pass. We want to show *both* since we want to simultaneously
 * animate elements in and out. This function takes a previous set of keys
 * and a new set of keys and merges them with its best guess of the correct
 * ordering. In the future we may expose some of the utilities in
 * ReactMultiChild to make this easy, but for now React itself does not
 * directly have this concept of the union of prevChildren and nextChildren
 * so we implement it here.
 *
 * @param {object} prev prev children as returned from
 * `ReactTransitionChildMapping.getChildMapping()`.
 * @param {object} next next children as returned from
 * `ReactTransitionChildMapping.getChildMapping()`.
 * @return {object} a key set that contains all keys in `prev` and all keys
 * in `next` in a reasonable order.
 */

/**
 * calculate the ticks when the minimum value equals to the maximum value
 *
 * @param  {Number}  value         The minimum valuue which is also the maximum value
 * @param  {Integer} tickCount     The count of ticks
 * @param  {Boolean} allowDecimals Allow the ticks to be decimals or not
 * @return {Array}                 ticks
 */

/**
 * drop-in replacement for _.get
 * @param obj
 * @param path
 * @param defaultValue
 */

/**
 * drop-in replacement for _.isString
 * @param input
 */

/**
 * drop-in replacement for _.without
 */

/**
 * https://github.com/facebook/react/issues/14099#issuecomment-440013892
 */

/**
 * lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */

/**
 * replacement for _.intersection
 * @param itemsA
 * @param itemsB
 */

/**
 * replacement for _.xor
 * @param itemsA
 * @param itemsB
 */

/**
 * useDragSource hook
 * @param sourceSpec The drag source specification (object or function, function preferred)
 * @param deps The memoization deps array to use when evaluating spec changes
 */

/**
 * useDropTarget Hook
 * @param spec The drop target specification (object or function, function preferred)
 * @param deps The memoization deps array to use when evaluating spec changes
 */

/**
 * validate the width and height props of a chart element
 * @param  {Object} el A chart element
 * @return {Boolean}   true If the props width and height are number, and greater than 0
 */

/**
 * 对数值进行线性插值
 *
 * @param  {Number} a  定义域的极点
 * @param  {Number} b  定义域的极点
 * @param  {Number} t  [0, 1]内的某个值
 * @return {Number}    定义域内的某个值
 */

/**
 * 按照固定的步长获取[start, end)这个区间的数据
 * 并且需要处理js计算精度的问题
 *
 * @param  {Decimal} start 起点
 * @param  {Decimal} end   终点，不包含该值
 * @param  {Decimal} step  步长
 * @return {Array}         若干数值
 */

/**
 * 线性插值的逆运算
 *
 * @param  {Number} a 定义域的极点
 * @param  {Number} b 定义域的极点
 * @param  {Number} x 可以认为是插值后的一个输出值
 * @return {Number}   当x在 a ~ b这个范围内时，返回值属于[0, 1]
 */

/**
 * 获取数值的位数
 * 其中绝对值属于区间[0.1, 1)， 得到的值为0
 * 绝对值属于区间[0.01, 0.1)，得到的位数为 -1
 * 绝对值属于区间[0.001, 0.01)，得到的位数为 -2
 *
 * @param  {Number} value 数值
 * @return {Integer} 位数
 */

/** @class */

/** @constructor */

/** @license React v16.13.1
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/** @type LoadableSubscription */

/** Built-in value references. */

/** Define of XAxis props */

/** Detect free variable `exports`. */

/** Detect free variable `global` from Node.js. */

/** Detect free variable `self`. */

/** Error message constants. */

/** Used as references for various `Number` constants. */

/** Used as the maximum memoize cache size. */

/** Used as the size to enable large array optimizations. */

/** Used for built-in method references. */

/** Used to compose bitmasks for value comparisons. */

/** Used to compose unicode capture groups. */

/** Used to compose unicode character classes. */

/** Used to detect hot functions by number of calls within a span of milliseconds. */

/** Used to detect methods masquerading as native. */

/** Used to detect overreaching core-js shims. */

/** Used to detect unsigned integer values. */

/** Used to match a single whitespace character. */

/** Used to match leading whitespace. */

/** Used to match property names within property paths. */

/** Used to resolve the decompiled source of functions. */

/** Used to stand-in for `undefined` hash values. */

/** `Object#toString` result references. */

/***/

/*, ...args */

//

//                          return $1;

//                          return true;           // the default parse result if the rule actions don't produce anything

//                      @$ = @1;            // if location tracking support is included

//                      else

//                      if (typeof $1 !== 'undefined')

//                    True when adorned at the start.

//                    True when any number or string with length.

//                  %{

//                  %{ $$ = $1; @$ = @1; %}

//                  %}

//         channel.port2.postMessage(0);

//         nextStatus = ENTERING

//         nextStatus = EXITING

//         setImmediate(callback);

//        ............................. ???

//       if (status !== ENTERING && status !== ENTERED) {

//       if (status === ENTERING || status === ENTERED) {

//       or else your `lexer`, `sharedState`, etc. references will be *wrong*!

//       or else your `sharedState`, etc. references will be *wrong*!

//       }

//      parser.getSymbolName(#$)

//     $accept: <startSymbol> $end

//     channel.port1.onmessage = callback;

//     const { status } = this.state

//     if (symbol === null || typeof symbol === 'undefined') ...

//     if (this.props.in) {

//     return function requestCall() {

//     var channel = new MessageChannel();

//     }

//     } else {

//     };

//    5. compare new remainder and divisor

//    6. If remainder > divisor: remainder -= divisor, k++

//   * https://github.com/react-dnd/react-dnd/issues/869

//   * https://github.com/react-dnd/react-dnd/pull/928

//   .................................. NOT recoverable,

//   .................................. false

//   assigns location: ................ false

//   assigns rule values: ............. true

//   backtracking: .................... false

//   debug grammar/output: ............ false

//   default action mode: ............. ["classic","merge"]

//   default resolve on conflict: ..... true

//   error recovery token skip maximum: 3

//   export *all* tables: ............. false

//   export debug tables: ............. false

//   function lexer__performAction(yy, yyrulenumber, YY_START) {...}

//   has error recovery: .............. false

//   has error reporting: ............. false

//   has partial LR conflict upgrade:   true

//   has user-specified main(): ....... false

//   has user-specified require()/import modules for main():

//   if (prevProps !== this.props) {

//   let nextStatus = null

//   location assignment: ............. false

//   location line+column tracking: ... true

//   location tracking: ............... false

//   location.ranges: ................. false

//   module type: ..................... commonjs

//   no significant actions (parser is a language matcher only):

//   number of expected conflicts: .... 0

//   on-demand look-ahead: ............ false

//   output main() in the module: ..... true

//   parser engine type: .............. lalr

//   parser table compression mode: ... 2

//   return { nextStatus }

//   rudimentary token-stack support:   false

//   test-compile action mode: ........ "parser:*,lexer:*"

//   tracks rule values: .............. true

//   try..catch: ...................... true

//   uses ParseError API: ............. ???

//   uses ParseError API: ............. false

//   uses YYCLEARIN: .................. false

//   uses YYERROK: .................... false

//   uses YYERROR: .................... false

//   uses YYRECOVERING: ............... false

//   uses describeYYLLOC() API: ....... ???

//   uses display APIs pastInput(), upcomingInput(), showPosition():

//   uses less() API: ................. ???

//   uses lexer values: ............... true / true

//   uses location tracking & editing:  ???

//   uses location tracking: .......... false

//   uses more() API: ................. ???

//   uses reject() API: ............... ???

//   uses unput() API: ................ ???

//   uses yyMergeLocationInfo API: .... false

//   uses yyerror: .................... ???

//   uses yyleng: ..................... ???

//   uses yyleng: ..................... false

//   uses yylineno: ................... ???

//   uses yylineno: ................... false

//   uses yylloc: ..................... ???

//   uses yylloc: ..................... false

//   uses yyrulelength: ............... false

//   uses yysp: ....................... true

//   uses yysstack: ................... false

//   uses yystack: .................... false

//   uses yytext: ..................... ???

//   uses yytext: ..................... false

//   yyerror in lexer actions and other non-fatal lexer are:

//   yyerror in parse actions is: ..... NOT recoverable,

//   }

//  1. product = divisor * trial digit (k)

//  2. if product > remainder: product -= divisor, k--

//  3. remainder -= product

//  4. if product was < remainder at 2:

//  Algorithm:

//  `tabIndex` of -1 when the 'tabindex' attribute isn't specified in the DOM,

//  `tabIndex` of 0; since Chrome still puts those elements in the regular tab

//  order, consider their tab index to be 0.

//  yet they are still part of the regular tab order; in FF, they get a default

// "drop and blow away the whole document" action.

// "the first render", or "memo dropped the value"

// "you can express cubic Hermite interpolation in terms of cubic Bézier curves

// $FlowFixMe

// $FlowFixMe: coerce undefined to string

// $FlowFixMe: we can ignore this because its exposed type is defined by the CreateStyled type

// $FlowFixMe: we need to cast StatelessFunctionalComponent to our PrivateStyledComponent class

// $FlowFixMe[cannot-write]

// $FlowFixMe[incompatible-call]: HTMLElement is a Node

// $FlowFixMe[incompatible-call]: isBody tells us target will be an HTMLElement here

// $FlowFixMe[incompatible-return]

// $FlowFixMe[incompatible-return]: assume body is always available

// $FlowFixMe[incompatible-return]: https://github.com/facebook/flow/issues/1414

// $FlowFixMe[incompatible-type]: Flow seems to have problems with two array unions...

// $FlowFixMe[prop-missing]

// $FlowFixMe[prop-missing]: need a better way to handle this...

// 'type',

// (also account for a userdef function which does not return any value: keep the token as is)

// (chartX, chartY) are (0,0) in default state, but we want to keep the last mouse position to avoid

// (e.g., 1.2e+3) or the form \de[-+]\d+ (e.g., 1e+3).

// (expr) * value

// (expr) / value

// (expr) <op> value

// (value + something) + value => (value + value) + something

// (value + something) - value => (value - value) + something

// (value - something) + value => (value + value) - something

// (value - something) - value => (value - value) - something

// - DO NOT reset `this.matched`

// - Firefox 3-13

// - Internet Explorer 6-9

// - Lynx 2.8.7

// - iPad Safari 4.3

// --------- END OF REPORT -----------

// -----------

// ---------------------------------

// -----------------------------------  EDITABLE DEFAULTS  ------------------------------------ //

// ----------------------------------- END OF EDITABLE DEFAULTS ------------------------------- //

// ...

// ...or the lexer state has been modified significantly enough

// .mui-fixed is a global helper.

// // its existence.

// /finally

// 0 + something => something

// 0 - something => -something

// 0 to -MAX_E

// 0 to 1e9

// 0 to 8

// 0 to MAX_E

// 1 to MAX_DIGITS

// 1, 0.1, 0.01, 0.001, 0.0001 etc.

// 1. IE11 support, which trigger the handleClickAway even after the unbind

// 10, 11, 12 or 13, recording the number of multiplications so the sum of the series can

// 11-12, and in web workers in many engines.

// 115 digits

// 1286742750677284

// 16.3+ will not execute our will-update method;

// 2. The child might render null.

// 23px

// 3. Behave like a blur listener.

// 42px is the hit target

// 4999, i.e. approaching a rounding boundary, continue the iteration.

// 714.

// 96 is one less than the char code

// <div ref={node => connectDragSource(connectDropTarget(node))}/>

// @TODO bug prone logic

// @inheritedComponent ButtonBase

// @param SSR

// @param obj

// @param value

// @returns {boolean} False when no adornments.

// @returns {boolean} False when not present or empty string.

// @returns {boolean} true if string (including '') or number (including zero)

// @see https://facebook.github.io/react/docs/forms.html#controlled-components

// @ts-expect-error TODO upstream fix

// @ts-expect-error hide `this`

// @ts-expect-error https://github.com/microsoft/TypeScript/pull/12253#issuecomment-263132208

// @ts-expect-error returns `false` as intended when not dispatched from a Node

// @ts-ignore

// @ts-ignore The nativeEvent is function, not object

// @ts-ignore buttons doesn't not exists on touch event

// A "clipping parent" is an overflowable container with the characteristic of

// A change of the browser zoom change the scrollbar size.

// A few bytes payload overhead when lodash/debounce is ~3 kB and debounce ~300 B.

// A loading component is not required, so we default it

// A medial value of ticks

// A modal manager used to track and manage the state of open Modals.

// A native item (such as URL) dragged from inside the document

// A native item (such as file or URL) dragged from outside the document

// A number that uniquely identifies the current finger in the touch session.

// APIs which will be set up depending on user action code analysis:

// ASAP was originally a nextTick shim included in Q. This was factored out

// According to https://en.wikipedia.org/wiki/Cubic_Hermite_spline#Representations

// ActiveX objects in IE.

// Actually it just calculates animation duration based on size

// Add !important, because it was ignored.

// Add a flag to suppress these warnings for this special case.

// Add any extra args to the hash under the name `extra_error_attributes`:

// Add first word to line or word is too long to scaleToFit on existing line

// Add iOS momentum scrolling for iOS < 13.0

// Add methods to `Hash`.

// Add methods to `ListCache`.

// Add methods to `MapCache`.

// Add methods to `SetCache`.

// Add methods to `Stack`.

// Add remains of b.

// Add the next digit, k, to the result array.

// Add the number of digits of the first word of the digits array.

// Add the number of digits of the first word.

// Add the unit if available, except for the special case of 0px.

// Add zeros to make remainder as long as divisor.

// Advance the index before calling the task. This ensures that we will

// After the size is read reset the position back to default

// Alias methods names because people roll like that.

// Align at the center

// Alignment properties

// Allow `EventEmitter` to be imported as module namespace.

// Allow empty style in this case, because properties will be added dynamically.

// Also for backward compatible since next/dynamic allows to resolve a component directly with loader

// Also note that JISON always adds this top-most `$accept` rule (with implicit,

// Although message channels yield to any queued rendering and IO tasks, they

// Although setImmediate yields to the browser's renderer, it would be

// An `NaN` primitive is the only value that is not equal to itself.

// An example of this may be where a rule's action code contains a call like this:

// An exception thrown by a task will permanently interrupt the processing of

// An optimized implementation for this simple case.

// Animation name ref replacer.

// Animation properties

// Another case of better safe than sorry: in case state transitions come out of another error recovery process

// Any reducers that existed in both the new and old rootReducer

// Append zeros to xd if shorter.

// Apply fallbacks first.

// Are there any non-zero digits after the rounding digit?

// Argument reduction.

// Array syntax {fallbacks: [{prop: value}]}

// Array-as-queue is good enough here, since we are just dealing with exceptions.

// As a workaround, use cWM and cWRP to invoke the new static lifecycle.

// As a workaround, use cWU to invoke the new lifecycle.

// Assume cyclic values are equal.

// Assumes non-zero x and k, and hence non-zero result.

// Async and optimistically optimized update – it will not be executed if

// Avoid crashing if we missed a drop event or our previous drag died

// Avoid failures from read-only properties

// Avoid performing a layout computation in the render method.

// Avoid text selection

// Avoids applying same plugin twice, at least based on ref.

// Background properties

// Based on https://github.com/mourner/quickselect

// Because for <= 15.x versions this might be a "prevContext" object.

// Because get-snapshot might return a falsy value.

// Because they would work differently between older and newer (16.3+) versions of React.

// Binding "this" is important for shallow renderer support.

// BlackBerry 5, iOS 3 (original iPhone)

// Block the scroll even if no scrollbar is visible to account for mobile keyboard

// Border Properties

// Bound the new value to the thumb's neighbours.

// Break the formatted value into the integer “value” part that can be

// Browsers do not return `tabIndex` correctly for contentEditable nodes;

// Browsers not implementing :focus-visible will throw a SyntaxError.

// Browsers where the left scrollbar doesn't cause an issue report `0` for

// Bump specificity to allow extending custom inputs

// Bundle may contain multiple JSS versions at the same time. In order to identify

// But we should also take height into consideration

// By explicitly using `prop-types` you are opting into new production behavior.

// CONCATENATED MODULE: ../../node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js

// CONCATENATED MODULE: ../../node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js

// CONCATENATED MODULE: ../../node_modules/@babel/runtime/helpers/esm/createClass.js

// CONCATENATED MODULE: ../../node_modules/@babel/runtime/helpers/esm/inheritsLoose.js

// CONCATENATED MODULE: ../../node_modules/@babel/runtime/helpers/esm/iterableToArray.js

// CONCATENATED MODULE: ../../node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js

// CONCATENATED MODULE: ../../node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js

// CONCATENATED MODULE: ../../node_modules/@babel/runtime/helpers/esm/toConsumableArray.js

// CONCATENATED MODULE: ../../node_modules/@babel/runtime/helpers/esm/toPrimitive.js

// CONCATENATED MODULE: ../../node_modules/@babel/runtime/helpers/esm/toPropertyKey.js

// CONCATENATED MODULE: ../../node_modules/@babel/runtime/helpers/esm/typeof.js

// CONCATENATED MODULE: ../../node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js

// CONCATENATED MODULE: ../../node_modules/@mui/base/ClickAwayListener/ClickAwayListener.js

// CONCATENATED MODULE: ../../node_modules/@mui/base/FocusTrap/FocusTrap.js

// CONCATENATED MODULE: ../../node_modules/@mui/base/ModalUnstyled/ModalManager.js

// CONCATENATED MODULE: ../../node_modules/@mui/base/ModalUnstyled/ModalUnstyled.js

// CONCATENATED MODULE: ../../node_modules/@mui/base/ModalUnstyled/modalUnstyledClasses.js

// CONCATENATED MODULE: ../../node_modules/@mui/base/PopperUnstyled/PopperUnstyled.js

// CONCATENATED MODULE: ../../node_modules/@mui/base/PopperUnstyled/popperUnstyledClasses.js

// CONCATENATED MODULE: ../../node_modules/@mui/base/SliderUnstyled/useSlider.js

// CONCATENATED MODULE: ../../node_modules/@mui/base/TextareaAutosize/TextareaAutosize.js

// CONCATENATED MODULE: ../../node_modules/@mui/base/utils/extractEventHandlers.js

// CONCATENATED MODULE: ../../node_modules/@mui/base/utils/mergeSlotProps.js

// CONCATENATED MODULE: ../../node_modules/@mui/base/utils/omitEventHandlers.js

// CONCATENATED MODULE: ../../node_modules/@mui/base/utils/useSlotProps.js

// CONCATENATED MODULE: ../../node_modules/@mui/material/AppBar/AppBar.js

// CONCATENATED MODULE: ../../node_modules/@mui/material/AppBar/appBarClasses.js

// CONCATENATED MODULE: ../../node_modules/@mui/material/Backdrop/Backdrop.js

// CONCATENATED MODULE: ../../node_modules/@mui/material/Backdrop/backdropClasses.js

// CONCATENATED MODULE: ../../node_modules/@mui/material/Button/Button.js

// CONCATENATED MODULE: ../../node_modules/@mui/material/Button/buttonClasses.js

// CONCATENATED MODULE: ../../node_modules/@mui/material/ButtonBase/ButtonBase.js

// CONCATENATED MODULE: ../../node_modules/@mui/material/ButtonBase/Ripple.js

// CONCATENATED MODULE: ../../node_modules/@mui/material/ButtonBase/TouchRipple.js

// CONCATENATED MODULE: ../../node_modules/@mui/material/ButtonBase/buttonBaseClasses.js

// CONCATENATED MODULE: ../../node_modules/@mui/material/Card/Card.js

// CONCATENATED MODULE: ../../node_modules/@mui/material/Card/cardClasses.js

// CONCATENATED MODULE: ../../node_modules/@mui/material/Collapse/Collapse.js

// CONCATENATED MODULE: ../../node_modules/@mui/material/Collapse/collapseClasses.js

// CONCATENATED MODULE: ../../node_modules/@mui/material/Dialog/Dialog.js

// CONCATENATED MODULE: ../../node_modules/@mui/material/Dialog/dialogClasses.js

// CONCATENATED MODULE: ../../node_modules/@mui/material/DialogActions/DialogActions.js

// CONCATENATED MODULE: ../../node_modules/@mui/material/DialogActions/dialogActionsClasses.js

// CONCATENATED MODULE: ../../node_modules/@mui/material/DialogContent/DialogContent.js

// CONCATENATED MODULE: ../../node_modules/@mui/material/DialogContent/dialogContentClasses.js

// CONCATENATED MODULE: ../../node_modules/@mui/material/FilledInput/FilledInput.js

// CONCATENATED MODULE: ../../node_modules/@mui/material/FilledInput/filledInputClasses.js

// CONCATENATED MODULE: ../../node_modules/@mui/material/GlobalStyles/GlobalStyles.js

// CONCATENATED MODULE: ../../node_modules/@mui/material/IconButton/IconButton.js

// CONCATENATED MODULE: ../../node_modules/@mui/material/IconButton/iconButtonClasses.js

// CONCATENATED MODULE: ../../node_modules/@mui/material/Input/Input.js

// CONCATENATED MODULE: ../../node_modules/@mui/material/Input/inputClasses.js

// CONCATENATED MODULE: ../../node_modules/@mui/material/InputBase/InputBase.js

// CONCATENATED MODULE: ../../node_modules/@mui/material/List/List.js

// CONCATENATED MODULE: ../../node_modules/@mui/material/List/listClasses.js

// CONCATENATED MODULE: ../../node_modules/@mui/material/Menu/Menu.js

// CONCATENATED MODULE: ../../node_modules/@mui/material/Menu/menuClasses.js

// CONCATENATED MODULE: ../../node_modules/@mui/material/MenuItem/MenuItem.js

// CONCATENATED MODULE: ../../node_modules/@mui/material/MenuItem/menuItemClasses.js

// CONCATENATED MODULE: ../../node_modules/@mui/material/MenuList/MenuList.js

// CONCATENATED MODULE: ../../node_modules/@mui/material/Modal/Modal.js

// CONCATENATED MODULE: ../../node_modules/@mui/material/NativeSelect/NativeSelectInput.js

// CONCATENATED MODULE: ../../node_modules/@mui/material/NativeSelect/nativeSelectClasses.js

// CONCATENATED MODULE: ../../node_modules/@mui/material/OutlinedInput/OutlinedInput.js

// CONCATENATED MODULE: ../../node_modules/@mui/material/OutlinedInput/outlinedInputClasses.js

// CONCATENATED MODULE: ../../node_modules/@mui/material/Paper/Paper.js

// CONCATENATED MODULE: ../../node_modules/@mui/material/Paper/paperClasses.js

// CONCATENATED MODULE: ../../node_modules/@mui/material/Popover/Popover.js

// CONCATENATED MODULE: ../../node_modules/@mui/material/Popover/popoverClasses.js

// CONCATENATED MODULE: ../../node_modules/@mui/material/Popper/Popper.js

// CONCATENATED MODULE: ../../node_modules/@mui/material/Select/selectClasses.js

// CONCATENATED MODULE: ../../node_modules/@mui/material/Slide/Slide.js

// CONCATENATED MODULE: ../../node_modules/@mui/material/Slider/Slider.js

// CONCATENATED MODULE: ../../node_modules/@mui/material/Slider/SliderValueLabel.js

// CONCATENATED MODULE: ../../node_modules/@mui/material/Slider/sliderClasses.js

// CONCATENATED MODULE: ../../node_modules/@mui/material/SvgIcon/SvgIcon.js

// CONCATENATED MODULE: ../../node_modules/@mui/material/SvgIcon/svgIconClasses.js

// CONCATENATED MODULE: ../../node_modules/@mui/material/ToggleButton/ToggleButton.js

// CONCATENATED MODULE: ../../node_modules/@mui/material/ToggleButton/toggleButtonClasses.js

// CONCATENATED MODULE: ../../node_modules/@mui/material/ToggleButtonGroup/ToggleButtonGroup.js

// CONCATENATED MODULE: ../../node_modules/@mui/material/ToggleButtonGroup/isValueSelected.js

// CONCATENATED MODULE: ../../node_modules/@mui/material/ToggleButtonGroup/toggleButtonGroupClasses.js

// CONCATENATED MODULE: ../../node_modules/@mui/material/Toolbar/Toolbar.js

// CONCATENATED MODULE: ../../node_modules/@mui/material/Toolbar/toolbarClasses.js

// CONCATENATED MODULE: ../../node_modules/@mui/material/Tooltip/Tooltip.js

// CONCATENATED MODULE: ../../node_modules/@mui/material/Tooltip/tooltipClasses.js

// CONCATENATED MODULE: ../../node_modules/@mui/material/Typography/Typography.js

// CONCATENATED MODULE: ../../node_modules/@mui/material/Typography/typographyClasses.js

// CONCATENATED MODULE: ../../node_modules/@mui/material/styles/styled.js

// CONCATENATED MODULE: ../../node_modules/@mui/material/styles/useThemeProps.js

// CONCATENATED MODULE: ../../node_modules/@mui/material/utils/deprecatedPropType.js

// CONCATENATED MODULE: ../../node_modules/@mui/material/utils/index.js

// CONCATENATED MODULE: ../../node_modules/@mui/material/utils/isMuiElement.js

// CONCATENATED MODULE: ../../node_modules/@mui/material/utils/requirePropFactory.js

// CONCATENATED MODULE: ../../node_modules/@mui/material/utils/unsupportedProp.js

// CONCATENATED MODULE: ../../node_modules/@mui/styled-engine/GlobalStyles/GlobalStyles.js

// CONCATENATED MODULE: ../../node_modules/@mui/styled-engine/index.js

// CONCATENATED MODULE: ../../node_modules/@mui/styles/StylesProvider/StylesProvider.js

// CONCATENATED MODULE: ../../node_modules/@mui/styles/createGenerateClassName/createGenerateClassName.js

// CONCATENATED MODULE: ../../node_modules/@mui/styles/getStylesCreator/getStylesCreator.js

// CONCATENATED MODULE: ../../node_modules/@mui/styles/makeStyles/indexCounter.js

// CONCATENATED MODULE: ../../node_modules/@mui/styles/makeStyles/makeStyles.js

// CONCATENATED MODULE: ../../node_modules/@mui/styles/makeStyles/multiKeyStore.js

// CONCATENATED MODULE: ../../node_modules/@mui/styles/mergeClasses/mergeClasses.js

// CONCATENATED MODULE: ../../node_modules/@mui/styles/propsToClassKey/propsToClassKey.js

// CONCATENATED MODULE: ../../node_modules/@mui/styles/styled/styled.js

// CONCATENATED MODULE: ../../node_modules/@mui/system/esm/createStyled.js

// CONCATENATED MODULE: ../../node_modules/@mui/system/esm/propsToClassKey.js

// CONCATENATED MODULE: ../../node_modules/@mui/system/esm/styleFunctionSx/extendSxProp.js

// CONCATENATED MODULE: ../../node_modules/@mui/system/esm/useThemeProps/getThemeProps.js

// CONCATENATED MODULE: ../../node_modules/@mui/system/esm/useThemeProps/useThemeProps.js

// CONCATENATED MODULE: ../../node_modules/@mui/utils/esm/deprecatedPropType.js

// CONCATENATED MODULE: ../../node_modules/@mui/utils/esm/isMuiElement.js

// CONCATENATED MODULE: ../../node_modules/@mui/utils/esm/requirePropFactory.js

// CONCATENATED MODULE: ../../node_modules/@mui/utils/esm/unsupportedProp.js

// CONCATENATED MODULE: ../../node_modules/@popperjs/core/lib/createPopper.js

// CONCATENATED MODULE: ../../node_modules/@popperjs/core/lib/dom-utils/contains.js

// CONCATENATED MODULE: ../../node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js

// CONCATENATED MODULE: ../../node_modules/@popperjs/core/lib/dom-utils/getClippingRect.js

// CONCATENATED MODULE: ../../node_modules/@popperjs/core/lib/dom-utils/getCompositeRect.js

// CONCATENATED MODULE: ../../node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js

// CONCATENATED MODULE: ../../node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js

// CONCATENATED MODULE: ../../node_modules/@popperjs/core/lib/dom-utils/getDocumentRect.js

// CONCATENATED MODULE: ../../node_modules/@popperjs/core/lib/dom-utils/getLayoutRect.js

// CONCATENATED MODULE: ../../node_modules/@popperjs/core/lib/dom-utils/getNodeName.js

// CONCATENATED MODULE: ../../node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js

// CONCATENATED MODULE: ../../node_modules/@popperjs/core/lib/dom-utils/getParentNode.js

// CONCATENATED MODULE: ../../node_modules/@popperjs/core/lib/dom-utils/getScrollParent.js

// CONCATENATED MODULE: ../../node_modules/@popperjs/core/lib/dom-utils/getViewportRect.js

// CONCATENATED MODULE: ../../node_modules/@popperjs/core/lib/dom-utils/getWindow.js

// CONCATENATED MODULE: ../../node_modules/@popperjs/core/lib/dom-utils/getWindowScroll.js

// CONCATENATED MODULE: ../../node_modules/@popperjs/core/lib/dom-utils/getWindowScrollBarX.js

// CONCATENATED MODULE: ../../node_modules/@popperjs/core/lib/dom-utils/instanceOf.js

// CONCATENATED MODULE: ../../node_modules/@popperjs/core/lib/dom-utils/isLayoutViewport.js

// CONCATENATED MODULE: ../../node_modules/@popperjs/core/lib/dom-utils/isScrollParent.js

// CONCATENATED MODULE: ../../node_modules/@popperjs/core/lib/dom-utils/isTableElement.js

// CONCATENATED MODULE: ../../node_modules/@popperjs/core/lib/dom-utils/listScrollParents.js

// CONCATENATED MODULE: ../../node_modules/@popperjs/core/lib/enums.js

// CONCATENATED MODULE: ../../node_modules/@popperjs/core/lib/modifiers/applyStyles.js

// CONCATENATED MODULE: ../../node_modules/@popperjs/core/lib/modifiers/flip.js

// CONCATENATED MODULE: ../../node_modules/@popperjs/core/lib/modifiers/hide.js

// CONCATENATED MODULE: ../../node_modules/@popperjs/core/lib/modifiers/offset.js

// CONCATENATED MODULE: ../../node_modules/@popperjs/core/lib/modifiers/popperOffsets.js

// CONCATENATED MODULE: ../../node_modules/@popperjs/core/lib/modifiers/preventOverflow.js

// CONCATENATED MODULE: ../../node_modules/@popperjs/core/lib/utils/computeAutoPlacement.js

// CONCATENATED MODULE: ../../node_modules/@popperjs/core/lib/utils/computeOffsets.js

// CONCATENATED MODULE: ../../node_modules/@popperjs/core/lib/utils/detectOverflow.js

// CONCATENATED MODULE: ../../node_modules/@popperjs/core/lib/utils/expandToHashMap.js

// CONCATENATED MODULE: ../../node_modules/@popperjs/core/lib/utils/getBasePlacement.js

// CONCATENATED MODULE: ../../node_modules/@popperjs/core/lib/utils/getMainAxisFromPlacement.js

// CONCATENATED MODULE: ../../node_modules/@popperjs/core/lib/utils/getOppositeVariationPlacement.js

// CONCATENATED MODULE: ../../node_modules/@popperjs/core/lib/utils/getVariation.js

// CONCATENATED MODULE: ../../node_modules/@popperjs/core/lib/utils/math.js

// CONCATENATED MODULE: ../../node_modules/@popperjs/core/lib/utils/mergeByName.js

// CONCATENATED MODULE: ../../node_modules/@popperjs/core/lib/utils/mergePaddingObject.js

// CONCATENATED MODULE: ../../node_modules/@popperjs/core/lib/utils/orderModifiers.js

// CONCATENATED MODULE: ../../node_modules/@popperjs/core/lib/utils/rectToClientRect.js

// CONCATENATED MODULE: ../../node_modules/@popperjs/core/lib/utils/userAgent.js

// CONCATENATED MODULE: ../../node_modules/@popperjs/core/lib/utils/within.js

// CONCATENATED MODULE: ../../node_modules/@react-dnd/asap/dist/AsapQueue.js

// CONCATENATED MODULE: ../../node_modules/@react-dnd/asap/dist/RawTask.js

// CONCATENATED MODULE: ../../node_modules/@react-dnd/asap/dist/TaskFactory.js

// CONCATENATED MODULE: ../../node_modules/@react-dnd/asap/dist/asap.js

// CONCATENATED MODULE: ../../node_modules/@react-dnd/asap/dist/makeRequestCall.js

// CONCATENATED MODULE: ../../node_modules/css-vendor/dist/css-vendor.esm.js

// CONCATENATED MODULE: ../../node_modules/d3-array/src/ascending.js

// CONCATENATED MODULE: ../../node_modules/d3-array/src/bisect.js

// CONCATENATED MODULE: ../../node_modules/d3-array/src/bisector.js

// CONCATENATED MODULE: ../../node_modules/d3-array/src/descending.js

// CONCATENATED MODULE: ../../node_modules/d3-array/src/max.js

// CONCATENATED MODULE: ../../node_modules/d3-array/src/min.js

// CONCATENATED MODULE: ../../node_modules/d3-array/src/number.js

// CONCATENATED MODULE: ../../node_modules/d3-array/src/quantile.js

// CONCATENATED MODULE: ../../node_modules/d3-array/src/quickselect.js

// CONCATENATED MODULE: ../../node_modules/d3-array/src/range.js

// CONCATENATED MODULE: ../../node_modules/d3-array/src/ticks.js

// CONCATENATED MODULE: ../../node_modules/d3-color/src/color.js

// CONCATENATED MODULE: ../../node_modules/d3-color/src/define.js

// CONCATENATED MODULE: ../../node_modules/d3-format/src/exponent.js

// CONCATENATED MODULE: ../../node_modules/d3-format/src/formatDecimal.js

// CONCATENATED MODULE: ../../node_modules/d3-format/src/formatNumerals.js

// CONCATENATED MODULE: ../../node_modules/d3-format/src/formatRounded.js

// CONCATENATED MODULE: ../../node_modules/d3-format/src/formatTrim.js

// CONCATENATED MODULE: ../../node_modules/d3-format/src/formatTypes.js

// CONCATENATED MODULE: ../../node_modules/d3-format/src/identity.js

// CONCATENATED MODULE: ../../node_modules/d3-format/src/locale.js

// CONCATENATED MODULE: ../../node_modules/d3-format/src/precisionFixed.js

// CONCATENATED MODULE: ../../node_modules/d3-format/src/precisionPrefix.js

// CONCATENATED MODULE: ../../node_modules/d3-format/src/precisionRound.js

// CONCATENATED MODULE: ../../node_modules/d3-interpolate/src/basis.js

// CONCATENATED MODULE: ../../node_modules/d3-interpolate/src/basisClosed.js

// CONCATENATED MODULE: ../../node_modules/d3-interpolate/src/color.js

// CONCATENATED MODULE: ../../node_modules/d3-interpolate/src/constant.js

// CONCATENATED MODULE: ../../node_modules/d3-interpolate/src/date.js

// CONCATENATED MODULE: ../../node_modules/d3-interpolate/src/number.js

// CONCATENATED MODULE: ../../node_modules/d3-interpolate/src/numberArray.js

// CONCATENATED MODULE: ../../node_modules/d3-interpolate/src/object.js

// CONCATENATED MODULE: ../../node_modules/d3-interpolate/src/piecewise.js

// CONCATENATED MODULE: ../../node_modules/d3-interpolate/src/rgb.js

// CONCATENATED MODULE: ../../node_modules/d3-interpolate/src/round.js

// CONCATENATED MODULE: ../../node_modules/d3-interpolate/src/string.js

// CONCATENATED MODULE: ../../node_modules/d3-interpolate/src/value.js

// CONCATENATED MODULE: ../../node_modules/d3-path/src/path.js

// CONCATENATED MODULE: ../../node_modules/d3-scale/src/band.js

// CONCATENATED MODULE: ../../node_modules/d3-scale/src/constant.js

// CONCATENATED MODULE: ../../node_modules/d3-scale/src/continuous.js

// CONCATENATED MODULE: ../../node_modules/d3-scale/src/diverging.js

// CONCATENATED MODULE: ../../node_modules/d3-scale/src/identity.js

// CONCATENATED MODULE: ../../node_modules/d3-scale/src/linear.js

// CONCATENATED MODULE: ../../node_modules/d3-scale/src/log.js

// CONCATENATED MODULE: ../../node_modules/d3-scale/src/nice.js

// CONCATENATED MODULE: ../../node_modules/d3-scale/src/number.js

// CONCATENATED MODULE: ../../node_modules/d3-scale/src/ordinal.js

// CONCATENATED MODULE: ../../node_modules/d3-scale/src/pow.js

// CONCATENATED MODULE: ../../node_modules/d3-scale/src/quantile.js

// CONCATENATED MODULE: ../../node_modules/d3-scale/src/quantize.js

// CONCATENATED MODULE: ../../node_modules/d3-scale/src/radial.js

// CONCATENATED MODULE: ../../node_modules/d3-scale/src/sequential.js

// CONCATENATED MODULE: ../../node_modules/d3-scale/src/sequentialQuantile.js

// CONCATENATED MODULE: ../../node_modules/d3-scale/src/symlog.js

// CONCATENATED MODULE: ../../node_modules/d3-scale/src/threshold.js

// CONCATENATED MODULE: ../../node_modules/d3-scale/src/tickFormat.js

// CONCATENATED MODULE: ../../node_modules/d3-scale/src/time.js

// CONCATENATED MODULE: ../../node_modules/d3-scale/src/utcTime.js

// CONCATENATED MODULE: ../../node_modules/d3-shape/src/area.js

// CONCATENATED MODULE: ../../node_modules/d3-shape/src/curve/basis.js

// CONCATENATED MODULE: ../../node_modules/d3-shape/src/curve/basisClosed.js

// CONCATENATED MODULE: ../../node_modules/d3-shape/src/curve/basisOpen.js

// CONCATENATED MODULE: ../../node_modules/d3-shape/src/curve/linear.js

// CONCATENATED MODULE: ../../node_modules/d3-shape/src/curve/linearClosed.js

// CONCATENATED MODULE: ../../node_modules/d3-shape/src/curve/monotone.js

// CONCATENATED MODULE: ../../node_modules/d3-shape/src/curve/natural.js

// CONCATENATED MODULE: ../../node_modules/d3-shape/src/curve/step.js

// CONCATENATED MODULE: ../../node_modules/d3-shape/src/line.js

// CONCATENATED MODULE: ../../node_modules/d3-shape/src/math.js

// CONCATENATED MODULE: ../../node_modules/d3-shape/src/noop.js

// CONCATENATED MODULE: ../../node_modules/d3-shape/src/offset/expand.js

// CONCATENATED MODULE: ../../node_modules/d3-shape/src/offset/none.js

// CONCATENATED MODULE: ../../node_modules/d3-shape/src/offset/silhouette.js

// CONCATENATED MODULE: ../../node_modules/d3-shape/src/offset/wiggle.js

// CONCATENATED MODULE: ../../node_modules/d3-shape/src/order/none.js

// CONCATENATED MODULE: ../../node_modules/d3-shape/src/path.js

// CONCATENATED MODULE: ../../node_modules/d3-shape/src/point.js

// CONCATENATED MODULE: ../../node_modules/d3-shape/src/stack.js

// CONCATENATED MODULE: ../../node_modules/d3-shape/src/symbol/asterisk.js

// CONCATENATED MODULE: ../../node_modules/d3-shape/src/symbol/circle.js

// CONCATENATED MODULE: ../../node_modules/d3-shape/src/symbol/diamond.js

// CONCATENATED MODULE: ../../node_modules/d3-shape/src/symbol/star.js

// CONCATENATED MODULE: ../../node_modules/d3-shape/src/symbol/triangle.js

// CONCATENATED MODULE: ../../node_modules/d3-shape/src/symbol/triangle2.js

// CONCATENATED MODULE: ../../node_modules/d3-shape/src/symbol/wye.js

// CONCATENATED MODULE: ../../node_modules/d3-time-format/src/locale.js

// CONCATENATED MODULE: ../../node_modules/d3-time/src/duration.js

// CONCATENATED MODULE: ../../node_modules/d3-time/src/millisecond.js

// CONCATENATED MODULE: ../../node_modules/d3-time/src/ticks.js

// CONCATENATED MODULE: ../../node_modules/d3-time/src/week.js

// CONCATENATED MODULE: ../../node_modules/dnd-core/dist/actions/dragDrop/beginDrag.js

// CONCATENATED MODULE: ../../node_modules/dnd-core/dist/actions/dragDrop/drop.js

// CONCATENATED MODULE: ../../node_modules/dnd-core/dist/actions/dragDrop/endDrag.js

// CONCATENATED MODULE: ../../node_modules/dnd-core/dist/actions/dragDrop/hover.js

// CONCATENATED MODULE: ../../node_modules/dnd-core/dist/actions/dragDrop/index.js

// CONCATENATED MODULE: ../../node_modules/dnd-core/dist/actions/dragDrop/local/setClientOffset.js

// CONCATENATED MODULE: ../../node_modules/dnd-core/dist/actions/dragDrop/publishDragSource.js

// CONCATENATED MODULE: ../../node_modules/dnd-core/dist/actions/dragDrop/types.js

// CONCATENATED MODULE: ../../node_modules/dnd-core/dist/actions/registry.js

// CONCATENATED MODULE: ../../node_modules/dnd-core/dist/classes/DragDropManagerImpl.js

// CONCATENATED MODULE: ../../node_modules/dnd-core/dist/classes/DragDropMonitorImpl.js

// CONCATENATED MODULE: ../../node_modules/dnd-core/dist/classes/HandlerRegistryImpl.js

// CONCATENATED MODULE: ../../node_modules/dnd-core/dist/contracts.js

// CONCATENATED MODULE: ../../node_modules/dnd-core/dist/createDragDropManager.js

// CONCATENATED MODULE: ../../node_modules/dnd-core/dist/interfaces.js

// CONCATENATED MODULE: ../../node_modules/dnd-core/dist/reducers/dirtyHandlerIds.js

// CONCATENATED MODULE: ../../node_modules/dnd-core/dist/reducers/dragOffset.js

// CONCATENATED MODULE: ../../node_modules/dnd-core/dist/reducers/dragOperation.js

// CONCATENATED MODULE: ../../node_modules/dnd-core/dist/reducers/index.js

// CONCATENATED MODULE: ../../node_modules/dnd-core/dist/reducers/refCount.js

// CONCATENATED MODULE: ../../node_modules/dnd-core/dist/reducers/stateId.js

// CONCATENATED MODULE: ../../node_modules/dnd-core/dist/utils/coords.js

// CONCATENATED MODULE: ../../node_modules/dnd-core/dist/utils/dirtiness.js

// CONCATENATED MODULE: ../../node_modules/dnd-core/dist/utils/equality.js

// CONCATENATED MODULE: ../../node_modules/dnd-core/dist/utils/getNextUniqueId.js

// CONCATENATED MODULE: ../../node_modules/dnd-core/dist/utils/js_utils.js

// CONCATENATED MODULE: ../../node_modules/dnd-core/dist/utils/matchesType.js

// CONCATENATED MODULE: ../../node_modules/internmap/src/index.js

// CONCATENATED MODULE: ../../node_modules/jss-plugin-camel-case/dist/jss-plugin-camel-case.esm.js

// CONCATENATED MODULE: ../../node_modules/jss-plugin-props-sort/dist/jss-plugin-props-sort.esm.js

// CONCATENATED MODULE: ../../node_modules/jss-plugin-rule-value-function/dist/jss-plugin-rule-value-function.esm.js

// CONCATENATED MODULE: ../../node_modules/jss-plugin-vendor-prefixer/dist/jss-plugin-vendor-prefixer.esm.js

// CONCATENATED MODULE: ../../node_modules/notistack/dist/notistack.esm.js

// CONCATENATED MODULE: ../../node_modules/react-dnd-html5-backend/dist/BrowserDetector.js

// CONCATENATED MODULE: ../../node_modules/react-dnd-html5-backend/dist/EnterLeaveCounter.js

// CONCATENATED MODULE: ../../node_modules/react-dnd-html5-backend/dist/HTML5BackendImpl.js

// CONCATENATED MODULE: ../../node_modules/react-dnd-html5-backend/dist/MonotonicInterpolant.js

// CONCATENATED MODULE: ../../node_modules/react-dnd-html5-backend/dist/NativeDragSources/NativeDragSource.js

// CONCATENATED MODULE: ../../node_modules/react-dnd-html5-backend/dist/NativeDragSources/getDataFromDataTransfer.js

// CONCATENATED MODULE: ../../node_modules/react-dnd-html5-backend/dist/NativeDragSources/index.js

// CONCATENATED MODULE: ../../node_modules/react-dnd-html5-backend/dist/NativeDragSources/nativeTypesConfig.js

// CONCATENATED MODULE: ../../node_modules/react-dnd-html5-backend/dist/NativeTypes.js

// CONCATENATED MODULE: ../../node_modules/react-dnd-html5-backend/dist/OffsetUtils.js

// CONCATENATED MODULE: ../../node_modules/react-dnd-html5-backend/dist/OptionsReader.js

// CONCATENATED MODULE: ../../node_modules/react-dnd-html5-backend/dist/index.js

// CONCATENATED MODULE: ../../node_modules/react-dnd-html5-backend/dist/utils/js_utils.js

// CONCATENATED MODULE: ../../node_modules/react-dnd/dist/core/DndProvider.js

// CONCATENATED MODULE: ../../node_modules/react-dnd/dist/hooks/useCollectedProps.js

// CONCATENATED MODULE: ../../node_modules/react-dnd/dist/hooks/useCollector.js

// CONCATENATED MODULE: ../../node_modules/react-dnd/dist/hooks/useDrag/DragSourceImpl.js

// CONCATENATED MODULE: ../../node_modules/react-dnd/dist/hooks/useDrag/connectors.js

// CONCATENATED MODULE: ../../node_modules/react-dnd/dist/hooks/useDrag/useDrag.js

// CONCATENATED MODULE: ../../node_modules/react-dnd/dist/hooks/useDrag/useDragSource.js

// CONCATENATED MODULE: ../../node_modules/react-dnd/dist/hooks/useDrag/useDragSourceConnector.js

// CONCATENATED MODULE: ../../node_modules/react-dnd/dist/hooks/useDrag/useDragSourceMonitor.js

// CONCATENATED MODULE: ../../node_modules/react-dnd/dist/hooks/useDrag/useDragType.js

// CONCATENATED MODULE: ../../node_modules/react-dnd/dist/hooks/useDrag/useRegisteredDragSource.js

// CONCATENATED MODULE: ../../node_modules/react-dnd/dist/hooks/useDrop/DropTargetImpl.js

// CONCATENATED MODULE: ../../node_modules/react-dnd/dist/hooks/useDrop/connectors.js

// CONCATENATED MODULE: ../../node_modules/react-dnd/dist/hooks/useDrop/useAccept.js

// CONCATENATED MODULE: ../../node_modules/react-dnd/dist/hooks/useDrop/useDrop.js

// CONCATENATED MODULE: ../../node_modules/react-dnd/dist/hooks/useDrop/useDropTarget.js

// CONCATENATED MODULE: ../../node_modules/react-dnd/dist/hooks/useDrop/useDropTargetConnector.js

// CONCATENATED MODULE: ../../node_modules/react-dnd/dist/hooks/useDrop/useDropTargetMonitor.js

// CONCATENATED MODULE: ../../node_modules/react-dnd/dist/hooks/useDrop/useRegisteredDropTarget.js

// CONCATENATED MODULE: ../../node_modules/react-dnd/dist/hooks/useMonitorOutput.js

// CONCATENATED MODULE: ../../node_modules/react-dnd/dist/internals/DragSourceMonitorImpl.js

// CONCATENATED MODULE: ../../node_modules/react-dnd/dist/internals/DropTargetMonitorImpl.js

// CONCATENATED MODULE: ../../node_modules/react-dnd/dist/internals/SourceConnector.js

// CONCATENATED MODULE: ../../node_modules/react-dnd/dist/internals/TargetConnector.js

// CONCATENATED MODULE: ../../node_modules/react-smooth/es6/Animate.js

// CONCATENATED MODULE: ../../node_modules/react-smooth/es6/AnimateGroup.js

// CONCATENATED MODULE: ../../node_modules/react-smooth/es6/AnimateGroupChild.js

// CONCATENATED MODULE: ../../node_modules/react-smooth/es6/AnimateManager.js

// CONCATENATED MODULE: ../../node_modules/react-smooth/es6/configUpdate.js

// CONCATENATED MODULE: ../../node_modules/react-smooth/es6/easing.js

// CONCATENATED MODULE: ../../node_modules/react-smooth/es6/setRafTimeout.js

// CONCATENATED MODULE: ../../node_modules/react-smooth/es6/util.js

// CONCATENATED MODULE: ../../node_modules/react-transition-group/esm/TransitionGroup.js

// CONCATENATED MODULE: ../../node_modules/react-transition-group/esm/utils/ChildMapping.js

// CONCATENATED MODULE: ../../node_modules/recharts-scale/es6/getNiceTickValues.js

// CONCATENATED MODULE: ../../node_modules/recharts-scale/es6/util/arithmetic.js

// CONCATENATED MODULE: ../../node_modules/recharts-scale/es6/util/utils.js

// CONCATENATED MODULE: ../../node_modules/recharts/es6/cartesian/Brush.js

// CONCATENATED MODULE: ../../node_modules/recharts/es6/cartesian/ReferenceArea.js

// CONCATENATED MODULE: ../../node_modules/recharts/es6/cartesian/ReferenceDot.js

// CONCATENATED MODULE: ../../node_modules/recharts/es6/component/DefaultLegendContent.js

// CONCATENATED MODULE: ../../node_modules/recharts/es6/component/DefaultTooltipContent.js

// CONCATENATED MODULE: ../../node_modules/recharts/es6/component/Legend.js

// CONCATENATED MODULE: ../../node_modules/recharts/es6/component/ResponsiveContainer.js

// CONCATENATED MODULE: ../../node_modules/recharts/es6/component/Tooltip.js

// CONCATENATED MODULE: ../../node_modules/recharts/es6/shape/Cross.js

// CONCATENATED MODULE: ../../node_modules/recharts/es6/shape/Curve.js

// CONCATENATED MODULE: ../../node_modules/recharts/es6/shape/Sector.js

// CONCATENATED MODULE: ../../node_modules/recharts/es6/shape/Symbols.js

// CONCATENATED MODULE: ../../node_modules/recharts/es6/util/ChartUtils.js

// CONCATENATED MODULE: ../../node_modules/recharts/es6/util/CssPrefixUtils.js

// CONCATENATED MODULE: ../../node_modules/recharts/es6/util/DetectReferenceElementsDomain.js

// CONCATENATED MODULE: ../../node_modules/redux/es/redux.js

// CSS selector

// Cache for the finalized classes value.

// Cache for the last used classes prop pointer.

// Cache for the last used rendered classes pointer.

// Calculate a one-sided slope.

// Calculate element positioning

// Calculate the base 10 exponent from the base 1e7 exponent.

// Calculate the domain of number axis

// Calculate the slopes of the tangents (Hermite-type interpolation) based on

// Calculate the ticks by the number of grid when the axis is a number axis

// Calculate trial digit, k.

// Call a callback function. If there is an application specific algorithm

// Call this.constructor.gDSFP to support sub-classes.

// Can this type generate exponential notation?

// Cancel move in case some other element consumed a mouseup event and it was not fired.

// Center vertically, height is 1em

// Certain fonts which overflow the line height will cause the textarea

// Check digits to determine which is the bigger number.

// Check if 'transition' or 'transform' natively supported in browser.

// Check if key is already down to avoid repeats being counted as multiple activations

// Check if the horizontal axis needs shifting

// Check if the vertical axis needs shifting

// Check that cyclic values are equal.

// Check the input state on mount, in case it was filled by the user

// Check the target ids at the innermost position. If they are valid, add them

// Check whether the digit to the left of the rounding digit is odd.

// Cleanup functions are executed lazily in React 17.

// Client component reference proxy need to be converted to a module.

// Client only

// Clone the event to not override `target` of the original event.

// Code Generator Information Report

// Coerce booleans to `1` or `0` and dates to milliseconds.

// Coerce inputs to strings.

// Coerce regexes to strings and treat strings, primitives and objects,

// Column properties

// Compare digit by digit.

// Compare divisor and new remainder.

// Compare divisor and remainder.

// Compare exponents.

// Compare lengths.

// Compare product and remainder.

// Composite means it takes into account transforms as well as layout.

// Compute the padding.

// Compute the prefix and suffix.

// Compute the size before applying overflow hidden to avoid any scroll jumps.

// Computes the decimal coefficient and exponent of the specified number x with

// Contain can be called between the component being unmounted and its cleanup function being run.

// Controlled input accepts its current value as a prop.

// Convert day-of-week and week-of-year to day-of-year.

// Convert precision in number of base 10 digits to base 1e7 digits.

// Convert sd to decimal places.

// Correctly detect the Edge browser.

// Correctly detect the Safari browser.

// Corresponds to 10 frames at 60 Hz.

// Count the linenumber up when we hit the LF (or a stand-alone CR).

// Create a new layer, increase the isolation of the computed values

// Create and configure initial Decimal constructor.

// Create cache key for current value.

// Credit https://github.com/twbs/bootstrap/blob/488fd8afc535ca3a6ad4dc581f5e89217b6a36ac/js/src/util/scrollbar.js#L14-L18

// Currently works in chrome only.

// Custom components can no longer be wrapped directly in React DnD 2.0

// Cut out early if the target id has not been set. This should prevent errors

// DOM Element detected

// Decimal called without new.

// Decimal methods

// Decimal point?

// Decimal prototype methods

// Decimal.prototype object

// Default JSS instance.

// Default base is 10.

// Delay the execution of the ripple effect.

// Deprecated! Use color.formatHex.

// Desktop to a lesser extent) that renders both setImmediate and

// Determine exponent.

// Determine if an Input is adorned on start.

// Determine if field is empty or filled.

// Determine if the toggle button value matches, or is contained in, the

// Determine leading zeros.

// Determine the sign. -0 is not less than 0, but 1 / -0 is!

// Determine trailing zeros.

// Disable link interactions

// Disable the vendor prefixer server-side, it does nothing.

// Do not act if user performed touchmove

// Dock to the bottom

// Dock to the left

// Dock to the right

// Dock to the top

// Does not strip trailing zeros.

// Does the angle go the wrong way? Flip the direction.

// Does the shared state override the default `parseError` that already comes with this instance?

// Does the shared state override the default `quoteName` that already comes with this instance?

// Doing the other way around crash on IE11 "''" https://github.com/cssinjs/jss/issues/242

// Don't add zeros to yd if shorter as subtraction only needs to start at yd length.

// Don't block pointer events on the select under the icon.

// Don't do anything if the value has not changed.

// Don't insert rule directly if there is no stringified version yet.

// Don't proceed if `reference` or `popper` are not valid elements

// Don't publish the source just yet (see why below)

// Don't replace / delete rule directly if there is no stringified version yet.

// Don't show a nice cursor but still prevent default

// Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.

// Dragging some elements, like <a> and <img> may still behave like a native drag event,

// Duplicate.

// E.g.

// E.g. 56700 becomes 56000 if 7 is the rounding digit.

// E.g. `Decimal.config({ precision: 20 });`

// E.g. rules inside of @media container

// END of default action (generated by JISON mode classic/merge :: 2,VT,VA,-,-,-,-,-,-)

// ESLint is disabled to allow listening to the `Escape` key. Refer to

// ESM COMPAT FLAG

// EXPORTS

// EXTERNAL MODULE: ../../node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js

// EXTERNAL MODULE: ../../node_modules/@babel/runtime/helpers/esm/extends.js

// EXTERNAL MODULE: ../../node_modules/@babel/runtime/helpers/esm/inheritsLoose.js + 1 modules

// EXTERNAL MODULE: ../../node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js

// EXTERNAL MODULE: ../../node_modules/@emotion/react/dist/emotion-react.browser.esm.js

// EXTERNAL MODULE: ../../node_modules/@mui/base/utils/isHostComponent.js

// EXTERNAL MODULE: ../../node_modules/@mui/base/utils/resolveComponentProps.js

// EXTERNAL MODULE: ../../node_modules/@mui/base/utils/useSlotProps.js + 3 modules

// EXTERNAL MODULE: ../../node_modules/@mui/material/Dialog/DialogContext.js

// EXTERNAL MODULE: ../../node_modules/@mui/material/DialogTitle/dialogTitleClasses.js

// EXTERNAL MODULE: ../../node_modules/@mui/material/FormControl/formControlState.js

// EXTERNAL MODULE: ../../node_modules/@mui/material/InputBase/utils.js

// EXTERNAL MODULE: ../../node_modules/@mui/material/Paper/Paper.js + 2 modules

// EXTERNAL MODULE: ../../node_modules/@mui/material/SvgIcon/SvgIcon.js + 1 modules

// EXTERNAL MODULE: ../../node_modules/@mui/material/styles/defaultTheme.js

// EXTERNAL MODULE: ../../node_modules/@mui/material/styles/styled.js + 6 modules

// EXTERNAL MODULE: ../../node_modules/@mui/material/styles/useTheme.js

// EXTERNAL MODULE: ../../node_modules/@mui/material/styles/useThemeProps.js + 2 modules

// EXTERNAL MODULE: ../../node_modules/@mui/material/utils/capitalize.js

// EXTERNAL MODULE: ../../node_modules/@mui/material/utils/ownerDocument.js

// EXTERNAL MODULE: ../../node_modules/@mui/material/utils/useControlled.js

// EXTERNAL MODULE: ../../node_modules/@mui/material/utils/useEventCallback.js

// EXTERNAL MODULE: ../../node_modules/@mui/private-theming/useTheme/useTheme.js

// EXTERNAL MODULE: ../../node_modules/@mui/system/esm/colorManipulator.js

// EXTERNAL MODULE: ../../node_modules/@mui/system/esm/createTheme/createTheme.js + 3 modules

// EXTERNAL MODULE: ../../node_modules/@mui/system/esm/styleFunctionSx/styleFunctionSx.js

// EXTERNAL MODULE: ../../node_modules/@mui/system/esm/useTheme.js

// EXTERNAL MODULE: ../../node_modules/@mui/system/esm/useThemeWithoutDefault.js

// EXTERNAL MODULE: ../../node_modules/@mui/utils/esm/ClassNameGenerator/ClassNameGenerator.js

// EXTERNAL MODULE: ../../node_modules/@mui/utils/esm/capitalize.js

// EXTERNAL MODULE: ../../node_modules/@mui/utils/esm/composeClasses/composeClasses.js

// EXTERNAL MODULE: ../../node_modules/@mui/utils/esm/deepmerge.js

// EXTERNAL MODULE: ../../node_modules/@mui/utils/esm/generateUtilityClass/generateUtilityClass.js

// EXTERNAL MODULE: ../../node_modules/@mui/utils/esm/generateUtilityClasses/generateUtilityClasses.js

// EXTERNAL MODULE: ../../node_modules/@mui/utils/esm/getScrollbarSize.js

// EXTERNAL MODULE: ../../node_modules/@mui/utils/esm/resolveProps.js

// EXTERNAL MODULE: ../../node_modules/@mui/utils/esm/setRef.js

// EXTERNAL MODULE: ../../node_modules/@react-dnd/invariant/dist/index.js

// EXTERNAL MODULE: ../../node_modules/@react-dnd/shallowequal/dist/index.js

// EXTERNAL MODULE: ../../node_modules/classnames/index.js

// EXTERNAL MODULE: ../../node_modules/d3-scale/src/band.js + 1 modules

// EXTERNAL MODULE: ../../node_modules/d3-scale/src/init.js

// EXTERNAL MODULE: ../../node_modules/d3-scale/src/ordinal.js + 1 modules

// EXTERNAL MODULE: ../../node_modules/d3-shape/src/array.js

// EXTERNAL MODULE: ../../node_modules/d3-shape/src/constant.js

// EXTERNAL MODULE: ../../node_modules/decimal.js-light/decimal.js

// EXTERNAL MODULE: ../../node_modules/eventemitter3/index.js

// EXTERNAL MODULE: ../../node_modules/fast-deep-equal/index.js

// EXTERNAL MODULE: ../../node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js

// EXTERNAL MODULE: ../../node_modules/lodash/every.js

// EXTERNAL MODULE: ../../node_modules/lodash/isArray.js

// EXTERNAL MODULE: ../../node_modules/lodash/isEqual.js

// EXTERNAL MODULE: ../../node_modules/lodash/isFunction.js

// EXTERNAL MODULE: ../../node_modules/lodash/isNil.js

// EXTERNAL MODULE: ../../node_modules/lodash/upperFirst.js

// EXTERNAL MODULE: ../../node_modules/prop-types/index.js

// EXTERNAL MODULE: ../../node_modules/react-dnd/dist/core/DndContext.js

// EXTERNAL MODULE: ../../node_modules/react-dnd/dist/hooks/useCollectedProps.js + 2 modules

// EXTERNAL MODULE: ../../node_modules/react-dnd/dist/hooks/useDragDropManager.js

// EXTERNAL MODULE: ../../node_modules/react-dnd/dist/hooks/useIsomorphicLayoutEffect.js

// EXTERNAL MODULE: ../../node_modules/react-dnd/dist/hooks/useOptionalFactory.js

// EXTERNAL MODULE: ../../node_modules/react-dnd/dist/internals/isRef.js

// EXTERNAL MODULE: ../../node_modules/react-dnd/dist/internals/registration.js

// EXTERNAL MODULE: ../../node_modules/react-dom/index.js

// EXTERNAL MODULE: ../../node_modules/react-smooth/node_modules/react-transition-group/index.js

// EXTERNAL MODULE: ../../node_modules/react/index.js

// EXTERNAL MODULE: ../../node_modules/react/jsx-runtime.js

// EXTERNAL MODULE: ../../node_modules/recharts/es6/cartesian/Bar.js

// EXTERNAL MODULE: ../../node_modules/recharts/es6/cartesian/Line.js

// EXTERNAL MODULE: ../../node_modules/recharts/es6/cartesian/ReferenceLine.js

// EXTERNAL MODULE: ../../node_modules/recharts/es6/chart/generateCategoricalChart.js + 9 modules

// EXTERNAL MODULE: ../../node_modules/recharts/es6/shape/Dot.js

// EXTERNAL MODULE: ../../node_modules/recharts/es6/shape/Rectangle.js

// EXTERNAL MODULE: ../../node_modules/recharts/es6/util/CartesianUtils.js

// EXTERNAL MODULE: ../../node_modules/recharts/es6/util/ChartUtils.js + 86 modules

// EXTERNAL MODULE: ../../node_modules/recharts/es6/util/DataUtils.js

// EXTERNAL MODULE: ../../node_modules/recharts/es6/util/Global.js

// EXTERNAL MODULE: ../../node_modules/recharts/es6/util/IfOverflowMatches.js

// EXTERNAL MODULE: ../../node_modules/recharts/es6/util/LogUtils.js

// EXTERNAL MODULE: ../../node_modules/recharts/es6/util/PolarUtils.js

// Edge

// Either 0?

// Either this is the first call, activity has stopped and we're at the

// Emotion attaches all the styles as `__emotion_styles`.

// Empty object will remove all currently defined props

// Enable rule without name for inline styles.

// Ensure that this component is not "activated" synchronously.

// Ensure the sign of `-0` is preserved.

// Ensure xd points to the longer array.

// Equivalent to push, but avoids a function call.

// Error if any of these lifecycles are present,

// Estimate the precision increase necessary to ensure the first 4 rounding digits are correct.

// Even if we were, there is another bug in Internet Explorer 10.

// Exit early for strings to avoid a performance hit in some environments.

// Explicitly set the default value to solve a bug on IE11.

// Exponential form?

// Export javascript style and css style vendor prefixes.

// Expose `MapCache`.

// Expose the prefix.

// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.

// Fallback to originalResult (result without trimming) if we cannot find the

// Fallback to this default id when possible.

// Fast path for small integers.

// Filter out the `sx` style function from the previous styled component to prevent unnecessary styles generated by the composite components.

// Finally call hover on all matching targets.

// Finally, add the keys which didn't appear before any key in `next`

// Find a plugin for current prefix property.

// Find a position.

// Firefox 19+

// Firefox can dispatch this event in an infinite loop

// Firefox can even throw an error for invalid properties, e.g., "0".

// Firefox only cares if it's an image, but WebKit also wants it to be detached.

// Firefox wants us to check `-x` and `-y` variations as well

// Firefox won't drag without setting data

// First, attempt with faster native method

// Fix IE11 issue, to remove at some point.

// Fix IE11 width issue

// Fix Popper.js display issue

// Fix a bug on Chrome where the scroll isn't initially 0.

// Fix a bug with IE11 where the focus/blur events are triggered

// Fix conflict with bootstrap

// Fix conflict with normalize.css and sanitize.css

// Fix for https://github.com/facebook/react/issues/7769

// Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications

// Fixes https://github.com/popperjs/popper-core/issues/1223

// Fixes https://github.com/recharts/recharts/issues/2143

// Flow doesn't support to extend this property, but it's the most

// Font and text properties

// For SI-prefix, the suffix is lazily computed.

// For each key of `next`, the list of keys to insert before that key in

// For example, formatDecimalParts(1.23) returns ["123", 0].

// For fixed precision, it must be in [0, 20].

// For high frequency updates (e.g. `resize` and `scroll` events), always

// For loop instead of findIndex because the latter is very slow in some browsers

// For other targets, ask IE

// For reasons explained above, we are also unable to use `setImmediate`

// For server-side rendering.

// For significant precision, it must be in [1, 21].

// For some reason the animation is broken on Mobile Chrome if the size is even.

// Forwarded Parser Analysis flags:

// Get a function to be used for $ref replacement.

// Get consecutive differences and slopes

// Get degree-1 coefficients

// Get degree-2 and degree-3 coefficients

// Get last entirely matched line into the `pre_lines[]` array's

// Get the draggable source

// Get the index of rd within w, adjusted for leading zeros.

// Get the index of rd within w.

// Get the length of the first word of the digits array xd.

// Get the number of digits of w.

// Get the offset of the anchoring element

// Get the rounding digit at index j of w.

// Get the size of the ripple

// Get the source client offset

// Get the step between two ticks

// Get the transform origin point on the element itself

// Get the union set of category axis

// Gets the closest ancestor positioned element. Handles some edge cases,

// Gets the entire size of the scrollable document area, even extending outside

// Gets the maximum area that the element is visible in due to any number of

// Give up, the result is false

// Given developers can stop the propagation of the synthetic event,

// Global index counter to preserve source order.

// Grid properties

// Hack to get children with a negative margin to not falsify the height computation.

// Handle invocations in a tight loop.

// Handle rules like @font-face, which can have multiple styles in an array

// Hardcode test to convert "flex" to "-ms-flexbox" for IE10.

// Has this (error?) state been outfitted with a custom expectations description text for human consumption?

// Help with debuggability.

// Helper APIs

// Helper function which can be overridden by user code later on: put suitable quotes around

// Helper functions for Decimal.prototype (P) and/or Decimal methods, and their callers.

// Hijack the default focus behavior.

// However, `flush` does not make any arrangements to be called again if an

// However, if we ever elect to use timers in Safari, the prevalent work-around

// However, note that even this simple case requires nuances to operate in a

// However, since this timer gets frequently dropped in Firefox

// However, they do not work reliably in Internet Explorer or Safari.

// IE 11 has no ShadowRoot

// IE can even throw an error in some cases, for e.g. style.content = 'bar'.

// IE doesn't support MIME types in setData

// IE may throw if property is unknown.

// IE requires this to fire dragover events

// IE11

// IE11 does not support Object.values

// IE11, Edge (prior to using Bink?) use 'Esc'

// IFF that result is *not* `undefined`. (See also the parser kernel code.)

// INTERNAL USE ONLY

// INTERNAL USE ONLY: the set of parseErrorInfo objects created since the last cleanup

// ISC license, Copyright 2018 Vladimir Agafonkin.

// Ideally we would adjust `isFocusVisible(event)` to look at `relatedTarget` for blur events.

// If 'transition' or 'transition-property' property.

// If <html> has a CSS width greater than the viewport, then this will be

// If `Object.create(null)` is not supported we prefix the event names with a

// If a UNIX timestamp is specified, return it.

// If a negative value rounds to zero after formatting, and no explicit positive sign is requested, hide the sign.

// If a task schedules additional tasks recursively, the task queue can grow

// If a task throws an exception, `flush` ensures that its state will remain

// If a time zone is specified, all fields are interpreted as UTC and then

// If an accessor is specified, promote it to a comparator. In this case we

// If an anchor element wasn't provided, just use the parent body element of this Popover

// If base 1e7 exponents differ...

// If by this time no drag source reacted, tell browser not to drag.

// If child drag source refuses drag but parent agrees,

// If divisor < remainder.

// If dynamic options.ssr == true during SSR,

// If either is zero...

// If exponents differ...

// If input's width is shrunk and it's not visible, don't sync height.

// If k is 0, there is no need to compare yd and rem again below, so change cmp to 1

// If neither are provided let the Modal take care of choosing the container

// If new component APIs are defined, "unsafe" lifecycles won't be called.

// If non-zero...

// If not enough, can use https://github.com/DieterHolvoet/event-propagation-path/blob/master/propagationPath.js

// If passed a ReactElement, clone it and attach this function as a ref.

// If product was < previous remainder.

// If selector setter is not implemented, rerender the rule.

// If so, use that one instead of the less palatable token set.

// If source.beginDrag returns null, this is an indicator to cancel the drag

// If that was the last modal in a container, clean up the container.

// If the TextareaAutosize component is replaced by Suspense with a fallback, the last

// If the anchorEl prop is provided, use its parent body element as the container

// If the container prop is provided, use that

// If the fill character is "0", grouping is applied after padding.

// If the fill character is not "0", grouping is applied before padding.

// If the modal we are adding is already in the DOM.

// If the month was not specified, inherit from the quarter.

// If the start tangent is not coincident with (x0,y0), line to.

// If the target changes position as the result of `dragenter`, `dragover` might still

// If the type is array, than we need to add placeholders in the template for the overrides, variants and the sx styles.

// If the type is function, we need to define the default theme.

// If this is utcParse, never use the local timezone.

// If touch-action: none; is not supported we need to prevent the scroll manually.

// If user specifies an insertion point and it can't be found in the document -

// If we call `asap` within tasks scheduled by `asap`, the queue will

// If we don't have gBCR, just use 0,0 rather than error

// If we don't see a visibility change within 100ms, it's probably a

// If we have a fn values map, it is a rule with function values.

// If we have a style function, the entire rule is dynamic and style object

// If y is a small integer use the 'exponentiation by squaring' algorithm.

// If yd is longer than xd, swap xd and yd so xd points to the longer array.

// If you want to use random values please consider the Birthday Problem: https://en.wikipedia.org/wiki/Birthday_problem

// If zero fill is specified, padding goes after sign and before digits.

// Ignore coincident points.

// Ignore everything but left-click

// Ignore non-index properties.

// Ignore the events not coming from the "backdrop".

// Ignore the scrollbar width

// Important!

// Improve Gatsby support

// Improve scrollable dialog support.

// Improve type search style.

// In IE11 it is possible for document.activeElement to be null resulting

// In React 18, state updates in a ResizeObserver's callback are happening after the paint which causes flickering

// In a web browser, exceptions are not fatal. However, to avoid

// In case previous insertion fails, passed index might be wrong

// In case the modal wasn't in the DOM yet.

// In code:

// In order to preserve the right order, we need to queue all `.addRule` calls,

// In some cases the user may want to override this behavior, e.g.

// In the case the element node is external and it is already in the DOM.

// In the context of a TransitionGroup all enters are really appears

// In the documentation, we are using `autoprefixer` to solve this problem.

// In the most browsers, rules inserted using insertRule() API will be lost when style element is removed.

// In this case, getSlotProps is responsible for calling the external event handlers.

// Initial children should all be entering, dependent on appear

// Initial estimate.

// Initialise the result array with zeros.

// Initialize the coordinates using the client offset

// Initialize the full coordinates

// Inlined / shortened version of `kindOf` from https://github.com/jonschlinkert/kind-of

// Inlined version of the `symbol-observable` polyfill

// Inputs and textareas should be selectable

// Inspired by https://github.com/focus-trap/tabbable

// Instead, we can look if the active element was restored on the BODY element.

// Instead, we periodically shift 1024 tasks off the queue.

// Integer.

// Internal constant.

// Internet Explorer 10 is the only browser that has setImmediate but does

// Interpolate

// Interpolate pairs of numbers in a & b.

// Interpolation in One Dimension. Astronomy and Astrophysics, Vol. 239, NO.

// Invalid dates are coerced to `NaN`.

// Invoke the leading edge.

// Is a global static MUI style?

// Is a vertical scrollbar displayed?

// Is the digit to be rounded up in the first word of xd?

// Is the radius negative? Error.

// Is the rounding digit in the first word of xd?

// Is this a complete circle? Draw two arcs to complete the circle.

// Is this an integer type?

// Is this arc empty? We’re done.

// Is this entry a helper function?

// Is this path empty? Move to (x0,y0).

// Is this path empty? Move to (x1,y1).

// It also neatly avoids a situation where render() returns null

// It contains the same rule registered by name and by selector.

// It is a problem though when a parent passes a className

// It is a rules container like for e.g. ConditionalRule.

// It is a string or a number as a string like '1'.

// It is an at-rule and it has no instance.

// It is not sufficient to assign `setImmediate` to `requestFlush` because

// It seems to kick-off the source order specificity algorithm.

// It will be inserted all together when .attach is called.

// It will pass a snapshot value to did-update though.

// It's a Transition like component

// It's a getter.

// It's corresponding to the left with LTR.

// It's inspired by

// It's most likely on issue on userland.

// Its name will be periodically randomized to break any code that depends on

// JavaScript numbers: -7

// JavaScript numbers: 21

// JisonLexerError: JisonLexerError,        /// <-- injected by the code generator

// Just let it drag. It's a native type (URL or text) and will be picked up in

// Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.

// Key might contain a unique suffix in case the `name` passed by user was duplicate.

// Keyboard accessibility for non interactive elements

// Keyframes is already prefixed. e.g. key = '@-webkit-keyframes a'

// Later, we're going to translate the node back to its original location with `none`.

// Lazily create the ref replacer function just once for

// Leading zero?

// Legacy `process.binding('util')` for Node.js < 10.

// Let's ignore that piece of logic if users are already overriding the width

// Lexer Analysis flags:

// Limit number of zeros prepended to max(ceil(pr / LOG_BASE), len) + 1.

// Looks like a Safari bug: dataTransfer.types is null, but there was no draggable.

// Magic number from d3

// Maintain compat with existing charts / default SVG behavior

// Make sure the event starts and ends on the same DOM element.

// Make the flex item shrink with Firefox

// Manually shift all values starting at the index back to the

// Map, Set, iterable, string, or anything else

// Margin properties

// Mask properties

// Math.sqrt underflow/overflow?

// Max k of 9007199254740991 takes 53 loop iterations.

// Maximum digits array length; leaves [28, 34] guard digits.

// Measure height of a textarea with a single row

// MessageChannel useless for the purposes of ASAP.

// Minus sign?

// Missing `disableRestoreFocus` which is fine.

// Modals don't open on the server so this won't conflict with concurrent requests.

// Modifiers have the ability to reset the current update cycle. The

// Most of the logic is implemented in `SelectInput`.

// Most of these values can be changed during run-time using `Decimal.config`.

// Motion properties

// Move to the next element.

// Multiple actions are dispatched here, which is why this doesn't return an action

// Multiply!

// Must use `global` or `self` instead of `window` to work in both frames and web

// MutationObservers, so we don't need to fall back in that case.

// NAMESPACE OBJECT: ../../node_modules/react-dnd-html5-backend/dist/NativeTypes.js

// NAMESPACE OBJECT: ../../node_modules/victory-vendor/es/d3-scale.js

// NOTE: as this API uses parse() as a closure, it MUST be set again on every parse() invocation,

// NOTE: we *assume* no lexer pre/post handlers are set up *after* 

// NOV(II), P. 443, 1990.

// NaN, ±Infinity

// Name the function so it is clearer in the documentation

// Native select can't be selected either.

// Need a large enough difference to allow scrolling.

// Need a large enough difference to update the height.

// Need to use CSS Object Model (CSSOM) to be able to comply with Content Security Policy (CSP)

// Negative or zero?

// Never forget.

// Newer versions of React will ignore that lifecycle if gSBU exists.

// Newer versions of React will ignore these lifecycles if gDSFP exists.

// Newton-Raphson iteration.

// No horizontal points are specified

// No need for transitions when the component is hidden

// No need for validFocusTarget check. The user does that by attaching it to

// No need to check for zero, as +x + +y != 0 && -x + -y != 0

// No need to display any value if the field is empty.

// No need to prefix IE/Edge. Older browsers will ignore unsupported rules.

// No need to render an empty rule.

// No operation performed.

// No vertical points are specified

// Node.js 0.10 has enumerable non-index properties on buffers.

// Non `Object` object instances with different constructors are not equal.

// Normalise xd and yd so highest order digit of yd is >= BASE/2

// Normalize loader to return the module as form { default: Component } for `React.lazy`.

// Not all elements in IE11 have a focus method.

// Not existing properties.

// Note that only array and object references are nuked as those

// Note that the "Dustbin Stress Test" fails if this is not

// Note that this is only kept for the edge case where someone is passing in a promise as first argument

// Note: the arrays are 1-based, while `len` itself is a valid index,

// Now we are ready to publish the drag source.. or are we not?

// Numbers with massively different exponents would result in a very high number of zeros

// Object syntax {fallbacks: {prop: value}}

// Offsets are the actual position the popper needs to have to be

// Offsets can be applied only to the popper element

// Old call signature before `react-transition-group` implemented `nodeRef`

// Older versions will require our polyfilled will-update value.

// On CRLF, the linenumber is incremented when you fetch the CR or the CRLF combo

// On each update cycle, the `modifiersData` property for each modifier

// On the first iteration only, check to see if rounding up gives the exact result as the

// On the server Emotion doesn't use React.forwardRef for creating components, so the created

// On visiting object, check for its dependencies and visit them recursively

// Once IE11 support is dropped the focus() call can be unconditional.

// Once a flush has been requested, no further calls to `requestFlush` are

// Once tested, result is cached. It gives us up to 70% perf boost.

// Only IE requires us to explicitly say

// Only handle left clicks

// Only invoke if we have `lastArgs` which means `func` has been

// Only perform calculations if using features that require them (multiline, scaleToFit)

// Only proceed if we have not handled it already.

// Only special HTML elements have these default behaviors.

// Only start adding at yd.length - 1 as the further digits of xd can be left as they are.

// Only trigger changes if the extents of the brush have actually changed

// Options has been already created, now we only increase index.

// Options:

// Order is important, because we can't use insertRule API if style element is not attached.

// Order matters. We need to check Webkit the last one because

// Orders the modifiers based on their dependencies and `phase`

// Original styles object.

// Otherwise insert after the last attached.

// Otherwise make sure the next top modal is visible to a screen reader.

// Otherwise, all fields are in local time.

// Otherwise, interpolate each of the numbers and rejoin the string.

// Otherwise... this might refer to a RULE token i.e. a non-terminal: see if we can dig that one up.

// Outline properties

// Over 80% of the iOS phones are compatible

// Padding properties

// Parser Analysis flags:

// Pass x to Math.sqrt as integer, then adjust the exponent of the result.

// Perform in the willUpdate

// Perform the `toStringTag` check first to avoid errors with some

// Perform the initial formatting.

// Perspective properties

// PhantomJS 2 has enumerable non-index properties on typed arrays.

// Pick up the lexer details for the current symbol as that one is not 'look-ahead' any more:

// Place conditional right after the parent rule to ensure right ordering.

// Plugins can create rules.

// Popper 1 is broken in this case and never had a bug report so let's assume

// Position properties

// Potentially swap the index if needed.

// Preact support, target is read only property on a native event.

// Prefill cache with known css properties to reduce amount of

// Prepare the ripple effect.

// Prepend zeros to equalise exponents.

// Prepend zeros to equalise exponents. Note: Faster to use reverse then do unshifts.

// Preserve the desired aspect ratio

// Prevent default "drop and blow away the whole document" action.

// Prevent iOS text selection on long-tap.

// Prevent infinite loop.

// Prevent leaking memory for long chains of recursive calls to `asap`.

// Prevent padding issue with fullWidth.

// Prevent padding issue with the Modal and fixed positioned AppBar.

// Prevent rounding of intermediate calculations.

// Prevent scroll of the page

// Prevent the app bar to be visible on each printed page.

// Prevents scroll issue, waiting for Popper.js to add this style once initiated.

// Produce a (more or less) human-readable list of expected tokens at the point of failure.

// Properties that cannot be correctly detected using the

// Props with default values added.

// Provide a fake value as Chrome might not let you access it for security reasons.

// ROUND_CEIL       2 Towards +Infinity.

// ROUND_DOWN       1 Towards zero.

// ROUND_FLOOR      3 Towards -Infinity.

// ROUND_HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.

// ROUND_HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.

// ROUND_HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.

// ROUND_HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.

// ROUND_HALF_UP    4 Towards nearest neighbour. If equidistant, up.

// ROUND_UP         0 Away from zero.

// Reach 42px touch target, about ~8mm on screen.

// React <= 16.2 does not support getSnapshotBeforeUpdate.

// React <= 16.2 does not support static getDerivedStateFromProps.

// React may warn about cWM/cWRP/cWU methods being deprecated.

// React v16.11 and below

// React v16.12 and above

// React wouldn't have time to trigger a re-render so `focusVisible` would be stale.

// Rearrange xs and ys so that xs is sorted

// Receiving a mouse event in the middle of a dragging operation

// Reconstruct the final output based on the desired alignment.

// Recursively compare arrays (susceptible to call stack limits).

// Recursively compare objects (susceptible to call stack limits).

// Recursively convert values (susceptible to call stack limits).

// Recursively flatten arrays (susceptible to call stack limits).

// Redefine target to allow name and value to be read.

// Reduce the iteration if the default slot props is empty

// Reduce the iteration if the slot props is empty

// Ref: https://github.com/emotion-js/emotion/blob/16d971d0da229596d6bcc39d282ba9753c9ee7cf/packages/styled/src/base.js#L186

// Reject Infinity/NaN.

// Related issue - https://github.com/facebook/react/issues/24331

// Remove IE11 arrow

// Remove cache for benchmark tests or return property from the cache.

// Remove cache for benchmark tests or return value from cache.

// Remove excess digits.

// Remove from the content flow

// Remove leading zeros and adjust exponent accordingly.

// Remove leading zeros.

// Remove props.

// Remove the margin in Safari

// Remove the padding in Firefox

// Remove the padding when type=search.

// Remove the title ahead of time.

// Remove those targetIds that don't match the targetType.  This

// Remove trailing zeros of last w.

// Remove trailing zeros.

// Renderable is defined if StyleSheet option `link` is true.

// Replace all $refs.

// Replace all & by the parent or prefix & with the parent.

// Report error

// Required for select\text-field height consistency

// Reset

// Reset 23pxthe native input line-height

// Reset Firefox invalid required input style

// Reset any `maxWait` timer.

// Reset default value

// Reset for Safari

// Reset global state in case the exception is caught.

// Reset iOS opacity

// Reset on mouse devices

// Reset on touch devices, it doesn't add specificity

// Reset styles for current property.

// Reset the array, or remove it completely if we have no more listeners.

// Resets for multiple select with chips

// Resize menu on `defaultOpen` automatic toggle.

// ResizeObserver's handler that runs because of the change in the layout is trying to

// Response determines if label is presented above field or as placeholder.

// Restart the timer.

// Result exponent may be one less than e.

// Result is negative if x is negative and the last digit of integer y is odd.

// Retain a reference to this Decimal constructor, and shadow Decimal.prototype.constructor

// Rethrow might be better if it's not the expected error but do we really

// Return 0 if either is 0.

// Return NULL when the symbol is unknown to the parser.

// Return a more-or-less human-readable description of the given symbol, when available,

// Return already prefixed value without prefixing.

// Return custom CSS variable without prefixing.

// Return false if setter was not successful.

// Return false if value not supported.

// Return the `$accept` rule's `$$` result, if available.

// Return the maximum integer which is smaller than 'value' when 'value' is greater than 1

// Return the name of the given symbol (terminal or non-terminal) as a string, when available.

// Return x if x is 0.

// Return x if y is zero and x is non-zero.

// Return x if y is zero.

// Return y if y is non-zero.

// Return y negated if x is zero.

// Returns a function which generates unique class names based on counters.

// Returns the composite rect of an element relative to its offsetParent.

// Returns the layout rect of an element relative to its offsetParent. Layout

// Reverse descending domains.

// Reverse the argument reduction.

// Round the offsets to the nearest suitable subpixel based on the DPR.

// Rules registry for access by .get() method.

// SSR Fix (https://github.com/react-dnd/react-dnd/pull/813

// SVG

// Safari 6 and 6.1 for desktop, iPad, and iPhone are the only browsers that

// Safari 6.0 has a problem where timers will get lost while the user is

// Safari 6.0.5 (at least) intermittently fails to create message ports on a

// Safari 9 has enumerable `arguments.length` in strict mode.

// Safari, on iOS, supports touch action since v13.

// Same logic as the LinearProgress track color

// Same logic as useAutocomplete.js

// Search for the interval x is in, returning the corresponding y if x is one of the original xs

// See also:

// See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.

// See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.

// See https://github.com/mui/material-ui/issues/31766

// See https://github.com/mui/material-ui/issues/32640

// See https://www.particleincell.com/2012/bezier-splines/ for derivation.

// See:

// Set absolute position to get the size of collapsed content

// Set activeTooltipIndex to the index with the same value as data.activeLabel

// Set the default precision if not specified,

// Shadow properties

// ShadowRoot detected

// Show and hide the placeholder logic

// Show user-specified drop effect.

// Signs differ?

// Since CSS.supports is supported on all but Edge@12 and IE and touch-action

// Skip configuration where the position is screen size invariant.

// Skip index properties.

// So check for the explicit __reactInternalSnapshotFlag flag to determine behavior.

// So our solution is to render sheets them in the reverse order child->sheet, so

// So that VoiceOver's focus indicator matches the thumb's dimensions

// So the animation always start from the start.

// So we see the popover when it's empty.

// So we take precedent over the style of a native <a /> element.

// Some random properties

// Special optimization for only a single match.

// Start the timer for the trailing edge.

// Stop the default behavior when we're not expecting a native item to be dropped.

// Store "generation" key. Just returns a new object every time

// Store drag source node so we can check whether

// Store the reference and popper rects to be read by modifiers

// Strip out disabled modifiers

// Style sheet was created without link: true and attached, in this case we

// StyleSheet of the child has a higher specificity, because of the source order.

// Subtract b from a.

// Subtract divisor from product.

// Subtract divisor from remainder.

// Subtract product from remainder.

// Subtract the number of trailing zeros of the last word.

// Subtract yd from xd.

// Support CSSTOM.

// Support for direct import(), eg: dynamic(import('../hello-world'))

// Support for having import as a function, eg: dynamic(() => import('../hello-world'))

// Support for passing options, eg: dynamic(import('../hello-world'), {loading: () => <p>Loading something</p>})

// Support space separated values via `[['5px', '10px']]`.

// Supports determination of isControlled().

// Swallow the event, in case someone is listening for the escape key on the body.

// Sync update – it will always be executed, even if not necessary. This

// TODO fast estimate?

// TODO needs to verify dataKey is Function

// TODO v5 deprecate, v6 remove for sx

// TODO v6: Remove PopperComponent, PopperProps, TransitionComponent and TransitionProps.

// TODO: Cause of circular dependency. Needs refactor.

// TODO: ScaleHelper

// TODO: check again if React releases their internal changes to focus event handling (https://github.com/facebook/react/pull/19186).

// TODO: check if displayName is valid.

// TODO: if we ever make a react-native version of this,

// TODO: remove fallback for next major

// TODO: remove support for Safari < 13.

// TODO: remove this export once ClassNameGenerator is stable

// TODO: rename getAutoHeightDuration to something more generic (width support)

// TODO: return `EventHandlerName extends `on${infer EventName}` ? Lowercase<EventName> : never` once generatePropTypes runs with TS 4.1

// TODO: update brush when children update

// Taylor series.

// Test for A's keys different from B.

// Test prefixed value.

// Test value as it is.

// The "compact" mode is mainly used as the panorama within Brush

// The "n" type is an alias for ",g".

// The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or

// The `Select` component is a simple API wrapper to expose something better to play with.

// The abscissas of vertical grid lines

// The am-pm flag is 0 for AM, and 1 for PM.

// The argument reduction method above may result in overflow if the argument y is a massive

// The autoFocus of React might trigger the event before the componentDidMount.

// The blur won't fire when the disabled state is set on a focused input.

// The browsers will use the image intrinsic size under different conditions.

// The cache is set up for fast lookup -- we assume a lexer will switch states much less often than it will

// The drag preview may either be attached via ref or connect function

// The drop target may either be attached via ref or connect function

// The element was already mounted.

// The event is MouseEvent

// The event is TouchEvent

// The exponent value at and above which `toString` returns exponential notation.

// The exponent value at and beneath which `toString` returns exponential notation.

// The expression `w % mathpow(10, n - j - 1)` returns all the digits of w to the right of the

// The fill of colors of grid lines

// The flush function processes all tasks that have been scheduled with

// The forbidden HTML tags are the ones from ARIA specification that

// The handler doesn't take event.defaultPrevented into account:

// The height of the outer content

// The initial configuration properties of the Decimal constructor.

// The limit on the value of `precision`, and on the value of the first argument to

// The maximum number of significant digits of the result of a calculation or base conversion.

// The message channel technique was discovered by Malte Ubl and was the

// The modal might be closed before it had the chance to be mounted in the DOM.

// The mouseover event will trigger for every nested element in the tooltip.

// The native select doesn't respond to enter on macOS, but it's recommended by

// The natural logarithm of 10.

// The number of leading zeros of w is given by LOG_BASE - n.

// The ordinates of horizontal grid lines

// The orientation of axis

// The position of the next task to execute in the task queue. This is

// The primary input mechanism of the device includes a pointing device of limited accuracy.

// The produced list may contain token or token set descriptions instead of the tokens

// The radius of border

// The radius of four corners when radius is a number

// The radius of left-top, right-top, right-bottom, left-bottom when radius is an array

// The ratio between the rough step and the smallest number which has a bigger

// The react-loadable babel plugin will turn dynamic(import('../hello-world')) into dynamic(() => import('../hello-world'))

// The rest of the members is kept intact as they are harmless.

// The returned list (array) will not contain any duplicate entries.

// The rightmost point in the dataset should give an exact result

// The rounding mode used by default by `toInteger`, `toDecimalPlaces`, `toExponential`,

// The series converges faster the closer the argument is to 1, so using

// The simpler case - getSlotProps is not defined, so no internal event handlers are defined,

// The single `==` condition below covers both these `===` comparisons in a single

// The step should be a float number when the difference is smaller than 1

// The step which is easy to understand between two ticks

// The string returned by toExponential either has the form \d\.\d+e[-+]\d+

// The ticks

// The ticks setted by user should only affect the ticks adjacent to axis line

// The tooltip should stay active when it was active in the previous render. If this is not

// The touch interaction occurs too quickly.

// The use of `Object#toString` avoids issues with the `typeof` operator

// The value could be a number, the DOM will stringify it anyway.

// The value is most likely not a valid HTML attribute.

// The whatwg spec defines how the browser should behave but does not explicitly mention any events:

// The width or height of tick

// There is no point in displaying an empty tooltip.

// There is no sheet when the renderer is used from a standalone StyleRule.

// There was no camel case in place

// These recursive directive definitions must be deferred.

// These values must be integers within the stated ranges (inclusive).

// These would otherwise all be memory leak opportunities!

// This action has a similiar effect to ActionTypes.INIT.

// This allows seamless integration with the most popular form libraries.

// This also ensures a stable sort in V8 and other engines.

// This doesn't work in IE11 due to https://github.com/facebook/react/issues/3751

// This guarantees the loader is always resolved after preloading.

// This hack is needed because the `__proto__` property is still inherited in

// This handles the case when num is very small (0.00000001), js will turn this into 1e-8.

// This helps us achieve a neat API where user doesn't even know that refs

// This is for `asap.js` only.

// This is for to force a repaint,

// This is necessary because Firefox and Safari will keep focus

// This is needed because the drag preview needs to be drawn or else it fires an 'mousemove' event

// This is non-exhaustive but covers the most common CSS properties that

// This is probably a native item type we don't understand.

// This is the most basic placement, and will be adjusted by

// This is the reason such behavior is strictly opt-in.

// This is useful to prevent an error thrown in a task from stalling the event

// This modifier takes the styles prepared by the `computeStyles` modifier

// This needs to be a deep-equality check because some monitor-collected values

// This one MAY be empty; userland code should use the `upcomingInput` API to obtain more text which follows the 'lexer cursor position'...  

// This prevents infinite rendering loop.

// This shouldn't be necessary, but there are weird race conditions with

// This way, we can get a performance boost.

// Though IE will keep them and we need a consistent behavior.

// Throw first error

// Timers are implemented universally.

// To be safe, we nuke the other internal stack columns as well...

// To detect a tab/window switch, we look for a blur event followed

// To detect wether there is any reference lines whose props alwaysShow is true

// To ensure persistent data, use `${name}#persistent`

// To make sure we don't execute the import without rendering first

// To make the animation happen,  we have to separate each rendering and avoid being processed as batched.

// To request a high priority event, we induce a mutation observer by toggling

// Touche devices

// Tracks if either the rendered classes or classes prop has changed,

// Transform base

// Transform properties

// Transition properties

// Translate the node so it can't be seen on the screen.

// Trim insignificant zeros.

// Trims insignificant zeros, e.g., replaces 1.2000k with 1.2k.

// Try to find a comment placeholder if registry is empty.

// Try to guarantee the tail to be displayed

// Try to insert before the next higher sheet.

// Try webkit fallback.

// UNUSED EXPORTS: AnimateGroup, configBezier, configSpring

// UNUSED EXPORTS: ButtonBaseRoot

// UNUSED EXPORTS: ENTERED, ENTERING, EXITED, EXITING, UNMOUNTED

// UNUSED EXPORTS: MAX_VALUE_REG, MIN_VALUE_REG, getDomainOfErrorBars, getStackedData, offsetPositive, offsetSign

// UNUSED EXPORTS: NativeTypes, getEmptyImage

// UNUSED EXPORTS: SliderMark, SliderMarkLabel, SliderRail, SliderRoot, SliderThumb, SliderTrack, SliderValueLabel

// UNUSED EXPORTS: SnackbarContent, withSnackbar

// UNUSED EXPORTS: TypographyRoot

// UNUSED EXPORTS: modalClasses

// UNUSED EXPORTS: overridesResolver

// UNUSED EXPORTS: testReset

// Unfortunately there appears to be a bug in Internet Explorer 10 Mobile (and

// Update /system/styled/#api in case if this changes

// Update and add props.

// Update the remainder.

// Update the ruleset cache as we apparently encountered a state change or just started lexing.

// Use !important to override the Modal inline-style.

// Use `util.types` for Node.js 10+.

// Use computed style, here to get the real padding to add our scrollbar width.

// Use custom drag image if user specifies it.

// Use the clientRect sizes if it's not been transformed.

// Use the fastest means possible to execute a task in its own turn, with

// Use the incrementing value for client-side rendering only.

// Use the setState() updater to ensure state isn't stale in certain edge cases.

// Used https://github.com/thinkloop/multi-key-cache as inspiration

// Used to avoid issues with jss-plugin-expand integration.

// Used to ensure correct rules order.

// Used to filter out mouse emulated events on mobile.

// Userland code must COPY any data/references

// Using components as a low-level styling construct can be simpler.

// Usually we want to publish it in the next tick so that browser

// Utilizing the CSS.supports method to check if touch-action is supported.

// V8

// V8/Chrome engine

// Value is empty and wasn't defined before.

// Value with a vendor prefix.

// Visibility needed to hide the extra text area on iPads

// We accomplish this by signaling an 'error' token to be produced for the current

// We also can't just check "__reactInternalSnapshot",

// We always will resolve, errors should be handled within loading UIs.

// We are going to remove this value.

// We are using the mouseover event instead of the mouseenter event to fix a hide/show issue.

// We can skip rerendering when the tooltip is already open.

// We can use a shorthand class name, we never use the keys to style the components.

// We can't add rules to a detached style node.

// We can't replace rules to a detached style node.

// We can't use it server-side.

// We create the style sheet during the creation of the component,

// We disable the focus ring for mouse, touch and keyboard users.

// We dispatch a timeout with a specified delay of 0 for engines that

// We do this comparison to avoid unneeded `rule.prop()` calls, since we have the old `style` object here.

// We don't need to extract functions on each style update, since this can happen only once.

// We don't need to include them in the merged props because of this.

// We don't support changing that prop on an open FocusTrap

// We don't support function values inside of function rules.

// We don't want to close the dialog when clicking the dialog content.

// We don't want to display the ripple for touch scroll events.

// We don't want to wait for the next render commit.

// We fall back to timers in workers in most engines, and in foreground

// We might render an empty child.

// We need to account for this eventuality.

// We need to book keep the focused state manually.

// We need to clone array because if we modify the index somewhere else during a loop

// We need to do that only once.

// We need to extract function values from the declaration, so that we can keep core unaware of them.

// We need to handle both cases, but can't just check for the presence of "maybeSnapshot",

// We need to ignore the next contain as

// We need to render the container without children first.

// We need to reset the rule counter for SSR for each request.

// We need to run the plugins in case new `style` relies on syntax plugins.

// We need to save the original decl before creating the rule

// We need to update the position of the drawer when the direction change and

// We need to use `force: true` because `rule.style` has been updated during onUpdate hook, so `rule.prop()` will not update the CSSOM rule.

// We need to wait before we start listening for mousemove events.

// We only want to reference the top level rules, deleteRule API doesn't support removing nested rules

// We queue errors to ensure they are thrown in right order (FIFO).

// We rely on a new `style` ref in case it was mutated during onUpdate hook.

// We render a select. We can ignore the type provided by the `Input`.

// We should not do anything if required serverside.

// We still want to show ripple effect.

// We test every property on vendor prefix requirement.

// We try to not inherit from `Object.prototype`. In some engines creating an

// We use a position absolute over a flexbox in order to forward the pointer events

// We use a timer in order to only show the ripples for touch "click" like events.

// We use our own heuristic for those browsers.

// We use the tabindex attribute to signal the available options.

// We want only prefixable values here.

// We will redeploy the sheet once user will attach it.

// We would risk displaying two tooltips at the same time (native + this one).

// We'll have to wait for @3x to see if this is entirely correct

// What format function should we use?

// When 0 is inside the interval, 0 should be a tick

// When a categorical chart is combined with another chart, the value of chartX

// When a store is created, an "INIT" action is dispatched so that every

// When axis is a categorial axis, but the type of axis is number or the scale of axis is not "auto"

// When category axis has duplicated text, serial numbers are used to generate scale

// When interacting quickly, the text can end up selected.

// When less ticks can cover the interval, we should add some additional ticks

// When new generator function is created, rule counter is reset.

// When num is bigger than 1 or less than -1 it won't get converted to this notation so it's fine.

// When passed a node, call the hook straight away.

// When rule is being stringified before selector was defined.

// When rules are inserted using `insertRule` API, after `sheet.detach().attach()`

// When using a custom drag layer, the only way to prevent

// When, after limiting to maxLines, we still have too much to return,

// Whichever timer succeeds will cancel both timers and

// Whitespaces

// Whitespaces after open parentheses

// Whitespaces before closed

// Width and height properties

// Will be empty if link: true option is not set, because

// Will default to using width for aspect ratio

// Win specificity over the input base

// With Edge, Safari and Firefox, no focus related events are fired when the focused area stops being a focused area.

// With unmountOnExit or mountOnEnter, the enter animation should happen at the transition between `exited` and `entering`.

// Without it, IE will have a broken source order specificity if we

// Word can be added to an existing line

// Work around @2x coordinate discrepancies in browsers

// Work around Safari 8 positioning bug

// Workaround for https://github.com/facebook/react/issues/7769

// Works with iframes and any node types.

// Write current value to cache.

// Zero.

// Zero?

// Zooming can change the DPR, but it seems to report a value that will

// `.lex()` run.

// `.offsetParent` reports `null` for fixed elements, while absolute elements

// `2` may be desired in some cases – research later

// `Decimal.rounding = 4;`

// `Decimal.rounding = Decimal.ROUND_HALF_UP;`

// `Objet.keys(slots)` can't be wider than `T` because we infer `T` from `slots`.

// `call`, just like a function.

// `defaultOpen` and `openState` are ignored to avoid unnecessary callbacks.

// `fast_lex()` one:

// `initial`

// `isOpenControlled` is ignored because the component should never switch between controlled and uncontrolled modes.

// `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247

// `process.on("uncaughtException")` or by a domain.

// `rawAsap` unless and until one of those tasks throws an exception.

// `requestFlush` is implemented using a strategy based on data collected from

// `requestFlush` requests that the high priority event queue be flushed as

// `setImmediate` must be called *by name* and therefore must be wrapped in a

// `setTimeout` does not call the passed callback if the delay is less than

// `substr` anticipation: treat \r\n as a single character and take a little

// `substring` anticipation: treat \r\n as a single character and take a little

// `this.productions_[]` is zero-based indexed while states start from 1 upwards...

// `this` references an array

// `toDecimalPlaces`, `toExponential`, `toFixed`, `toPrecision` and `toSignificantDigits`.

// `toFixed`, `toPrecision` and `toSignificantDigits`.

// a calc()

// a string precedes the next number in b

// a task throws an exception.

// accept:

// access a dom node that is no longer there (as the fallback component is being shown instead).

// add syncId

// after we've transformed and limited the newLines in here:

// alias for classNamePrefix, if provided will listen to theme (required for theme.components[name].styleOverrides)

// all nested rules within the sheet.

// allow the PRE/POST handlers set/modify the return token for maximum flexibility of the generated lexer:

// allows for nested Transitions

// also check if we've fully initialized the lexer instance,

// also handles Invalid Date

// amendments. These decisions, particularly to marginalize MessageChannel and

// an event 20 times per second until it succeeds.

// and applies them to the HTMLElements such as popper and arrow

// and chartY may beyond the boundaries.

// and chop them, then limit them:

// and height. In this case, though, returning null from render()

// and hitting left arrow to move the cursor in a text input etc.

// and make sure the error info doesn't stay due to potential

// and make sure the input has been modified/consumed ...

// and we advance immediately past the LF as well, returning both together as if

// angle

// animation duration

// any flickering

// any other slot specified

// anymore

// anyway.

// approximately 7 in web workers in Firefox 8 through 18, and sometimes not

// are being used under the hood.

// are running

// aria-hidden because the dom element doesn't exist either

// arrow is optional + virtual elements

// as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring

// as produced by either `showPosition()` or `prettyPrintRange()`:

// as soon as a modal is adding its modalRef is undefined. it can't set

// as this one delivers all parser internals ready for access by userland code.

// back into ASAP proper.

// bad specificity issues may appear.

// based on https://github.com/WICG/focus-visible/blob/v4.1.5/src/focus-visible.js

// because cache plugin needs to use it as a key to return a cached rule.

// because this.closeSnackbar called this function

// begin flushing on the next task the task throws an error.

// beginning of the queue.

// between events.

// break out of loop: we accept or fail with error

// broad spectrum of browsers.

// but we can use a longhand property instead.

// but we keep the prototype.constructor and prototype.name assignment lines too for compatibility

// by moving forward at least one character at a time IFF the (user-specified?) `parseError()`

// cache prefill method.

// calamities or when the `%options no-try-catch` option has been specified for the grammar, in which

// calculate the middle value

// calculate the middle value of ticks

// calculate total length error

// call `rawAsap.requestFlush` if an exception is thrown.

// call individual snackbar onClose callback passed through options parameter

// calling preventDefault in keyUp on a <button> will not dispatch a click event if Space is pressed

// calling this method:

// can be children of body and can't have aria-hidden attribute.

// can be string

// can reliably accommodate that request. This will usually be snapped

// can test whether the search value is (self-) comparable. We can’t do this

// cancel debounced handler

// candidate group value.

// case this parse() API method doesn't come with a `finally { ... }` block any more!

// catch misc. parse failures:

// cf. https://www.w3.org/TR/html-aria/#docconformance

// character to make sure that the built-in object properties are not

// cheap lodash replacements

// check for visited object

// check that specially as object equality is likely to fail

// check that this isn't another touchstart due to multitouch

// checking against potential state variable does not suffice if we focus and blur synchronously.

// children are handled after the parents, so the order of style elements would be parent->child.

// class name could be used further down

// class or functional component otherwise

// clean up the lingering lexer structures as well:

// cleanly divide the values into the appropriate subpixels.

// cleanup:

// clear the hash so this node won't be recognizable as rehydratable by other <Global/>s

// clicking a checkbox to check it, hitting a button to submit a form,

// clipping (or hiding) overflowing elements with a position different from

// clipping parents

// closure.

// cmp is -1.

// coming from build/babel/plugins/react-loadable-plugin.js

// component stays as a function. This condition makes sure that we do not interpolate functions

// compression: is the RE an xref to another RE slot in the rules[] table?

// consistent and will resume where it left off when called again.

// console.log('entering', key)

// console.log('leaving', key)

// console.log('unchanged', key)

// const clipPathId = _.isNil(id) ? this.id : id;

// constitute the set of elements which can produce a cyclic ref.

// container itself is invisible and should not block clicks, clicks should be passed to its children

// contexts in the following browsers.

// copy over the last transition props;

// copy state

// create a containing block.

// create an error hash info instance: we re-use this API in a **non-error situation**

// current match in a

// current match in b

// data of bar

// debounced at least once.

// decide if it should reanimate with initial from style when props change

// declare here to prevent spreading to DOM

// default action (generated by JISON mode classic/merge :: 2,VT,VA,-,-,-,-,-,-):

// default, action):

// did not guarantee a failure signal by throwing an exception!

// digit at (left-to-right) index j, e.g. if w is 908714 and j is 2, the expression will give

// direction === 'down'

// dirty hack (for recharts' test)

// divisor < 1e7

// divisor >= 1e7

// do add an ellipsis postfix...

// do add an ellipsis prefix...

// do not (yet) kill the sharedState when this is a reentrant run.

// do not edit .js files directly - edit src/index.jst

// don't hoist over string (html) components

// don't overwrite the `symbol` variable: use a local var to speed things up:

// done when the component updates

// dragenter handler.

// e is the base 10 exponent.

// e.g. https://bugzilla.mozilla.org/show_bug.cgi?id=559561.

// effective way to apply styles to an HTMLElement

// either ensure that no exceptions are thrown from your task, or to manually

// eliminate undefined or null or empty string

// else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)

// empty

// end of current subpath

// error bar for horizontal charts, the x is fixed, y is a range value

// error bar for horizontal charts, the y is fixed, x is a range value

// eslint-disable-line

// eslint-disable-line no-empty

// eslint-disable-line react-hooks/exhaustive-deps

// eslint-disable-line react/no-array-index-key

// eslint-disable-next-line @typescript-eslint/ban-ts-comment

// eslint-disable-next-line @typescript-eslint/naming-convention

// eslint-disable-next-line @typescript-eslint/no-unused-vars

// eslint-disable-next-line @typescript-eslint/no-use-before-define

// eslint-disable-next-line import/no-unused-modules

// eslint-disable-next-line jsx-a11y/no-noninteractive-element-interactions

// eslint-disable-next-line no-nested-ternary

// eslint-disable-next-line no-prototype-builtins

// eslint-disable-next-line no-restricted-globals

// eslint-disable-next-line no-unused-vars

// eslint-disable-next-line no-useless-concat -- Workaround for https://github.com/webpack/webpack/issues/14814

// eslint-disable-next-line operator-linebreak

// eslint-disable-next-line prefer-spread

// eslint-disable-next-line react-hooks/exhaustive-deps

// eslint-disable-next-line react-hooks/rules-of-hooks -- `React.useId` is invariant at runtime.

// eslint-disable-next-line react/no-array-index-key

// eslint-disable-next-line react/no-did-update-set-state

// eslint-disable-next-line react/prop-types

// even if the current drag event matches a user-defined type.

// even then.

// event.preventDefault() is meant to stop default behaviors like

// events in browsers.

// every available SauceLabs Selenium web driver worker at time of writing.

// exception is thrown by a task, that the task queue will continue flushing as

// exception is thrown.

// exchange

// execute the callback.

// exp(0) = 1

// expected terminals and nonterminals is produced.

// falls through

// fastest way to nuke an array without overly bothering the GC

// filter props for Transtition

// find coordinate of category axis by the value of category

// first function can receive multiply arguments

// fix #52 : a-(b+c) = a-b-c

// fixes shallow isOver which would only be non-shallow because of

// focusable events only.

// for "a" so this is checking that

// for a comparator (except for specific, known comparators) because we can’t

// for backward compatibility

// for more details.

// for string (html) tag, preserve the behavior in emotion & styled-components.

// frequency

// function makeRequestCallFromMessageChannel(callback) {

// function makeRequestCallFromSetImmediate(callback) {

// function using ln(x*10^e) = ln(x) + e*ln(10).

// get data by activeIndex when the axis don't allow duplicated category

// get dispatched despite target being no longer there. The easy solution is to check

// get union set and add compatible prefix

// getSnapshotBeforeUpdate(prevProps) {

// goto new state = table[STATE][NONTERMINAL]

// graphic child has data props

// grouped, and fractional or exponential “suffix” part that is not.

// grow, but to avoid an O(n) walk for every task we execute, we don't

// handle parse error

// has dataKey in <Axis />

// has not consumed/modified any pending input or changed state in the error handler:

// have WebKitMutationObserver but not un-prefixed MutationObserver.

// height. This ensures a tapable area outside of the simple menu with which to dismiss

// helper: duplicate sequence from *relative* offset and length.

// helper: reconstruct the 'goto' table

// helper: reconstruct the defaultActions[] table

// helper: reconstruct the productions[] table

// helper: runlength encoding with increment step: code, length: step (default step = 0)

// helper: unpack an array using helpers and data, all passed in an array argument 'a'.

// hence the non-standard less-or-equal check in the next loop condition!

// hence we must only add our own match length now:

// heuristic to determine if the error message already contains a (partial) source code dump

// http://davidwalsh.name/vendor-prefix

// http://fb.me/prop-types-in-prod

// http://jsperf.com/element-style-object-access-vs-plain-object

// http://stackoverflow.com/questions/1382107/whats-a-good-way-to-extend-error-in-javascript/#35881508

// http://www.nonblocking.io/2011/06/windownexttick.html

// https://bugs.chromium.org/p/chromium/issues/detail?id=661108&q=contenteditable%20tabindex&can=2

// https://caniuse.com/#search=appearance

// https://caniuse.com/#search=color-adjust

// https://caniuse.com/#search=keyframes

// https://caniuse.com/#search=mask

// https://caniuse.com/#search=text-orientation

// https://caniuse.com/#search=touch-action

// https://codesandbox.io/s/button-keyup-preventdefault-dn7f0

// https://codesandbox.io/s/mui-pr-22247-forked-h151h?file=/src/App.js

// https://css-tricks.com/snippets/css/force-vertical-scrollbar/

// https://developer.mozilla.org/en-US/docs/Web/API/Window/innerWidth#usage_notes

// https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block

// https://docs.google.com/spreadsheets/d/1mG-5UYGup5qxGdEMWkhP6BWCz053NUb2E1QoUTU16uA/edit#gid=783724593

// https://en.wikipedia.org/wiki/Content_Security_Policy

// https://github.com/cssinjs/jss/blob/4e6a05dd3f7b6572fdd3ab216861d9e446c20331/src/utils/createGenerateClassName.js

// https://github.com/emotion-js/emotion/blob/26ded6109fcd8ca9875cc2ce4564fee678a3f3c5/packages/styled/src/utils.js#L40

// https://github.com/facebook/react/issues/20074

// https://github.com/kriskowal/q/issues/396

// https://github.com/mui/material-ui/issues/13485#issuecomment-676048492

// https://github.com/popperjs/popper-core/issues/1078

// https://github.com/popperjs/popper-core/issues/837

// https://github.com/react-dnd/react-dnd/issues/1310

// https://github.com/reactjs/react-transition-group/pull/749

// https://github.com/recharts/recharts/pull/2925

// https://github.com/tildeio/rsvp.js/blob/cddf7232546a9cf858524b75cde6f9edf72620a7/lib/rsvp/asap.js

// https://html.spec.whatwg.org/multipage/interaction.html#focus-fixup-rule.

// https://m2.material.io/components/menus#specs > Dense

// https://www.w3.org/WAI/ARIA/apg/patterns/combobox/examples/combobox-select-only/

// i is where to slice str to get the first word of the digits array.

// i: what would be the index of rd within w if all the numbers were 7 digits long (i.e. if

// if (match_str.indexOf('\n') !== -1 || match_str.indexOf('\r') !== -1) {

// if calc expression couldn't be resolved to a single value, re-wrap it as

// if children is a function and animation is not active, set style to 'to'

// if cmp === 1, k will be 0

// if dragend handler does something like showing an alert.

// if it is a known parser or lexer error which has been thrown by parseError() already:

// if maxHeight is set, overwrite if calculatedHeight is greater than maxHeight

// if nothing has changed then don't resubscribe

// if open event.stopImmediatePropagation

// if skipVariantsResolver option is defined, take the value, otherwise, true for root and false for other slots.

// if the focus event is not coming from inside the children's react tree, reset the refs

// if there are 1 or less ticks ticks then the active tick is at index 0

// if this doesn't exist then it will be null so the style element will be appended

// if token isn't its numeric value, convert

// if we are mounting and running this it means appear _must_ be set

// immediately in some browsers.

// import { RadiusAxisProps, AngleAxisProps } from '../polar/types';

// in August 2020.

// in Chrome, <details/>, <audio controls/> and <video controls/> elements get a default

// in Safari 9 which returns 'object' for typed arrays and other constructors.

// in case function rule returns a falsy value.

// in case we cannot find the element

// in case we pass a DOM element

// in case we pass a React ref using React.createRef()

// in case we pass a querySelector

// in nodeToRestore.current being null.

// in the error hash instance(s) it is more permanently interested in.

// in the same tick for the source element, and browser freaks out.

// include XYCoord objects that may be equivalent, but do not have instance equality.

// including expansion work to be done to go from a loaded

// inclusive stop

// incorrect for RTL.

// index in s

// info.lexer = null;

// info.value = null;

// info.value_stack = null;

// info.yy = null;

// insert keyframes

// insert rules after we insert the style tag.

// instance in this way is faster than calling `Object.create(null)` directly.

// instanceof

// internals: defined here so the object *structure* doesn't get modified by parse() et al,

// interpolate non-matching numbers

// interpolate(a, b)(t) takes a parameter t in [0,1] and returns the corresponding range value x in [a,b].

// into this ASAP package. It was later adapted to RSVP which made further

// invoke the `lex()` token-producing API and related APIs, hence caching the set for direct access helps

// is able to screenshot the current (not yet dragging) state.

// is empty. Make it non-empty to avoid this issue.

// is filled with the initial data specified by the modifier. This means

// is supported on both Edge@12 and IE if CSS.supports is not available that means that

// is to add a scroll event listener that calls for a flush.

// is useful for low frequency updates where sync behavior simplifies the

// isControlled is ignored in the hook dependency lists as it should never change.

// it as the trailing edge, or we've hit the `maxWait` limit.

// it doesn't persist and is fresh on each update.

// it is only for use together with insertRule API.

// it is removed from DOM and trigger endDrag manually.

// it was all a single 'character' only.

// it will try to move the focus back to the rootRef element.

// it's a lowercase character

// it's not an issue. I don't think anyone ever specifies width on <html>

// it's not behavior of the native <option> and causes

// item and use the first valid item as a fallback

// item hasn't changed transition states

// item is new (entering)

// item is old (exiting)

// j > 0 means i > number of leading zeros of w.

// j: if > 0, the actual index of rd within w (if < 0, rd is a leading zero).

// jsdom doesn't support innerText

// k is the carry.

// k will be how many times the divisor goes into the current remainder.

// last index slot; we don't mind when other previously 

// later be divided by this number, then separate out the power of 10 using

// length

// less than 1y!

// lexer to a usable lexer:

// like rules inside media queries or keyframes

// limiting the number of zeros to `Math.ceil(pr / LOG_BASE) + 2`.

// literal IDs in a description string.

// ln(-x) = NaN

// ln(0) = -Infinity

// ln(1) = 0

// ln(a*10^b) = ln(a) + b*ln(10).

// ln(a^b) = b * ln(a),   ln(a) = ln(a^b) / b

// ln(y) = ln((1 + x)/(1 - x)) = 2(x + x^3/3 + x^5/5 + x^7/7 + ...)

// loc.last_column; 

// log[-b](x) = NaN

// log[0](x)  = NaN

// log[1](x)  = NaN

// log[b](-x) = NaN

// log[b](0) = -Infinity

// log[b](1) = 0

// logic was previously ran for the previous placement and is therefore

// logic.

// lower priority turn.

// magic number of faking previous x and y location

// magic number to prevent infinite loop

// matched lines end up in the array too. 

// max n is 21 (gives 0.9, 1.0 or 1.1) (9e15 / 21 = 4.2e14).

// max n is 6 (gives 0.7 - 1.3)

// means it doesn't take into account transforms.

// means it has ended and the drag source node disappeared from DOM,

// more than necessary so that we can still properly check against maxSize

// most browsers create a new CSSStyleSheet, except of all IEs.

// most common use case for this is the `flip` modifier changing the

// multiply the argument by itself until the leading digits of the significand are 7, 8, 9,

// mutation observers, so that implementation is used instead.

// n: the number of digits of w.

// necessary until the next `flush` completes.

// needing to be prepended, but this can be avoided while still ensuring correct rounding by

// nextStatus will always be ENTERING or EXITING.

// nines may infinitely repeat.

// no enter animation skip right to ENTERED

// no exit animation skip right to EXITED

// node is `undefined` when user provided `nodeRef` prop

// non-matching targets.

// normalize(a, b)(x) takes a domain value x in [a,b] and returns the corresponding parameter t in [0,1].

// not have MutationObservers.

// not necessary (debounced to run at most once-per-tick)

// note: ignores next directive

// notranslate needed while Google Translate will not fix zero-width space issue

// now make sure we don't print an overly large amount of error area: limit it 

// now that we have a significantly reduced string to process, transform the newlines

// nuke the error hash info instances created during this run.

// nuke the vstack[] array at least as that one will still reference obsoleted user values.

// number interpolators

// number transform to string

// number with exponent >= 1500000000000000 (9e15 / 6 = 1.5e15), so instead recall this

// numbers in a & b match

// of the `<html>` and `<body>` rect bounds if horizontally scrollable

// of the menu.

// offset according to the specified time zone.

// on a disabled element:

// onEnterXxx and onExitXxx callbacks have a different arguments.length value.

// operation:

// options: {},                             /// <-- injected by the code generator

// or a buggy LUT (LookUp Table):

// or a simplified calc expression

// or auto filled by the browser before the hydration (for SSR).

// or clamp the specified precision to the supported range.

// or plan D heuristics to produce a 'sensible' last_line value:

// or the symbol itself, serving as its own 'description' for lack of something better to serve up.

// order based on dependencies

// order based on phase

// order matters. first callbacks.onEntered to set entered: true,

// order of magnitudes than the rough step

// original foundation for this library.

// other vendors use to add Webkit prefixes to some properties

// otherwise our MenuItems dispatches a click event

// otherwise we will only clear a single timer when unmounting while two

// otherwise, when the action codes are all simple return token statements:

// overridden or used as an attack vector.

// page's first load. Thankfully, this version of Safari supports

// passing the preloaded promise of component to `React.lazy`.

// placement, which then needs to re-run all the modifiers, because the

// plan B: heuristic using preceding and following:

// plan C?: see if the 'current' location is useful/sane too:

// points of area

// pop off stack

// pow(0, y < 0) = Infinity

// pow(0, y > 0) = 0

// pow(1, y) = 1

// pow(x < 0, y non-integer) = NaN

// pow(x, 0) = 1

// pow(x, 1) = x

// prefer the async Popper#update method

// preferrable to falling back to setTimeout since it does not have

// preserved between calls to `flush` so that it can be resumed if

// prevent lingering circular references from causing memory leaks:

// previous lex rules MAY have invoked the `more()` API rather than producing a token:

// priority over other events including IO, animation, reflow, and redraw

// private

// produce one 'error' token as `.parseError()` in `reject()`

// produce one 'error' token until this situation has been resolved, most probably by parse termination!

// product = divisor * trial digit.

// product > remainder.

// properly positioned near its reference element

// properties

// properties we need to feature test at runtime.

// props priority: `inProps` > `contextProps` > `themeDefaultProps`

// props.viewBox is sometimes generated every time -

// public for test

// push nonterminal (reduce)

// push state

// queue if the exception handled by Node.js’s

// rapidly by a visibility change.

// rawAsap.makeRequestCallFromTimer = makeRequestCallFromTimer

// rd: the rounding digit, i.e. the digit after the digit that may be rounded up.

// react-transition-group#onExited

// read action for current state and first input

// recover context

// reduce AST to its simplest form, that is, either to a single value

// reduce:

// reducer returns their initial state. This effectively populates

// ref cycle via userland code manipulations.

// ref objects should be passed straight through without wrapping

// regular focus change.

// remove cyclic references added to error info:

// remove duplicated category

// remove syncId

// report exceptions through the parseError callback too, but keep the exception intact

// require.resolveWeak check is needed for environments that don't have it available like Jest

// requiring the generation of a new finalized classes object.

// resolution

// restoreLastFocus()

// retrieve state number from top of stack

// return start animation method

// return stop animation method

// return the containing block

// return the node so it can be chained (e.g. when within callback refs

// reversing items to affect render order (for layering)

// root should come after others to override maxWidth

// rule action called reject() implying a rule MISmatch. 

// rule action called reject() implying the next rule should be tested instead. 

// run the map function here instead so that the key is the computed one

// sanitize: fix last_line BEFORE we fix first_line as we use the 'raw' value of the latter

// save context

// scan index for next number in b

// screensize shrink.

// scrolling. This problem does not impact ASAP because Safari 6.0 supports

// set up the cleanup function; make it an API so that external code can re-use this one in case of

// setState callbacks and unmounting in testing, so always make sure that

// shift tasks off the queue after they have been executed.

// shift:

// should not use createChainedFunction for onClose.

// significant digits p, where x is positive and p is in [1, 21] or undefined.

// since we inject focus related props into children we have to do a lookahead

// skip anything which isn't a calc() function

// skip constant() and env()

// slowing down the queue of pending tasks, we rethrow the error in a

// so if they don't have a tabindex attribute specifically set, assume it's 0.

// so that we don't need to depend on findDOMNode() from react-dom.

// so the browser didn't dispatch the dragend event.

// so we can simply merge all the props without having to worry about extracting event handlers.

// so we don't have to add it to registered cache.

// some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.

// something + 0 => something

// something - 0 => something

// soon as possible, but if you use `rawAsap` directly, you are responsible to

// soon as possible.

// source: https://stackoverflow.com/questions/49875255

// specZ: The maximum height of a simple menu should be one or more rows less than the view

// speed up those activities a tiny bit.

// sqrt(-x) = NaN

// sstack[sp - 1];

// stale/incorrect

// start of current subpath

// step 1: decompress the regex list:

// step 2: unfold the conditions[] set to make these ready for use:

// step into the shadow DOM of the parent of a slotted node

// string constants and placeholders

// string preceding current number in b, if any

// stringify AST and write it back

// stringify calc expression and produce an AST

// styled-components's API removes the mapping between components and styles.

// subsequent tasks. The higher level `asap` function ensures that if an

// such as table ancestors and cross browser bugs.

// support both `slots` and `components` for backward compatibility

// support for disabling server side rendering, eg: dynamic(() => import('../hello-world'), {ssr: false}).

// suppress the useLayoutEffect warning on server side.

// sync with `height` in `legend` styles

// sync with `lineHeight` in `legend` styles

// task queue, are implemented in Internet Explorer 10, Safari 5.0-1, and Opera

// tell if the comparator is symmetric, and an asymmetric comparator can’t be

// that causes it, under certain circumstances, to provide the same value for

// that parent has a higher specificity.

// the JS engine itself can go and remove these statements when `yy` turns out to be unused in any action code!

// the axis is a categorical axis

// the bottom line

// the case, the tooltip disappears and immediately re-appears, causing a flickering effect

// the combined list

// the current version with just one short number and use it for classes generation

// the default drag preview from drawing in IE is to screenshot

// the dragging state in which the node itself has zero opacity

// the field type is category data and this axis is categorical axis

// the field type is category data and this axis is numerical axis

// the field type is numerical

// the following paper: Steffen, M. 1990. A Simple Method for Monotonic

// the initial state tree.

// the left line of |--|

// the menu.

// the middle line

// the middle line of |--|

// the minimum 4ms penalty.

// the modifiers in the next step

// the module.

// the new state tree with any relevant data from the old one.

// the right line of |--|

// the select to close immediately since we open on space keydown

// the text of a text node between "1" and "-1".

// the top line

// the tree but if it's a string tag, we know it won't

// the worse case when we don't receive any information from the parent and the library doesn't add any wrappers

// themselves to help turning this output into something that easier to read by humans

// then handleEntered to check if there's a request for closing

// they had leading zeros)

// this (e.g. Edge 2019, IE11, Safari)

// this improves memory usage since we can avoid storing the whole style string

// this initial `setInput()` call: hence we can now check and decide

// this is a quicker (but less type safe) way to save quite some bytes from the bundle

// this is safe because grey does not change between default light/dark mode

// this shouldn't happen, unless resolve defaults are off

// those rules will already have moved this `offset` forward matching their match lengths,

// thus helping JIT compilers like Chrome V8.

// ticks are distributed in a circle

// ticks are distributed in a single direction

// time

// to a 4 milisecond delay, but once we're flushing, there's no delay

// to avoid it. If k is 1 there is a need to compare yd and rem again below.

// to capture the MutationObserver implementation in a closure, were integrated

// to check if there is a `selected` item. We're looking for the last `selected`

// to enable drag and drop

// to merit a non-consuming error handling action right now.

// to obtain a human-readable name of the current grammar rule.

// to report a different scrollHeight depending on whether the last line

// to the input and to support wrapping tags..

// to the result

// to the top and bottom line count:

// to work around IE not supporting custom drag previews.

// todo Array<Tick>

// todo join specific chart propTypes

// touch-action will be supported

// track this instance so we can `destroy()` it once we deem it superfluous and ready for garbage collection!

// trailing edge, the system time has gone backwards and we're treating

// transition css properties(dash case), optional

// translateX(0) is a workaround for Safari transform scale bug

// true if both NaN, false otherwise

// truncate already-completed tasks.

// tslint:disable-next-line:ban-comma-operator

// type === 1: accept

// unbounded. To prevent memory exhaustion, the task queue will periodically

// undefined on initial render

// under any circumstances.

// unless `do_not_describe` parameter is set, in which case a list of the raw, *numeric*,

// update animtaion

// update configuration in children

// update the collected properties after react renders.

// use case of https://github.com/emotion-js/emotion/issues/2675

// use default actions if available

// use parent's node as drag image. Neither works in IE though.

// used to test whether a single value is comparable.

// value + (value + something) => (value + value) + something

// value + (value - something) => (value + value) - something

// value + value

// value - (value + something) => (value - value) - something

// value - (value - something) => (value - value) + something

// value - value

// value <op> (expr)

// w: the word of xd which contains the rounding digit, a base 1e7 number.

// want to crash if focus-visible malfunctioned?

// we can cancel any pending setState callbacks after we unmount.

// we can only be confident with a positive value.

// we can try to recover from a lexer error that `parseError()` did not 'recover' for us

// we cannot recover from the error!

// we didn't create the domain from user's props above, so we need to calculate it

// we end up with very hard-to-track-down side effects.

// we have to use a deprecated `findDOMNode` method in order to find a DOM element to attach to

// we only need to add the styles to the registered cache if the

// we use a counter. Also it is more accurate, because user can manually reevaluate

// we want drag drop operation to start

// we'll need to consider how to pull off dev-tooling

// when doing some visual updates in it. Using flushSync ensures that the dom will be painted after the states updates happen

// when it's hidden.

// when modal was unmounted before modalRef gets null

// when the `parseError()` call returns, we MUST ensure that the error is registered.

// where the user has an older version of dnd-core like in

// where to trim.  This should not happen :tm:

// where x = (y - 1)/(y + 1)    (|x| < 1)

// whether or not is barSize setted by user

// whether there actually is a target before firing `hover`.

// whether we'll go with the standard, slower, lex() API or the

// which are basically components used as a selectors.

// which happen after the first `rules.add()` call.

// which is necessary in order to transition styles when adding a class name.

// which needs to override any child's styles.

// which points to Object.

// which, combined with the parse kernel's `$accept` state behaviour coded below,

// while the component is disabled.

// will abruptly end the dragging, which is not obvious.

// will be returned from that function.

// will produce the `$$` value output of the <startSymbol> rule as the parse result,

// will receive the previous state. This effectively populates

// with respect to the four values p0, p0 + m0 / 3, p1 - m1 / 3, p1".

// with userland code which might access the derived class in a 'classic' way.

// won't be able to remove the CSS rule from the DOM.

// workers, we enlist an interval handle that will try to fire

// workers. `global` is a provision of Browserify, Mr, Mrs, or Mop.

// would be better than imposing the 4ms delay of timers.

// x % 0 = NaN

// x = x / 2^5

// x and y are finite, non-zero numbers with the same sign.

// x and y are non-zero numbers with the same sign.

// x is reduced to a value near 1.

// xdi: the index of w within xd.

// yy: ...,                                 /// <-- injected by setInput()

// }

// ⚠️ sticky is not supported by IE11.

// 如果是bar，计算bar的位置

// 支持Date类型的x轴

//# sourceMappingURL=AsapQueue.js.map

//# sourceMappingURL=DndContext.js.map

//# sourceMappingURL=DndProvider.js.map

//# sourceMappingURL=DragDropManagerImpl.js.map

//# sourceMappingURL=DragDropMonitorImpl.js.map

//# sourceMappingURL=DragSourceImpl.js.map

//# sourceMappingURL=DragSourceMonitorImpl.js.map

//# sourceMappingURL=DropTargetImpl.js.map

//# sourceMappingURL=DropTargetMonitorImpl.js.map

//# sourceMappingURL=EnterLeaveCounter.js.map

//# sourceMappingURL=HTML5BackendImpl.js.map

//# sourceMappingURL=HandlerRegistryImpl.js.map

//# sourceMappingURL=MonotonicInterpolant.js.map

//# sourceMappingURL=NativeDragSource.js.map

//# sourceMappingURL=OffsetUtils.js.map

//# sourceMappingURL=OptionsReader.js.map

//# sourceMappingURL=RawTask.js.map

//# sourceMappingURL=SourceConnector.js.map

//# sourceMappingURL=TargetConnector.js.map

//# sourceMappingURL=TaskFactory.js.map

//# sourceMappingURL=asap.js.map

//# sourceMappingURL=beginDrag.js.map

//# sourceMappingURL=connectors.js.map

//# sourceMappingURL=contracts.js.map

//# sourceMappingURL=coords.js.map

//# sourceMappingURL=createDragDropManager.js.map

//# sourceMappingURL=dirtiness.js.map

//# sourceMappingURL=dirtyHandlerIds.js.map

//# sourceMappingURL=dragOffset.js.map

//# sourceMappingURL=dragOperation.js.map

//# sourceMappingURL=drop.js.map

//# sourceMappingURL=dynamic-no-ssr.js.map

//# sourceMappingURL=dynamic.js.map

//# sourceMappingURL=endDrag.js.map

//# sourceMappingURL=equality.js.map

//# sourceMappingURL=fast-equals.js.map

//# sourceMappingURL=getDataFromDataTransfer.js.map

//# sourceMappingURL=hover.js.map

//# sourceMappingURL=index.esm.js.map

//# sourceMappingURL=index.js.map

//# sourceMappingURL=isRef.js.map

//# sourceMappingURL=js_utils.js.map

//# sourceMappingURL=makeRequestCall.js.map

//# sourceMappingURL=matchesType.js.map

//# sourceMappingURL=nativeTypesConfig.js.map

//# sourceMappingURL=publishDragSource.js.map

//# sourceMappingURL=refCount.js.map

//# sourceMappingURL=registration.js.map

//# sourceMappingURL=registry.js.map

//# sourceMappingURL=setClientOffset.js.map

//# sourceMappingURL=stateId.js.map

//# sourceMappingURL=useAccept.js.map

//# sourceMappingURL=useCollectedProps.js.map

//# sourceMappingURL=useCollector.js.map

//# sourceMappingURL=useDrag.js.map

//# sourceMappingURL=useDragDropManager.js.map

//# sourceMappingURL=useDragSource.js.map

//# sourceMappingURL=useDragSourceConnector.js.map

//# sourceMappingURL=useDragSourceMonitor.js.map

//# sourceMappingURL=useDragType.js.map

//# sourceMappingURL=useDrop.js.map

//# sourceMappingURL=useDropTarget.js.map

//# sourceMappingURL=useDropTargetConnector.js.map

//# sourceMappingURL=useDropTargetMonitor.js.map

//# sourceMappingURL=useIsomorphicLayoutEffect.js.map

//# sourceMappingURL=useMonitorOutput.js.map

//# sourceMappingURL=useOptionalFactory.js.map

//# sourceMappingURL=useRegisteredDragSource.js.map

//# sourceMappingURL=useRegisteredDropTarget.js.map

//# sourceMappingURL=wrapConnectorHooks.js.map

/// ADVANCED USE ONLY: tracks input which has been matched so far for the lexer token under construction; this value is transferred to the parser as the 'token value' when the parser consumes the lexer token produced through a call to the `lex()` API.  

/// INTERNAL USE ONLY  

/// INTERNAL USE ONLY: internal rule set cache for the current lexer state  

/// INTERNAL USE ONLY: mark whether the lexer instance has been 'unfolded' completely and is now ready for use  

/// INTERNAL USE ONLY: the set of lexErrorInfo objects created since the last cleanup  

/// INTERNAL USE ONLY; managed via `pushState()`, `popState()`, `topState()` and `stateStackSize()`  

/// READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: 'line number' at which the token under construction is located  

/// READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: length of matched input for the token under construction (`yytext`)  

/// READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: tracks RE match result for last (successful) match attempt  

/// READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: tracks entire input which has been matched so far  

/// READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: tracks input which has been matched so far for the lexer token under construction. `match` is identical to `yytext` except that this one still contains the matched input string after `lexer.performAction()` has been invoked, where userland code MAY have changed/replaced the `yytext` value entirely!  

/// READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: tracks location info (lines + columns) for the token under construction  

/// READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: tracks the 'cursor position' in the input string, i.e. the number of characters matched so far  

//_signaled_error_token: this._signaled_error_token,

//this.done = true;    -- don't set `done` as we want the lex()/next() API to be able to produce one custom EOF token match after this anyhow. (lexer can match special <<EOF>> tokens and perform user action code for a <<EOF>> match, but only does so *once*)

//token = this.simpleCaseActionClusters[indexed_rule];

//while (c0 < 9 && c0 != 1 || c0 == 1 && c.charAt(1) > 1) {

//yyClearIn: 0,

//yyErrOk: 0,

//yyRecovering: 0,
