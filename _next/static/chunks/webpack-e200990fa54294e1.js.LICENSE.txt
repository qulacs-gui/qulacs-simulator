/************************************************************************/

/******/

// 0 means "already installed".

// Check if module is in cache

// Create Trusted Type policy if Trusted Types are available and the policy doesn't exist yet.

// Create a new module (and put it into the cache)

// Execute the module function

// Flag the module as loaded

// JSONP chunk loading for javascript

// Return the exports of the module

// The chunk loading function for additional chunks

// The module cache

// The require function

// This file contains only the entry chunk.

// This function allow to reference all chunks

// This function allow to reference async chunks

// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded

// a Promise means "currently loading".

// avoid mem leaks in IE.

// create a fake namespace object

// create error before stack unwound to get useful stacktrace later

// define __esModule on exports

// define getter functions for harmony exports

// expose the modules object (__webpack_modules__)

// getDefaultExport function for compatibility with non-harmony modules

// install a JSONP callback for chunk loading

// loadScript function to load a script via script tag

// mode & 16: return value when it's Promise-like

// mode & 1: value is a module id, require it

// mode & 2: merge all properties of value into the ns

// mode & 4: return value when already ns object

// mode & 8|1: behave like require

// no HMR

// no HMR manifest

// no baseURI

// no prefetching

// no preloaded

// object to store loaded and loading chunks

// return url for filenames based on template

// setup Promise in chunk cache

// start chunk loading

// undefined = chunk not loaded, null = chunk preloaded/prefetched

// webpackBootstrap
